
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COMMA DIV ELSE END_BLOCK EQ FALSE FOR FUNC GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RPAREN SPLIT START_BLOCK STRING TRUE VARentry : start\n    start : start stmt\n          | empty\n    stmt : SPLITstmt : expression SPLIT\n    stmt : VAR ASSIGN LPAREN RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN RPAREN block_format\n    \n    stmt : VAR ASSIGN LPAREN func_params RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN func_params RPAREN block_format\n    \n    func_params : VAR\n                | func_params COMMA VAR\n    \n    stmt : VAR LPAREN RPAREN SPLIT\n    \n    stmt : VAR LPAREN expr_list RPAREN SPLIT\n    \n    stmt : PRINT LPAREN expr_list RPAREN SPLIT\n    stmt : FOR VAR IN range block_formatrange : RANGE LPAREN expr_list RPAREN\n    stmt : IF condition_list block_format\n         | IF condition_list block_format ELSE block_format\n    \n    block_format : START_BLOCK SPLIT block END_BLOCK SPLIT\n    \n    block : stmt\n          | block stmt\n    \n    stmt : VAR ASSIGN expression SPLIT\n         | VAR ASSIGN condition_list SPLIT\n    stmt : if_assign IF condition_list ELSE expression SPLITif_assign : VAR ASSIGN expression\n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : REM NUMBERexpression : LPAREN expression RPARENexpression : TRUEexpression : FALSEexpression : NUMBERexpression : STRINGexpression : VARempty :'
    
_lr_action_items = {'SPLIT':([0,2,3,4,5,6,7,15,16,17,18,19,35,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,62,66,69,78,79,80,81,86,90,91,92,93,95,98,100,102,103,105,106,107,108,109,111,113,114,115,117,],[-51,5,-3,-2,-4,19,-50,-48,-46,-47,-49,-5,-50,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,78,79,80,-45,-17,92,-22,-23,-12,98,102,-29,-30,5,-31,-6,-13,-7,-14,-15,-18,5,-20,115,-8,-9,117,-21,-24,-19,]),'VAR':([0,2,3,4,5,8,9,11,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,63,66,67,68,74,78,79,80,82,92,94,95,97,98,100,102,103,104,105,106,107,109,111,114,115,117,],[-51,7,-3,-2,-4,35,36,38,35,-5,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,73,83,-17,35,35,35,-22,-23,-12,35,7,35,-6,110,-13,-7,-14,-15,35,-18,7,-20,-8,-9,-21,-24,-19,]),'FUNC':([0,2,3,4,5,19,66,78,79,80,92,95,98,100,102,103,105,106,107,109,111,114,115,117,],[-51,9,-3,-2,-4,-5,-17,-22,-23,-12,9,-6,-13,-7,-14,-15,-18,9,-20,-8,-9,-21,-24,-19,]),'PRINT':([0,2,3,4,5,19,66,78,79,80,92,95,98,100,102,103,105,106,107,109,111,114,115,117,],[-51,10,-3,-2,-4,-5,-17,-22,-23,-12,10,-6,-13,-7,-14,-15,-18,10,-20,-8,-9,-21,-24,-19,]),'FOR':([0,2,3,4,5,19,66,78,79,80,92,95,98,100,102,103,105,106,107,109,111,114,115,117,],[-51,11,-3,-2,-4,-5,-17,-22,-23,-12,11,-6,-13,-7,-14,-15,-18,11,-20,-8,-9,-21,-24,-19,]),'IF':([0,2,3,4,5,13,15,16,17,18,19,35,43,44,45,46,47,48,49,50,51,52,53,54,55,57,62,66,78,79,80,92,95,98,100,102,103,105,106,107,109,111,114,115,117,],[-51,12,-3,-2,-4,42,-48,-46,-47,-49,-5,-50,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-25,-45,-17,-22,-23,-12,12,-6,-13,-7,-14,-15,-18,12,-20,-8,-9,-21,-24,-19,]),'REM':([0,2,3,4,5,6,7,8,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,62,66,67,68,71,73,74,77,78,79,80,82,90,91,92,94,95,98,99,100,102,103,104,105,106,107,108,109,111,114,115,117,],[-51,14,-3,-2,-4,21,-50,14,14,-48,-46,-47,-49,-5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,21,-50,14,21,14,14,-44,-32,-33,-34,-35,-36,21,21,21,21,21,21,-43,14,21,21,-45,-17,14,14,21,-50,14,21,-22,-23,-12,14,21,21,14,14,-6,-13,21,-7,-14,-15,14,-18,14,-20,21,-8,-9,-21,-24,-19,]),'LPAREN':([0,2,3,4,5,7,8,10,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,37,41,42,56,66,67,68,74,78,79,80,82,88,92,94,95,98,100,102,103,104,105,106,107,109,111,114,115,117,],[-51,8,-3,-2,-4,33,8,37,41,-5,8,8,8,8,8,8,8,8,8,8,8,8,56,8,63,8,41,41,74,-17,8,8,74,-22,-23,-12,8,104,8,8,-6,-13,-7,-14,-15,8,-18,8,-20,-8,-9,-21,-24,-19,]),'TRUE':([0,2,3,4,5,8,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,92,94,95,98,100,102,103,104,105,106,107,109,111,114,115,117,],[-51,16,-3,-2,-4,16,16,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-17,16,16,16,-22,-23,-12,16,16,16,-6,-13,-7,-14,-15,16,-18,16,-20,-8,-9,-21,-24,-19,]),'FALSE':([0,2,3,4,5,8,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,92,94,95,98,100,102,103,104,105,106,107,109,111,114,115,117,],[-51,17,-3,-2,-4,17,17,-5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-17,17,17,17,-22,-23,-12,17,17,17,-6,-13,-7,-14,-15,17,-18,17,-20,-8,-9,-21,-24,-19,]),'NUMBER':([0,2,3,4,5,8,12,14,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,92,94,95,98,100,102,103,104,105,106,107,109,111,114,115,117,],[-51,15,-3,-2,-4,15,15,43,-5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-17,15,15,15,-22,-23,-12,15,15,15,-6,-13,-7,-14,-15,15,-18,15,-20,-8,-9,-21,-24,-19,]),'STRING':([0,2,3,4,5,8,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,92,94,95,98,100,102,103,104,105,106,107,109,111,114,115,117,],[-51,18,-3,-2,-4,18,18,-5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-17,18,18,18,-22,-23,-12,18,18,18,-6,-13,-7,-14,-15,18,-18,18,-20,-8,-9,-21,-24,-19,]),'$end':([0,1,2,3,4,5,19,66,78,79,80,95,98,100,102,103,105,109,111,115,117,],[-51,0,-1,-3,-2,-4,-5,-17,-22,-23,-12,-6,-13,-7,-14,-15,-18,-8,-9,-24,-19,]),'END_BLOCK':([5,19,66,78,79,80,95,98,100,102,103,105,106,107,109,111,114,115,117,],[-4,-5,-17,-22,-23,-12,-6,-13,-7,-14,-15,-18,113,-20,-8,-9,-21,-24,-19,]),'ADD':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[20,-50,-48,-46,-47,-49,20,-50,20,-44,-32,-33,-34,-35,-36,20,20,20,20,20,20,-43,20,20,-45,20,-50,20,20,20,20,20,]),'MUL':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[22,-50,-48,-46,-47,-49,22,-50,22,-44,22,22,-34,-35,-36,22,22,22,22,22,22,-43,22,22,-45,22,-50,22,22,22,22,22,]),'DIV':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[23,-50,-48,-46,-47,-49,23,-50,23,-44,23,23,-34,-35,-36,23,23,23,23,23,23,-43,23,23,-45,23,-50,23,23,23,23,23,]),'MOD':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[24,-50,-48,-46,-47,-49,24,-50,24,-44,24,24,-34,-35,-36,24,24,24,24,24,24,-43,24,24,-45,24,-50,24,24,24,24,24,]),'GT':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[25,-50,-48,-46,-47,-49,25,-50,25,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,25,25,-45,25,-50,25,25,25,25,25,]),'LT':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[26,-50,-48,-46,-47,-49,26,-50,26,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,26,26,-45,26,-50,26,26,26,26,26,]),'GE':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[27,-50,-48,-46,-47,-49,27,-50,27,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,27,27,-45,27,-50,27,27,27,27,27,]),'LE':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[28,-50,-48,-46,-47,-49,28,-50,28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,28,28,-45,28,-50,28,28,28,28,28,]),'EQ':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[29,-50,-48,-46,-47,-49,29,-50,29,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,29,29,-45,29,-50,29,29,29,29,29,]),'NE':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[30,-50,-48,-46,-47,-49,30,-50,30,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,30,30,-45,30,-50,30,30,30,30,30,]),'POW':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,90,91,99,108,],[31,-50,-48,-46,-47,-49,31,-50,31,-44,31,31,31,31,31,31,31,31,31,31,31,-43,31,31,-45,31,-50,31,31,31,31,31,]),'ASSIGN':([7,],[32,]),'RPAREN':([15,16,17,18,33,34,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,60,61,62,63,64,70,71,73,76,77,83,85,90,91,93,99,110,112,],[-48,-46,-47,-49,59,62,-50,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,75,81,-26,-45,84,86,93,62,-10,96,62,-10,101,-29,-30,-31,-27,-11,116,]),'AND':([15,16,17,18,35,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,62,70,71,72,73,77,90,91,93,],[-48,-46,-47,-49,-50,67,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-28,67,-45,67,-28,67,-50,-28,-29,-30,-31,]),'OR':([15,16,17,18,35,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,62,70,71,72,73,77,90,91,93,],[-48,-46,-47,-49,-50,68,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-28,68,-45,68,-28,68,-50,-28,-29,-30,-31,]),'START_BLOCK':([15,16,17,18,35,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,62,75,84,87,89,90,91,93,96,101,116,],[-48,-46,-47,-49,-50,69,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,69,69,69,69,-29,-30,-31,69,69,-16,]),'COMMA':([15,16,17,18,35,43,44,45,46,47,48,49,50,51,52,53,54,55,60,61,62,64,73,76,83,85,99,110,112,],[-48,-46,-47,-49,-50,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,82,-26,-45,82,-10,97,-10,97,-27,-11,82,]),'ELSE':([15,16,17,18,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,62,66,72,90,91,93,117,],[-48,-46,-47,-49,-50,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,89,94,-29,-30,-31,-19,]),'IN':([38,],[65,]),'RANGE':([65,],[88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt':([2,92,106,],[4,107,114,]),'expression':([2,8,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,67,68,74,82,92,94,104,106,],[6,34,40,44,45,46,47,48,49,50,51,52,53,54,55,57,61,61,71,40,77,90,91,77,99,6,108,61,6,]),'if_assign':([2,92,106,],[13,13,13,]),'condition_list':([12,32,41,42,56,74,],[39,58,70,72,70,70,]),'expr_list':([33,37,104,],[60,64,112,]),'block_format':([39,75,84,87,89,96,101,],[66,95,100,103,105,109,111,]),'func_params':([56,63,],[76,85,]),'range':([65,],[87,]),'block':([92,],[106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dyacc.py',13),
  ('start -> start stmt','start',2,'p_start','dyacc.py',20),
  ('start -> empty','start',1,'p_start','dyacc.py',21),
  ('stmt -> SPLIT','stmt',1,'p_stmt_none','dyacc.py',29),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_expr','dyacc.py',33),
  ('stmt -> VAR ASSIGN LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params','dyacc.py',39),
  ('stmt -> FUNC VAR LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params_func','dyacc.py',48),
  ('stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params','dyacc.py',57),
  ('stmt -> FUNC VAR LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params_func','dyacc.py',66),
  ('func_params -> VAR','func_params',1,'p_func_params_list','dyacc.py',75),
  ('func_params -> func_params COMMA VAR','func_params',3,'p_func_params_list','dyacc.py',76),
  ('stmt -> VAR LPAREN RPAREN SPLIT','stmt',4,'p_stmt_func_exe_non_params','dyacc.py',85),
  ('stmt -> VAR LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_func_exe_params','dyacc.py',91),
  ('stmt -> PRINT LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_print','dyacc.py',98),
  ('stmt -> FOR VAR IN range block_format','stmt',5,'p_stmt_for','dyacc.py',105),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dyacc.py',113),
  ('stmt -> IF condition_list block_format','stmt',3,'p_stmt_if_block','dyacc.py',120),
  ('stmt -> IF condition_list block_format ELSE block_format','stmt',5,'p_stmt_if_block','dyacc.py',121),
  ('block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT','block_format',5,'p_block_format','dyacc.py',132),
  ('block -> stmt','block',1,'p_block','dyacc.py',137),
  ('block -> block stmt','block',2,'p_block','dyacc.py',138),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_assign','dyacc.py',150),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_assign','dyacc.py',151),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_triple_assign','dyacc.py',158),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dyacc.py',167),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dyacc.py',178),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dyacc.py',179),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dyacc.py',190),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dyacc.py',191),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dyacc.py',192),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dyacc.py',203),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dyacc.py',210),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dyacc.py',211),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dyacc.py',212),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dyacc.py',213),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dyacc.py',214),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dyacc.py',215),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dyacc.py',216),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dyacc.py',217),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dyacc.py',218),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dyacc.py',219),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dyacc.py',220),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dyacc.py',221),
  ('expression -> REM NUMBER','expression',2,'p_negative_number','dyacc.py',227),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dyacc.py',232),
  ('expression -> TRUE','expression',1,'p_expression_true','dyacc.py',238),
  ('expression -> FALSE','expression',1,'p_expression_false','dyacc.py',243),
  ('expression -> NUMBER','expression',1,'p_expression_num','dyacc.py',248),
  ('expression -> STRING','expression',1,'p_expression_string','dyacc.py',253),
  ('expression -> VAR','expression',1,'p_expression_var','dyacc.py',258),
  ('empty -> <empty>','empty',0,'p_empty','dyacc.py',270),
]
