
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COMMA DIV ELSE END_BLOCK EQ FALSE FLOAT FOR FUNC GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RETURN RPAREN SPLIT START_BLOCK STRING TRUE VARentry : start\n    start : start stmt\n          | empty\n    stmt : SPLITstmt : expression SPLIT\n    stmt : VAR ASSIGN LPAREN RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN RPAREN block_format\n    \n    stmt : VAR ASSIGN LPAREN func_params RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN func_params RPAREN block_format\n    \n    func_params : VAR\n                | func_params COMMA VAR\n    \n    expression : VAR LPAREN RPAREN\n    \n    expression : VAR LPAREN expr_list RPAREN\n    \n    stmt : RETURN expression SPLIT\n    \n    stmt : PRINT LPAREN expr_list RPAREN SPLIT\n    stmt : FOR VAR IN range block_formatrange : RANGE LPAREN expr_list RPAREN\n    stmt : IF condition_list block_format\n         | IF condition_list block_format ELSE block_format\n    \n    block_format : START_BLOCK SPLIT block END_BLOCK SPLIT\n    \n    block : stmt\n          | block stmt\n    \n    stmt : VAR ASSIGN expression SPLIT\n         | VAR ASSIGN condition_list SPLIT\n    stmt : if_assign IF condition_list ELSE expression SPLITif_assign : VAR ASSIGN expression\n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : REM NUMBERexpression : LPAREN expression RPARENexpression : TRUEexpression : FALSEexpression : NUMBERexpression : FLOATexpression : STRINGexpression : VARempty :'
    
_lr_action_items = {'SPLIT':([0,2,3,4,5,6,7,16,17,18,19,20,21,37,39,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,65,67,70,73,82,83,84,89,93,94,95,96,98,102,104,105,107,108,109,110,111,113,115,116,117,119,],[-53,5,-3,-2,-4,21,-52,-49,-47,-48,-50,-51,-5,-52,67,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,82,83,-12,-46,-14,-18,95,-23,-24,-13,104,-30,-31,5,-32,-6,-7,-15,-16,-19,5,-21,117,-8,-9,119,-22,-25,-20,]),'VAR':([0,2,3,4,5,8,9,10,12,13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,66,67,70,71,72,78,82,83,85,95,97,98,100,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,7,-3,-2,-4,37,38,37,41,37,-5,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,77,86,-14,-18,37,37,37,-23,-24,37,7,37,-6,112,-7,-15,-16,37,-19,7,-21,-8,-9,-22,-25,-20,]),'FUNC':([0,2,3,4,5,21,67,70,82,83,95,98,102,104,105,107,108,109,111,113,116,117,119,],[-53,9,-3,-2,-4,-5,-14,-18,-23,-24,9,-6,-7,-15,-16,-19,9,-21,-8,-9,-22,-25,-20,]),'RETURN':([0,2,3,4,5,21,67,70,82,83,95,98,102,104,105,107,108,109,111,113,116,117,119,],[-53,10,-3,-2,-4,-5,-14,-18,-23,-24,10,-6,-7,-15,-16,-19,10,-21,-8,-9,-22,-25,-20,]),'PRINT':([0,2,3,4,5,21,67,70,82,83,95,98,102,104,105,107,108,109,111,113,116,117,119,],[-53,11,-3,-2,-4,-5,-14,-18,-23,-24,11,-6,-7,-15,-16,-19,11,-21,-8,-9,-22,-25,-20,]),'FOR':([0,2,3,4,5,21,67,70,82,83,95,98,102,104,105,107,108,109,111,113,116,117,119,],[-53,12,-3,-2,-4,-5,-14,-18,-23,-24,12,-6,-7,-15,-16,-19,12,-21,-8,-9,-22,-25,-20,]),'IF':([0,2,3,4,5,14,16,17,18,19,20,21,37,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,67,70,82,83,84,95,98,102,104,105,107,108,109,111,113,116,117,119,],[-53,13,-3,-2,-4,45,-49,-47,-48,-50,-51,-5,-52,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-26,-12,-46,-14,-18,-23,-24,-13,13,-6,-7,-15,-16,-19,13,-21,-8,-9,-22,-25,-20,]),'REM':([0,2,3,4,5,6,7,8,10,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,65,67,70,71,72,75,77,78,81,82,83,84,85,93,94,95,97,98,101,102,104,105,106,107,108,109,110,111,113,116,117,119,],[-53,15,-3,-2,-4,23,-52,15,15,15,-49,-47,-48,-50,-51,-5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,23,-52,23,15,23,15,15,-45,-33,-34,-35,-36,-37,23,23,23,23,23,23,-44,15,23,-12,23,-46,-14,-18,15,15,23,-52,15,23,-23,-24,-13,15,23,23,15,15,-6,23,-7,-15,-16,15,-19,15,-21,23,-8,-9,-22,-25,-20,]),'LPAREN':([0,2,3,4,5,7,8,10,11,13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,40,44,45,59,67,70,71,72,77,78,82,83,85,91,95,97,98,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,8,-3,-2,-4,35,8,8,40,44,-5,8,8,8,8,8,8,8,8,8,8,8,8,59,8,35,66,8,44,44,78,-14,-18,8,8,35,78,-23,-24,8,106,8,8,-6,-7,-15,-16,8,-19,8,-21,-8,-9,-22,-25,-20,]),'TRUE':([0,2,3,4,5,8,10,13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,67,70,71,72,78,82,83,85,95,97,98,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,17,-3,-2,-4,17,17,17,-5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-14,-18,17,17,17,-23,-24,17,17,17,-6,-7,-15,-16,17,-19,17,-21,-8,-9,-22,-25,-20,]),'FALSE':([0,2,3,4,5,8,10,13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,67,70,71,72,78,82,83,85,95,97,98,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,18,-3,-2,-4,18,18,18,-5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-14,-18,18,18,18,-23,-24,18,18,18,-6,-7,-15,-16,18,-19,18,-21,-8,-9,-22,-25,-20,]),'NUMBER':([0,2,3,4,5,8,10,13,15,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,67,70,71,72,78,82,83,85,95,97,98,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,16,-3,-2,-4,16,16,16,46,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-14,-18,16,16,16,-23,-24,16,16,16,-6,-7,-15,-16,16,-19,16,-21,-8,-9,-22,-25,-20,]),'FLOAT':([0,2,3,4,5,8,10,13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,67,70,71,72,78,82,83,85,95,97,98,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,19,-3,-2,-4,19,19,19,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-14,-18,19,19,19,-23,-24,19,19,19,-6,-7,-15,-16,19,-19,19,-21,-8,-9,-22,-25,-20,]),'STRING':([0,2,3,4,5,8,10,13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,67,70,71,72,78,82,83,85,95,97,98,102,104,105,106,107,108,109,111,113,116,117,119,],[-53,20,-3,-2,-4,20,20,20,-5,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-14,-18,20,20,20,-23,-24,20,20,20,-6,-7,-15,-16,20,-19,20,-21,-8,-9,-22,-25,-20,]),'$end':([0,1,2,3,4,5,21,67,70,82,83,98,102,104,105,107,111,113,117,119,],[-53,0,-1,-3,-2,-4,-5,-14,-18,-23,-24,-6,-7,-15,-16,-19,-8,-9,-25,-20,]),'END_BLOCK':([5,21,67,70,82,83,98,102,104,105,107,108,109,111,113,116,117,119,],[-4,-5,-14,-18,-23,-24,-6,-7,-15,-16,-19,115,-21,-8,-9,-22,-25,-20,]),'ADD':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[22,-52,-49,-47,-48,-50,-51,22,-52,22,22,-45,-33,-34,-35,-36,-37,22,22,22,22,22,22,-44,22,-12,22,-46,22,-52,22,-13,22,22,22,22,]),'MUL':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[24,-52,-49,-47,-48,-50,-51,24,-52,24,24,-45,24,24,-35,-36,-37,24,24,24,24,24,24,-44,24,-12,24,-46,24,-52,24,-13,24,24,24,24,]),'DIV':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[25,-52,-49,-47,-48,-50,-51,25,-52,25,25,-45,25,25,-35,-36,-37,25,25,25,25,25,25,-44,25,-12,25,-46,25,-52,25,-13,25,25,25,25,]),'MOD':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[26,-52,-49,-47,-48,-50,-51,26,-52,26,26,-45,26,26,-35,-36,-37,26,26,26,26,26,26,-44,26,-12,26,-46,26,-52,26,-13,26,26,26,26,]),'GT':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[27,-52,-49,-47,-48,-50,-51,27,-52,27,27,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,27,-12,27,-46,27,-52,27,-13,27,27,27,27,]),'LT':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[28,-52,-49,-47,-48,-50,-51,28,-52,28,28,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,28,-12,28,-46,28,-52,28,-13,28,28,28,28,]),'GE':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[29,-52,-49,-47,-48,-50,-51,29,-52,29,29,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,29,-12,29,-46,29,-52,29,-13,29,29,29,29,]),'LE':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[30,-52,-49,-47,-48,-50,-51,30,-52,30,30,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,30,-12,30,-46,30,-52,30,-13,30,30,30,30,]),'EQ':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[31,-52,-49,-47,-48,-50,-51,31,-52,31,31,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,31,-12,31,-46,31,-52,31,-13,31,31,31,31,]),'NE':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[32,-52,-49,-47,-48,-50,-51,32,-52,32,32,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,32,-12,32,-46,32,-52,32,-13,32,32,32,32,]),'POW':([6,7,16,17,18,19,20,36,37,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,75,77,81,84,93,94,101,110,],[33,-52,-49,-47,-48,-50,-51,33,-52,33,33,-45,33,33,33,33,33,33,33,33,33,33,33,-44,33,-12,33,-46,33,-52,33,-13,33,33,33,33,]),'ASSIGN':([7,],[34,]),'RPAREN':([16,17,18,19,20,35,36,37,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,66,68,74,75,77,80,81,84,86,88,93,94,96,101,112,114,],[-49,-47,-48,-50,-51,62,65,-52,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,79,-12,84,-27,-46,87,89,96,65,-10,99,65,-13,-10,103,-30,-31,-32,-28,-11,118,]),'AND':([16,17,18,19,20,37,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,65,74,75,76,77,81,84,93,94,96,],[-49,-47,-48,-50,-51,-52,71,-29,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-29,71,-12,-46,71,-29,71,-52,-29,-13,-30,-31,-32,]),'OR':([16,17,18,19,20,37,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,65,74,75,76,77,81,84,93,94,96,],[-49,-47,-48,-50,-51,-52,72,-29,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-29,72,-12,-46,72,-29,72,-52,-29,-13,-30,-31,-32,]),'START_BLOCK':([16,17,18,19,20,37,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,62,65,79,84,87,90,92,93,94,96,99,103,118,],[-49,-47,-48,-50,-51,-52,73,-29,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-12,-46,73,-13,73,73,73,-30,-31,-32,73,73,-17,]),'COMMA':([16,17,18,19,20,37,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,64,65,68,77,80,84,86,88,101,112,114,],[-49,-47,-48,-50,-51,-52,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-12,85,-27,-46,85,-10,100,-13,-10,100,-28,-11,85,]),'ELSE':([16,17,18,19,20,37,43,46,47,48,49,50,51,52,53,54,55,56,57,58,62,65,70,76,84,93,94,96,119,],[-49,-47,-48,-50,-51,-52,-29,-45,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-12,-46,92,97,-13,-30,-31,-32,-20,]),'IN':([41,],[69,]),'RANGE':([69,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt':([2,95,108,],[4,109,116,]),'expression':([2,8,10,13,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,45,59,71,72,78,85,95,97,106,108,],[6,36,39,43,47,48,49,50,51,52,53,54,55,56,57,58,60,64,64,75,43,81,93,94,81,101,6,110,64,6,]),'if_assign':([2,95,108,],[14,14,14,]),'condition_list':([13,34,44,45,59,78,],[42,61,74,76,74,74,]),'expr_list':([35,40,106,],[63,68,114,]),'block_format':([42,79,87,90,92,99,103,],[70,98,102,105,107,111,113,]),'func_params':([59,66,],[80,88,]),'range':([69,],[90,]),'block':([95,],[108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dyacc.py',13),
  ('start -> start stmt','start',2,'p_start','dyacc.py',20),
  ('start -> empty','start',1,'p_start','dyacc.py',21),
  ('stmt -> SPLIT','stmt',1,'p_stmt_none','dyacc.py',29),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_expr','dyacc.py',33),
  ('stmt -> VAR ASSIGN LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params','dyacc.py',39),
  ('stmt -> FUNC VAR LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params_func','dyacc.py',48),
  ('stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params','dyacc.py',57),
  ('stmt -> FUNC VAR LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params_func','dyacc.py',66),
  ('func_params -> VAR','func_params',1,'p_func_params_list','dyacc.py',75),
  ('func_params -> func_params COMMA VAR','func_params',3,'p_func_params_list','dyacc.py',76),
  ('expression -> VAR LPAREN RPAREN','expression',3,'p_stmt_func_exe_non_params','dyacc.py',85),
  ('expression -> VAR LPAREN expr_list RPAREN','expression',4,'p_stmt_func_exe_params','dyacc.py',91),
  ('stmt -> RETURN expression SPLIT','stmt',3,'p_stmt_func_return','dyacc.py',97),
  ('stmt -> PRINT LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_print','dyacc.py',104),
  ('stmt -> FOR VAR IN range block_format','stmt',5,'p_stmt_for','dyacc.py',111),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dyacc.py',119),
  ('stmt -> IF condition_list block_format','stmt',3,'p_stmt_if_block','dyacc.py',126),
  ('stmt -> IF condition_list block_format ELSE block_format','stmt',5,'p_stmt_if_block','dyacc.py',127),
  ('block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT','block_format',5,'p_block_format','dyacc.py',138),
  ('block -> stmt','block',1,'p_block','dyacc.py',144),
  ('block -> block stmt','block',2,'p_block','dyacc.py',145),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_assign','dyacc.py',157),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_assign','dyacc.py',158),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_triple_assign','dyacc.py',165),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dyacc.py',174),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dyacc.py',185),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dyacc.py',186),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dyacc.py',197),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dyacc.py',198),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dyacc.py',199),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dyacc.py',210),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dyacc.py',217),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dyacc.py',218),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dyacc.py',219),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dyacc.py',220),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dyacc.py',221),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dyacc.py',222),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dyacc.py',223),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dyacc.py',224),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dyacc.py',225),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dyacc.py',226),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dyacc.py',227),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dyacc.py',228),
  ('expression -> REM NUMBER','expression',2,'p_negative_number','dyacc.py',234),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dyacc.py',239),
  ('expression -> TRUE','expression',1,'p_expression_true','dyacc.py',245),
  ('expression -> FALSE','expression',1,'p_expression_false','dyacc.py',250),
  ('expression -> NUMBER','expression',1,'p_expression_num','dyacc.py',255),
  ('expression -> FLOAT','expression',1,'p_expression_float','dyacc.py',260),
  ('expression -> STRING','expression',1,'p_expression_string','dyacc.py',265),
  ('expression -> VAR','expression',1,'p_expression_var','dyacc.py',270),
  ('empty -> <empty>','empty',0,'p_empty','dyacc.py',282),
]
