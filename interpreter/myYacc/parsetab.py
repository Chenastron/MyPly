
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COMMA DIV ELSE END_BLOCK EQ FALSE FLOAT FOR FUNC GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RPAREN SPLIT START_BLOCK STRING TRUE VARentry : start\n    start : start stmt\n          | empty\n    stmt : SPLITstmt : expression SPLIT\n    stmt : VAR ASSIGN LPAREN RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN RPAREN block_format\n    \n    stmt : VAR ASSIGN LPAREN func_params RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN func_params RPAREN block_format\n    \n    func_params : VAR\n                | func_params COMMA VAR\n    \n    stmt : VAR LPAREN RPAREN SPLIT\n    \n    stmt : VAR LPAREN expr_list RPAREN SPLIT\n    \n    stmt : PRINT LPAREN expr_list RPAREN SPLIT\n    stmt : FOR VAR IN range block_formatrange : RANGE LPAREN expr_list RPAREN\n    stmt : IF condition_list block_format\n         | IF condition_list block_format ELSE block_format\n    \n    block_format : START_BLOCK SPLIT block END_BLOCK SPLIT\n    \n    block : stmt\n          | block stmt\n    \n    stmt : VAR ASSIGN expression SPLIT\n         | VAR ASSIGN condition_list SPLIT\n    stmt : if_assign IF condition_list ELSE expression SPLITif_assign : VAR ASSIGN expression\n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : REM NUMBERexpression : LPAREN expression RPARENexpression : TRUEexpression : FALSEexpression : NUMBERexpression : FLOATexpression : STRINGexpression : VARempty :'
    
_lr_action_items = {'SPLIT':([0,2,3,4,5,6,7,15,16,17,18,19,20,36,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,63,67,70,79,80,81,82,87,91,92,93,94,96,99,101,103,104,106,107,108,109,110,112,114,115,116,118,],[-52,5,-3,-2,-4,20,-51,-48,-46,-47,-49,-50,-5,-51,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,79,80,81,-45,-17,93,-22,-23,-12,99,103,-29,-30,5,-31,-6,-13,-7,-14,-15,-18,5,-20,116,-8,-9,118,-21,-24,-19,]),'VAR':([0,2,3,4,5,8,9,11,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,64,67,68,69,75,79,80,81,83,93,95,96,98,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,7,-3,-2,-4,36,37,39,36,-5,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,74,84,-17,36,36,36,-22,-23,-12,36,7,36,-6,111,-13,-7,-14,-15,36,-18,7,-20,-8,-9,-21,-24,-19,]),'FUNC':([0,2,3,4,5,20,67,79,80,81,93,96,99,101,103,104,106,107,108,110,112,115,116,118,],[-52,9,-3,-2,-4,-5,-17,-22,-23,-12,9,-6,-13,-7,-14,-15,-18,9,-20,-8,-9,-21,-24,-19,]),'PRINT':([0,2,3,4,5,20,67,79,80,81,93,96,99,101,103,104,106,107,108,110,112,115,116,118,],[-52,10,-3,-2,-4,-5,-17,-22,-23,-12,10,-6,-13,-7,-14,-15,-18,10,-20,-8,-9,-21,-24,-19,]),'FOR':([0,2,3,4,5,20,67,79,80,81,93,96,99,101,103,104,106,107,108,110,112,115,116,118,],[-52,11,-3,-2,-4,-5,-17,-22,-23,-12,11,-6,-13,-7,-14,-15,-18,11,-20,-8,-9,-21,-24,-19,]),'IF':([0,2,3,4,5,13,15,16,17,18,19,20,36,44,45,46,47,48,49,50,51,52,53,54,55,56,58,63,67,79,80,81,93,96,99,101,103,104,106,107,108,110,112,115,116,118,],[-52,12,-3,-2,-4,43,-48,-46,-47,-49,-50,-5,-51,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-25,-45,-17,-22,-23,-12,12,-6,-13,-7,-14,-15,-18,12,-20,-8,-9,-21,-24,-19,]),'REM':([0,2,3,4,5,6,7,8,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,67,68,69,72,74,75,78,79,80,81,83,91,92,93,95,96,99,100,101,103,104,105,106,107,108,109,110,112,115,116,118,],[-52,14,-3,-2,-4,22,-51,14,14,-48,-46,-47,-49,-50,-5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,22,-51,14,22,14,14,-44,-32,-33,-34,-35,-36,22,22,22,22,22,22,-43,14,22,22,-45,-17,14,14,22,-51,14,22,-22,-23,-12,14,22,22,14,14,-6,-13,22,-7,-14,-15,14,-18,14,-20,22,-8,-9,-21,-24,-19,]),'LPAREN':([0,2,3,4,5,7,8,10,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,42,43,57,67,68,69,75,79,80,81,83,89,93,95,96,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,8,-3,-2,-4,34,8,38,42,-5,8,8,8,8,8,8,8,8,8,8,8,8,57,8,64,8,42,42,75,-17,8,8,75,-22,-23,-12,8,105,8,8,-6,-13,-7,-14,-15,8,-18,8,-20,-8,-9,-21,-24,-19,]),'TRUE':([0,2,3,4,5,8,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,67,68,69,75,79,80,81,83,93,95,96,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,16,-3,-2,-4,16,16,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-17,16,16,16,-22,-23,-12,16,16,16,-6,-13,-7,-14,-15,16,-18,16,-20,-8,-9,-21,-24,-19,]),'FALSE':([0,2,3,4,5,8,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,67,68,69,75,79,80,81,83,93,95,96,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,17,-3,-2,-4,17,17,-5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-17,17,17,17,-22,-23,-12,17,17,17,-6,-13,-7,-14,-15,17,-18,17,-20,-8,-9,-21,-24,-19,]),'NUMBER':([0,2,3,4,5,8,12,14,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,67,68,69,75,79,80,81,83,93,95,96,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,15,-3,-2,-4,15,15,44,-5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-17,15,15,15,-22,-23,-12,15,15,15,-6,-13,-7,-14,-15,15,-18,15,-20,-8,-9,-21,-24,-19,]),'FLOAT':([0,2,3,4,5,8,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,67,68,69,75,79,80,81,83,93,95,96,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,18,-3,-2,-4,18,18,-5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-17,18,18,18,-22,-23,-12,18,18,18,-6,-13,-7,-14,-15,18,-18,18,-20,-8,-9,-21,-24,-19,]),'STRING':([0,2,3,4,5,8,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,67,68,69,75,79,80,81,83,93,95,96,99,101,103,104,105,106,107,108,110,112,115,116,118,],[-52,19,-3,-2,-4,19,19,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-17,19,19,19,-22,-23,-12,19,19,19,-6,-13,-7,-14,-15,19,-18,19,-20,-8,-9,-21,-24,-19,]),'$end':([0,1,2,3,4,5,20,67,79,80,81,96,99,101,103,104,106,110,112,116,118,],[-52,0,-1,-3,-2,-4,-5,-17,-22,-23,-12,-6,-13,-7,-14,-15,-18,-8,-9,-24,-19,]),'END_BLOCK':([5,20,67,79,80,81,96,99,101,103,104,106,107,108,110,112,115,116,118,],[-4,-5,-17,-22,-23,-12,-6,-13,-7,-14,-15,-18,114,-20,-8,-9,-21,-24,-19,]),'ADD':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[21,-51,-48,-46,-47,-49,-50,21,-51,21,-44,-32,-33,-34,-35,-36,21,21,21,21,21,21,-43,21,21,-45,21,-51,21,21,21,21,21,]),'MUL':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[23,-51,-48,-46,-47,-49,-50,23,-51,23,-44,23,23,-34,-35,-36,23,23,23,23,23,23,-43,23,23,-45,23,-51,23,23,23,23,23,]),'DIV':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[24,-51,-48,-46,-47,-49,-50,24,-51,24,-44,24,24,-34,-35,-36,24,24,24,24,24,24,-43,24,24,-45,24,-51,24,24,24,24,24,]),'MOD':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[25,-51,-48,-46,-47,-49,-50,25,-51,25,-44,25,25,-34,-35,-36,25,25,25,25,25,25,-43,25,25,-45,25,-51,25,25,25,25,25,]),'GT':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[26,-51,-48,-46,-47,-49,-50,26,-51,26,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,26,26,-45,26,-51,26,26,26,26,26,]),'LT':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[27,-51,-48,-46,-47,-49,-50,27,-51,27,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,27,27,-45,27,-51,27,27,27,27,27,]),'GE':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[28,-51,-48,-46,-47,-49,-50,28,-51,28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,28,28,-45,28,-51,28,28,28,28,28,]),'LE':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[29,-51,-48,-46,-47,-49,-50,29,-51,29,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,29,29,-45,29,-51,29,29,29,29,29,]),'EQ':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[30,-51,-48,-46,-47,-49,-50,30,-51,30,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,30,30,-45,30,-51,30,30,30,30,30,]),'NE':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[31,-51,-48,-46,-47,-49,-50,31,-51,31,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,31,31,-45,31,-51,31,31,31,31,31,]),'POW':([6,7,15,16,17,18,19,35,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,72,74,78,91,92,100,109,],[32,-51,-48,-46,-47,-49,-50,32,-51,32,-44,32,32,32,32,32,32,32,32,32,32,32,-43,32,32,-45,32,-51,32,32,32,32,32,]),'ASSIGN':([7,],[33,]),'RPAREN':([15,16,17,18,19,34,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,62,63,64,65,71,72,74,77,78,84,86,91,92,94,100,111,113,],[-48,-46,-47,-49,-50,60,63,-51,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,76,82,-26,-45,85,87,94,63,-10,97,63,-10,102,-29,-30,-31,-27,-11,117,]),'AND':([15,16,17,18,19,36,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,63,71,72,73,74,78,91,92,94,],[-48,-46,-47,-49,-50,-51,68,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-28,68,-45,68,-28,68,-51,-28,-29,-30,-31,]),'OR':([15,16,17,18,19,36,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,63,71,72,73,74,78,91,92,94,],[-48,-46,-47,-49,-50,-51,69,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-28,69,-45,69,-28,69,-51,-28,-29,-30,-31,]),'START_BLOCK':([15,16,17,18,19,36,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,63,76,85,88,90,91,92,94,97,102,117,],[-48,-46,-47,-49,-50,-51,70,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,70,70,70,70,-29,-30,-31,70,70,-16,]),'COMMA':([15,16,17,18,19,36,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,65,74,77,84,86,100,111,113,],[-48,-46,-47,-49,-50,-51,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,83,-26,-45,83,-10,98,-10,98,-27,-11,83,]),'ELSE':([15,16,17,18,19,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,63,67,73,91,92,94,118,],[-48,-46,-47,-49,-50,-51,-28,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,90,95,-29,-30,-31,-19,]),'IN':([39,],[66,]),'RANGE':([66,],[89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt':([2,93,107,],[4,108,115,]),'expression':([2,8,12,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,42,43,57,68,69,75,83,93,95,105,107,],[6,35,41,45,46,47,48,49,50,51,52,53,54,55,56,58,62,62,72,41,78,91,92,78,100,6,109,62,6,]),'if_assign':([2,93,107,],[13,13,13,]),'condition_list':([12,33,42,43,57,75,],[40,59,71,73,71,71,]),'expr_list':([34,38,105,],[61,65,113,]),'block_format':([40,76,85,88,90,97,102,],[67,96,101,104,106,110,112,]),'func_params':([57,64,],[77,86,]),'range':([66,],[88,]),'block':([93,],[107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dyacc.py',13),
  ('start -> start stmt','start',2,'p_start','dyacc.py',20),
  ('start -> empty','start',1,'p_start','dyacc.py',21),
  ('stmt -> SPLIT','stmt',1,'p_stmt_none','dyacc.py',29),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_expr','dyacc.py',33),
  ('stmt -> VAR ASSIGN LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params','dyacc.py',39),
  ('stmt -> FUNC VAR LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params_func','dyacc.py',48),
  ('stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params','dyacc.py',57),
  ('stmt -> FUNC VAR LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params_func','dyacc.py',66),
  ('func_params -> VAR','func_params',1,'p_func_params_list','dyacc.py',75),
  ('func_params -> func_params COMMA VAR','func_params',3,'p_func_params_list','dyacc.py',76),
  ('stmt -> VAR LPAREN RPAREN SPLIT','stmt',4,'p_stmt_func_exe_non_params','dyacc.py',85),
  ('stmt -> VAR LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_func_exe_params','dyacc.py',91),
  ('stmt -> PRINT LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_print','dyacc.py',98),
  ('stmt -> FOR VAR IN range block_format','stmt',5,'p_stmt_for','dyacc.py',105),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dyacc.py',113),
  ('stmt -> IF condition_list block_format','stmt',3,'p_stmt_if_block','dyacc.py',120),
  ('stmt -> IF condition_list block_format ELSE block_format','stmt',5,'p_stmt_if_block','dyacc.py',121),
  ('block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT','block_format',5,'p_block_format','dyacc.py',132),
  ('block -> stmt','block',1,'p_block','dyacc.py',138),
  ('block -> block stmt','block',2,'p_block','dyacc.py',139),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_assign','dyacc.py',151),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_assign','dyacc.py',152),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_triple_assign','dyacc.py',159),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dyacc.py',168),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dyacc.py',179),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dyacc.py',180),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dyacc.py',191),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dyacc.py',192),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dyacc.py',193),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dyacc.py',204),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dyacc.py',211),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dyacc.py',212),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dyacc.py',213),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dyacc.py',214),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dyacc.py',215),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dyacc.py',216),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dyacc.py',217),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dyacc.py',218),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dyacc.py',219),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dyacc.py',220),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dyacc.py',221),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dyacc.py',222),
  ('expression -> REM NUMBER','expression',2,'p_negative_number','dyacc.py',228),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dyacc.py',233),
  ('expression -> TRUE','expression',1,'p_expression_true','dyacc.py',239),
  ('expression -> FALSE','expression',1,'p_expression_false','dyacc.py',244),
  ('expression -> NUMBER','expression',1,'p_expression_num','dyacc.py',249),
  ('expression -> FLOAT','expression',1,'p_expression_float','dyacc.py',254),
  ('expression -> STRING','expression',1,'p_expression_string','dyacc.py',259),
  ('expression -> VAR','expression',1,'p_expression_var','dyacc.py',264),
  ('empty -> <empty>','empty',0,'p_empty','dyacc.py',276),
]
