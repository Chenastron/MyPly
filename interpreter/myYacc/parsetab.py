
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COLON COMMA DIV ELSE EQ FALSE FOR GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RPAREN SPLIT STRING TRUE VARentry : startexpression : TRUE\n    start : start stmt_print SPLIT\n             | start stmt\n             | empty\n    expression : FALSEexpression : NUMBERexpression : STRINGstmt : SPLITstmt : expression SPLITexpression : VAR\n    stmt_print : PRINT LPAREN expr_list RPAREN\n    range : RANGE LPAREN expr_list RPARENstmt : FOR VAR IN range COLON stmt_print SPLITstmt : stmt_print IF condition_list ELSE stmt_print SPLITif_assign : VAR ASSIGN expressionstmt : if_assign IF condition_list ELSE expression SPLIT\n    stmt : IF condition_list COLON stmt_print SPLIT\n                   | IF condition_list COLON SPLIT stmt_print SPLIT\n    \n    stmt : VAR ASSIGN expression SPLIT\n                   | VAR ASSIGN condition_list SPLIT\n    \n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : LPAREN expression RPARENempty :'
    
_lr_action_items = {'PRINT':([0,2,3,5,6,18,23,62,68,73,74,77,84,86,89,92,93,94,],[-41,7,-5,-9,-4,-3,-10,7,7,-20,-21,7,7,-18,-15,-19,-17,-14,]),'SPLIT':([0,2,3,4,5,6,9,11,14,15,16,17,18,22,23,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,69,73,74,76,78,79,80,82,86,87,88,89,90,92,93,94,],[-41,5,-5,18,-9,-4,23,-11,-2,-6,-7,-8,-3,-11,-10,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,73,74,77,-12,-20,-21,86,-25,-26,-27,89,-18,92,93,-15,94,-19,-17,-14,]),'FOR':([0,2,3,5,6,18,23,73,74,86,89,92,93,94,],[-41,10,-5,-9,-4,-3,-10,-20,-21,-18,-15,-19,-17,-14,]),'IF':([0,2,3,4,5,6,13,14,15,16,17,18,22,23,45,46,47,48,49,50,51,52,53,54,55,56,57,59,69,73,74,86,89,92,93,94,],[-41,12,-5,19,-9,-4,41,-2,-6,-7,-8,-3,-11,-10,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-16,-12,-20,-21,-18,-15,-19,-17,-14,]),'VAR':([0,2,3,5,6,8,10,12,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,73,74,81,85,86,89,92,93,94,],[-41,11,-5,-9,-4,22,36,22,-3,22,22,-10,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-20,-21,22,22,-18,-15,-19,-17,-14,]),'TRUE':([0,2,3,5,6,8,12,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,73,74,81,85,86,89,92,93,94,],[-41,14,-5,-9,-4,14,14,-3,14,14,-10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-20,-21,14,14,-18,-15,-19,-17,-14,]),'FALSE':([0,2,3,5,6,8,12,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,73,74,81,85,86,89,92,93,94,],[-41,15,-5,-9,-4,15,15,-3,15,15,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-20,-21,15,15,-18,-15,-19,-17,-14,]),'NUMBER':([0,2,3,5,6,8,12,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,73,74,81,85,86,89,92,93,94,],[-41,16,-5,-9,-4,16,16,-3,16,16,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-20,-21,16,16,-18,-15,-19,-17,-14,]),'STRING':([0,2,3,5,6,8,12,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,73,74,81,85,86,89,92,93,94,],[-41,17,-5,-9,-4,17,17,-3,17,17,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-20,-21,17,17,-18,-15,-19,-17,-14,]),'LPAREN':([0,2,3,5,6,7,8,12,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,72,73,74,81,85,86,89,92,93,94,],[-41,8,-5,-9,-4,20,8,40,-3,40,8,-10,8,8,8,8,8,8,8,8,8,8,8,8,61,40,40,61,8,8,8,85,-20,-21,8,8,-18,-15,-19,-17,-14,]),'$end':([0,1,2,3,5,6,18,23,73,74,86,89,92,93,94,],[-41,0,-1,-5,-9,-4,-3,-10,-20,-21,-18,-15,-19,-17,-14,]),'ADD':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[24,-11,-2,-6,-7,-8,24,-11,24,24,-40,-28,-29,-30,-31,-32,24,24,24,24,24,24,-39,24,24,24,24,24,24,24,]),'REM':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[25,-11,-2,-6,-7,-8,25,-11,25,25,-40,-28,-29,-30,-31,-32,25,25,25,25,25,25,-39,25,25,25,25,25,25,25,]),'MUL':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[26,-11,-2,-6,-7,-8,26,-11,26,26,-40,26,26,-30,-31,-32,26,26,26,26,26,26,-39,26,26,26,26,26,26,26,]),'DIV':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[27,-11,-2,-6,-7,-8,27,-11,27,27,-40,27,27,-30,-31,-32,27,27,27,27,27,27,-39,27,27,27,27,27,27,27,]),'MOD':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[28,-11,-2,-6,-7,-8,28,-11,28,28,-40,28,28,-30,-31,-32,28,28,28,28,28,28,-39,28,28,28,28,28,28,28,]),'GT':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[29,-11,-2,-6,-7,-8,29,-11,29,29,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,29,29,29,29,29,29,29,]),'LT':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[30,-11,-2,-6,-7,-8,30,-11,30,30,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,30,30,30,30,30,30,30,]),'GE':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[31,-11,-2,-6,-7,-8,31,-11,31,31,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,31,31,31,31,31,31,31,]),'LE':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[32,-11,-2,-6,-7,-8,32,-11,32,32,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,32,32,32,32,32,32,32,]),'EQ':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[33,-11,-2,-6,-7,-8,33,-11,33,33,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,33,33,33,33,33,33,33,]),'NE':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[34,-11,-2,-6,-7,-8,34,-11,34,34,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,34,34,34,34,34,34,34,]),'POW':([9,11,14,15,16,17,21,22,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,66,75,78,79,83,88,],[35,-11,-2,-6,-7,-8,35,-11,35,35,-40,35,35,35,35,35,35,35,35,35,35,35,-39,35,35,35,35,35,35,35,]),'ASSIGN':([11,],[37,]),'RPAREN':([14,15,16,17,21,22,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,65,66,75,78,79,80,83,91,],[-2,-6,-7,-8,45,-11,69,-22,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,80,45,45,-25,-26,-27,-23,95,]),'COLON':([14,15,16,17,22,38,39,45,46,47,48,49,50,51,52,53,54,55,56,57,71,78,79,80,95,],[-2,-6,-7,-8,-11,62,-24,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,84,-25,-26,-27,-13,]),'AND':([14,15,16,17,22,38,39,42,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,65,66,67,75,78,79,80,],[-2,-6,-7,-8,-11,63,-24,63,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,63,63,-24,63,-24,-25,-26,-27,]),'OR':([14,15,16,17,22,38,39,42,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,65,66,67,75,78,79,80,],[-2,-6,-7,-8,-11,64,-24,64,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,64,64,-24,64,-24,-25,-26,-27,]),'ELSE':([14,15,16,17,22,39,42,45,46,47,48,49,50,51,52,53,54,55,56,57,67,78,79,80,],[-2,-6,-7,-8,-11,-24,68,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,81,-25,-26,-27,]),'COMMA':([14,15,16,17,22,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,83,91,],[-2,-6,-7,-8,-11,70,-22,-40,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-23,70,]),'IN':([36,],[58,]),'RANGE':([58,],[72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt_print':([2,62,68,77,84,],[4,76,82,87,90,]),'stmt':([2,],[6,]),'expression':([2,8,12,19,20,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,61,63,64,70,81,85,],[9,21,39,39,44,46,47,48,49,50,51,52,53,54,55,56,57,59,66,39,75,78,79,83,88,44,]),'if_assign':([2,],[13,]),'condition_list':([12,19,37,40,41,61,],[38,42,60,65,67,65,]),'expr_list':([20,85,],[43,91,]),'range':([58,],[71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dparser.py',14),
  ('expression -> TRUE','expression',1,'p_expression_true','expressionEndRule.py',14),
  ('start -> start stmt_print SPLIT','start',3,'p_start','dparser.py',20),
  ('start -> start stmt','start',2,'p_start','dparser.py',21),
  ('start -> empty','start',1,'p_start','dparser.py',22),
  ('expression -> FALSE','expression',1,'p_expression_false','expressionEndRule.py',19),
  ('expression -> NUMBER','expression',1,'p_expression_num','expressionEndRule.py',24),
  ('expression -> STRING','expression',1,'p_expression_string','expressionEndRule.py',29),
  ('stmt -> SPLIT','stmt',1,'p_stmt_print_none','dparser.py',30),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_print_expr','dparser.py',34),
  ('expression -> VAR','expression',1,'p_expression_var','expressionEndRule.py',34),
  ('stmt_print -> PRINT LPAREN expr_list RPAREN','stmt_print',4,'p_stmt_print_print','dparser.py',41),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dparser.py',48),
  ('stmt -> FOR VAR IN range COLON stmt_print SPLIT','stmt',7,'p_stmt_print_for','dparser.py',53),
  ('stmt -> stmt_print IF condition_list ELSE stmt_print SPLIT','stmt',6,'p_stmt_print_cond_postfix_else','dparser.py',58),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dparser.py',63),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_print_cond_postfix_assign','dparser.py',68),
  ('stmt -> IF condition_list COLON stmt_print SPLIT','stmt',5,'p_stmt_print_cond','dparser.py',77),
  ('stmt -> IF condition_list COLON SPLIT stmt_print SPLIT','stmt',6,'p_stmt_print_cond','dparser.py',78),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_print_assign','dparser.py',90),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_print_assign','dparser.py',91),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dparser.py',99),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dparser.py',100),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dparser.py',111),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dparser.py',112),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dparser.py',113),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dparser.py',124),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dparser.py',131),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dparser.py',132),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dparser.py',133),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dparser.py',134),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dparser.py',135),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dparser.py',136),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dparser.py',137),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dparser.py',138),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dparser.py',139),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dparser.py',140),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dparser.py',141),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dparser.py',142),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dparser.py',149),
  ('empty -> <empty>','empty',0,'p_empty','dparser.py',162),
]
