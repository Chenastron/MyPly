
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COLON COMMA DIV ELSE END_BLOCK EQ FALSE FOR GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RPAREN SPLIT START_BLOCK STRING TRUE VARentry : startexpression : TRUEexpression : FALSE\n    start : start stmt\n          | empty\n    expression : NUMBERexpression : STRINGstmt : SPLITstmt : expression SPLITexpression : VAR\n    stmt : PRINT LPAREN expr_list RPAREN SPLIT\n    \n    expr_list : expression\n              | expr_list COMMA expression\n    range : RANGE LPAREN expr_list RPARENstmt : FOR VAR IN range COLON stmtstmt : if_assign IF condition_list ELSE expression SPLITif_assign : VAR ASSIGN expression\n    stmt : IF condition_list COLON stmt\n         | IF condition_list COLON SPLIT stmt\n    \n    stmt : IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT\n    \n    block : stmt\n          | block stmt\n    \n    stmt : VAR ASSIGN expression SPLIT\n         | VAR ASSIGN condition_list SPLIT\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : LPAREN expression RPARENempty :'
    
_lr_action_items = {'SPLIT':([0,2,3,4,5,6,10,13,14,15,16,17,32,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,59,60,65,69,70,73,74,75,76,77,78,79,81,83,84,85,86,87,89,90,91,93,],[-42,5,-5,-4,-8,17,-10,-2,-3,-6,-7,-9,-10,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,69,70,74,75,79,-23,-24,-18,5,5,-26,-27,-28,-11,5,89,-19,5,-21,-15,-16,93,-22,-20,]),'PRINT':([0,2,3,4,5,17,59,69,70,73,74,75,79,81,84,85,86,87,89,91,93,],[-42,7,-5,-4,-8,-9,7,-23,-24,-18,7,7,-11,7,-19,7,-21,-15,-16,-22,-20,]),'FOR':([0,2,3,4,5,17,59,69,70,73,74,75,79,81,84,85,86,87,89,91,93,],[-42,9,-5,-4,-8,-9,9,-23,-24,-18,9,9,-11,9,-19,9,-21,-15,-16,-22,-20,]),'IF':([0,2,3,4,5,11,13,14,15,16,17,32,39,40,41,42,43,44,45,46,47,48,49,50,53,55,59,69,70,73,74,75,79,81,84,85,86,87,89,91,93,],[-42,12,-5,-4,-8,35,-2,-3,-6,-7,-9,-10,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-17,12,-23,-24,-18,12,12,-11,12,-19,12,-21,-15,-16,-22,-20,]),'VAR':([0,2,3,4,5,8,9,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,69,70,72,73,74,75,79,81,82,84,85,86,87,89,91,93,],[-42,10,-5,-4,-8,32,33,32,-9,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,-23,-24,32,-18,10,10,-11,10,32,-19,10,-21,-15,-16,-22,-20,]),'TRUE':([0,2,3,4,5,8,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,69,70,72,73,74,75,79,81,82,84,85,86,87,89,91,93,],[-42,13,-5,-4,-8,13,13,-9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-23,-24,13,-18,13,13,-11,13,13,-19,13,-21,-15,-16,-22,-20,]),'FALSE':([0,2,3,4,5,8,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,69,70,72,73,74,75,79,81,82,84,85,86,87,89,91,93,],[-42,14,-5,-4,-8,14,14,-9,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-23,-24,14,-18,14,14,-11,14,14,-19,14,-21,-15,-16,-22,-20,]),'NUMBER':([0,2,3,4,5,8,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,69,70,72,73,74,75,79,81,82,84,85,86,87,89,91,93,],[-42,15,-5,-4,-8,15,15,-9,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-23,-24,15,-18,15,15,-11,15,15,-19,15,-21,-15,-16,-22,-20,]),'STRING':([0,2,3,4,5,8,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,69,70,72,73,74,75,79,81,82,84,85,86,87,89,91,93,],[-42,16,-5,-4,-8,16,16,-9,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-23,-24,16,-18,16,16,-11,16,16,-19,16,-21,-15,-16,-22,-20,]),'LPAREN':([0,2,3,4,5,7,8,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,68,69,70,72,73,74,75,79,81,82,84,85,86,87,89,91,93,],[-42,8,-5,-4,-8,30,8,38,-9,8,8,8,8,8,8,8,8,8,8,8,8,8,57,38,38,57,8,8,8,8,82,-23,-24,8,-18,8,8,-11,8,8,-19,8,-21,-15,-16,-22,-20,]),'$end':([0,1,2,3,4,5,17,69,70,73,74,79,84,87,89,93,],[-42,0,-1,-5,-4,-8,-9,-23,-24,-18,-8,-11,-19,-15,-16,-20,]),'END_BLOCK':([5,17,69,70,73,74,79,84,85,86,87,89,91,93,],[-8,-9,-23,-24,-18,-8,-11,-19,90,-21,-15,-16,-22,-20,]),'ADD':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[18,-10,-2,-3,-6,-7,18,-10,18,-29,-30,-31,-32,-33,18,18,18,18,18,18,-40,18,-41,18,18,18,18,18,18,18,]),'REM':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[19,-10,-2,-3,-6,-7,19,-10,19,-29,-30,-31,-32,-33,19,19,19,19,19,19,-40,19,-41,19,19,19,19,19,19,19,]),'MUL':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[20,-10,-2,-3,-6,-7,20,-10,20,20,20,-31,-32,-33,20,20,20,20,20,20,-40,20,-41,20,20,20,20,20,20,20,]),'DIV':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[21,-10,-2,-3,-6,-7,21,-10,21,21,21,-31,-32,-33,21,21,21,21,21,21,-40,21,-41,21,21,21,21,21,21,21,]),'MOD':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[22,-10,-2,-3,-6,-7,22,-10,22,22,22,-31,-32,-33,22,22,22,22,22,22,-40,22,-41,22,22,22,22,22,22,22,]),'GT':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[23,-10,-2,-3,-6,-7,23,-10,23,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,23,-41,23,23,23,23,23,23,23,]),'LT':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[24,-10,-2,-3,-6,-7,24,-10,24,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,24,-41,24,24,24,24,24,24,24,]),'GE':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[25,-10,-2,-3,-6,-7,25,-10,25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,25,-41,25,25,25,25,25,25,25,]),'LE':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[26,-10,-2,-3,-6,-7,26,-10,26,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,26,-41,26,26,26,26,26,26,26,]),'EQ':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[27,-10,-2,-3,-6,-7,27,-10,27,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,27,-41,27,27,27,27,27,27,27,]),'NE':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[28,-10,-2,-3,-6,-7,28,-10,28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,28,-41,28,28,28,28,28,28,28,]),'POW':([6,10,13,14,15,16,31,32,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,64,71,76,77,80,83,],[29,-10,-2,-3,-6,-7,29,-10,29,29,29,29,29,29,29,29,29,29,29,29,-40,29,-41,29,29,29,29,29,29,29,]),'ASSIGN':([10,],[34,]),'RPAREN':([13,14,15,16,31,32,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,63,64,71,76,77,78,80,88,],[-2,-3,-6,-7,53,-10,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,65,-12,-41,78,53,53,-26,-27,-28,-13,92,]),'COLON':([13,14,15,16,32,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,67,76,77,78,92,],[-2,-3,-6,-7,-10,59,-25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,81,-26,-27,-28,-14,]),'START_BLOCK':([13,14,15,16,32,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,76,77,78,],[-2,-3,-6,-7,-10,60,-25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-26,-27,-28,]),'AND':([13,14,15,16,32,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,63,64,71,76,77,78,],[-2,-3,-6,-7,-10,61,-25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-25,61,61,61,-25,-25,-26,-27,-28,]),'OR':([13,14,15,16,32,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,63,64,71,76,77,78,],[-2,-3,-6,-7,-10,62,-25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-25,62,62,62,-25,-25,-26,-27,-28,]),'COMMA':([13,14,15,16,32,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,80,88,],[-2,-3,-6,-7,-10,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,66,-12,-41,-13,66,]),'ELSE':([13,14,15,16,32,37,39,40,41,42,43,44,45,46,47,48,49,50,53,58,76,77,78,],[-2,-3,-6,-7,-10,-25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,72,-26,-27,-28,]),'IN':([33,],[54,]),'RANGE':([54,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt':([2,59,74,75,81,85,],[4,73,84,86,87,91,]),'expression':([2,8,12,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,38,57,59,61,62,66,72,74,75,81,82,85,],[6,31,37,39,40,41,42,43,44,45,46,47,48,49,50,52,55,37,64,71,6,76,77,80,83,6,6,6,52,6,]),'if_assign':([2,59,74,75,81,85,],[11,11,11,11,11,11,]),'condition_list':([12,34,35,38,57,],[36,56,58,63,63,]),'expr_list':([30,82,],[51,88,]),'range':([54,],[67,]),'block':([75,],[85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dyacc.py',14),
  ('expression -> TRUE','expression',1,'p_expression_true','expressionEndRule.py',14),
  ('expression -> FALSE','expression',1,'p_expression_false','expressionEndRule.py',19),
  ('start -> start stmt','start',2,'p_start','dyacc.py',21),
  ('start -> empty','start',1,'p_start','dyacc.py',22),
  ('expression -> NUMBER','expression',1,'p_expression_num','expressionEndRule.py',24),
  ('expression -> STRING','expression',1,'p_expression_string','expressionEndRule.py',29),
  ('stmt -> SPLIT','stmt',1,'p_stmt_none','dyacc.py',30),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_expr','dyacc.py',34),
  ('expression -> VAR','expression',1,'p_expression_var','expressionEndRule.py',34),
  ('stmt -> PRINT LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_print','dyacc.py',41),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dyacc.py',46),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dyacc.py',47),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dyacc.py',57),
  ('stmt -> FOR VAR IN range COLON stmt','stmt',6,'p_stmt_for','dyacc.py',60),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_triple_assign','dyacc.py',66),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dyacc.py',71),
  ('stmt -> IF condition_list COLON stmt','stmt',4,'p_stmt_cond','dyacc.py',78),
  ('stmt -> IF condition_list COLON SPLIT stmt','stmt',5,'p_stmt_cond','dyacc.py',79),
  ('stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT','stmt',7,'p_stmt_if_block','dyacc.py',91),
  ('block -> stmt','block',1,'p_block','dyacc.py',97),
  ('block -> block stmt','block',2,'p_block','dyacc.py',98),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_assign','dyacc.py',109),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_assign','dyacc.py',110),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dyacc.py',120),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dyacc.py',121),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dyacc.py',122),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dyacc.py',133),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dyacc.py',140),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dyacc.py',141),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dyacc.py',142),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dyacc.py',143),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dyacc.py',144),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dyacc.py',145),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dyacc.py',146),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dyacc.py',147),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dyacc.py',148),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dyacc.py',149),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dyacc.py',150),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dyacc.py',151),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dyacc.py',158),
  ('empty -> <empty>','empty',0,'p_empty','dyacc.py',174),
]
