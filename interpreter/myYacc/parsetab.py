
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COMMA DIV ELSE END_BLOCK EQ FALSE FOR FUNC GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RPAREN SPLIT START_BLOCK STRING TRUE VARentry : start\n    start : start stmt\n          | empty\n    stmt : SPLITstmt : expression SPLIT\n    stmt : VAR ASSIGN LPAREN RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN RPAREN block_format\n    \n    stmt : VAR ASSIGN LPAREN func_params RPAREN block_format\n    \n    stmt : FUNC VAR LPAREN func_params RPAREN block_format\n    \n    func_params : VAR\n                | func_params COMMA VAR\n    \n    stmt : VAR LPAREN RPAREN SPLIT\n    \n    stmt : VAR LPAREN expr_list RPAREN SPLIT\n    \n    stmt : PRINT LPAREN expr_list RPAREN SPLIT\n    stmt : FOR VAR IN range block_formatrange : RANGE LPAREN expr_list RPAREN\n    stmt : IF condition_list block_format\n    \n    block_format : START_BLOCK SPLIT block END_BLOCK SPLIT\n    \n    block : stmt\n          | block stmt\n    \n    stmt : VAR ASSIGN expression SPLIT\n         | VAR ASSIGN condition_list SPLIT\n    stmt : if_assign IF condition_list ELSE expression SPLITif_assign : VAR ASSIGN expression\n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : REM NUMBERexpression : LPAREN expression RPARENexpression : TRUEexpression : FALSEexpression : NUMBERexpression : STRINGexpression : VARempty :'
    
_lr_action_items = {'SPLIT':([0,2,3,4,5,6,7,15,16,17,18,19,35,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,62,66,69,78,79,80,81,86,89,90,91,92,94,97,99,101,102,104,105,106,107,109,111,112,113,115,],[-50,5,-3,-2,-4,19,-49,-47,-45,-46,-48,-5,-49,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,78,79,80,-44,-17,91,-21,-22,-12,97,101,-28,-29,5,-30,-6,-13,-7,-14,-15,5,-19,113,-8,-9,115,-20,-23,-18,]),'VAR':([0,2,3,4,5,8,9,11,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,63,66,67,68,74,78,79,80,82,91,93,94,96,97,99,101,102,103,104,105,107,109,112,113,115,],[-50,7,-3,-2,-4,35,36,38,35,-5,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,73,83,-17,35,35,35,-21,-22,-12,35,7,35,-6,108,-13,-7,-14,-15,35,7,-19,-8,-9,-20,-23,-18,]),'FUNC':([0,2,3,4,5,19,66,78,79,80,91,94,97,99,101,102,104,105,107,109,112,113,115,],[-50,9,-3,-2,-4,-5,-17,-21,-22,-12,9,-6,-13,-7,-14,-15,9,-19,-8,-9,-20,-23,-18,]),'PRINT':([0,2,3,4,5,19,66,78,79,80,91,94,97,99,101,102,104,105,107,109,112,113,115,],[-50,10,-3,-2,-4,-5,-17,-21,-22,-12,10,-6,-13,-7,-14,-15,10,-19,-8,-9,-20,-23,-18,]),'FOR':([0,2,3,4,5,19,66,78,79,80,91,94,97,99,101,102,104,105,107,109,112,113,115,],[-50,11,-3,-2,-4,-5,-17,-21,-22,-12,11,-6,-13,-7,-14,-15,11,-19,-8,-9,-20,-23,-18,]),'IF':([0,2,3,4,5,13,15,16,17,18,19,35,43,44,45,46,47,48,49,50,51,52,53,54,55,57,62,66,78,79,80,91,94,97,99,101,102,104,105,107,109,112,113,115,],[-50,12,-3,-2,-4,42,-47,-45,-46,-48,-5,-49,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-24,-44,-17,-21,-22,-12,12,-6,-13,-7,-14,-15,12,-19,-8,-9,-20,-23,-18,]),'REM':([0,2,3,4,5,6,7,8,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,62,66,67,68,71,73,74,77,78,79,80,82,89,90,91,93,94,97,98,99,101,102,103,104,105,106,107,109,112,113,115,],[-50,14,-3,-2,-4,21,-49,14,14,-47,-45,-46,-48,-5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,21,-49,14,21,14,14,-43,-31,-32,-33,-34,-35,21,21,21,21,21,21,-42,14,21,21,-44,-17,14,14,21,-49,14,21,-21,-22,-12,14,21,21,14,14,-6,-13,21,-7,-14,-15,14,14,-19,21,-8,-9,-20,-23,-18,]),'LPAREN':([0,2,3,4,5,7,8,10,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,37,41,42,56,66,67,68,74,78,79,80,82,88,91,93,94,97,99,101,102,103,104,105,107,109,112,113,115,],[-50,8,-3,-2,-4,33,8,37,41,-5,8,8,8,8,8,8,8,8,8,8,8,8,56,8,63,8,41,41,74,-17,8,8,74,-21,-22,-12,8,103,8,8,-6,-13,-7,-14,-15,8,8,-19,-8,-9,-20,-23,-18,]),'TRUE':([0,2,3,4,5,8,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,91,93,94,97,99,101,102,103,104,105,107,109,112,113,115,],[-50,16,-3,-2,-4,16,16,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-17,16,16,16,-21,-22,-12,16,16,16,-6,-13,-7,-14,-15,16,16,-19,-8,-9,-20,-23,-18,]),'FALSE':([0,2,3,4,5,8,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,91,93,94,97,99,101,102,103,104,105,107,109,112,113,115,],[-50,17,-3,-2,-4,17,17,-5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-17,17,17,17,-21,-22,-12,17,17,17,-6,-13,-7,-14,-15,17,17,-19,-8,-9,-20,-23,-18,]),'NUMBER':([0,2,3,4,5,8,12,14,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,91,93,94,97,99,101,102,103,104,105,107,109,112,113,115,],[-50,15,-3,-2,-4,15,15,43,-5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-17,15,15,15,-21,-22,-12,15,15,15,-6,-13,-7,-14,-15,15,15,-19,-8,-9,-20,-23,-18,]),'STRING':([0,2,3,4,5,8,12,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,66,67,68,74,78,79,80,82,91,93,94,97,99,101,102,103,104,105,107,109,112,113,115,],[-50,18,-3,-2,-4,18,18,-5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-17,18,18,18,-21,-22,-12,18,18,18,-6,-13,-7,-14,-15,18,18,-19,-8,-9,-20,-23,-18,]),'$end':([0,1,2,3,4,5,19,66,78,79,80,94,97,99,101,102,107,109,113,115,],[-50,0,-1,-3,-2,-4,-5,-17,-21,-22,-12,-6,-13,-7,-14,-15,-8,-9,-23,-18,]),'END_BLOCK':([5,19,66,78,79,80,94,97,99,101,102,104,105,107,109,112,113,115,],[-4,-5,-17,-21,-22,-12,-6,-13,-7,-14,-15,111,-19,-8,-9,-20,-23,-18,]),'ADD':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[20,-49,-47,-45,-46,-48,20,-49,20,-43,-31,-32,-33,-34,-35,20,20,20,20,20,20,-42,20,20,-44,20,-49,20,20,20,20,20,]),'MUL':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[22,-49,-47,-45,-46,-48,22,-49,22,-43,22,22,-33,-34,-35,22,22,22,22,22,22,-42,22,22,-44,22,-49,22,22,22,22,22,]),'DIV':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[23,-49,-47,-45,-46,-48,23,-49,23,-43,23,23,-33,-34,-35,23,23,23,23,23,23,-42,23,23,-44,23,-49,23,23,23,23,23,]),'MOD':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[24,-49,-47,-45,-46,-48,24,-49,24,-43,24,24,-33,-34,-35,24,24,24,24,24,24,-42,24,24,-44,24,-49,24,24,24,24,24,]),'GT':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[25,-49,-47,-45,-46,-48,25,-49,25,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,25,25,-44,25,-49,25,25,25,25,25,]),'LT':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[26,-49,-47,-45,-46,-48,26,-49,26,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,26,26,-44,26,-49,26,26,26,26,26,]),'GE':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[27,-49,-47,-45,-46,-48,27,-49,27,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,27,27,-44,27,-49,27,27,27,27,27,]),'LE':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[28,-49,-47,-45,-46,-48,28,-49,28,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,28,28,-44,28,-49,28,28,28,28,28,]),'EQ':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[29,-49,-47,-45,-46,-48,29,-49,29,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,29,29,-44,29,-49,29,29,29,29,29,]),'NE':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[30,-49,-47,-45,-46,-48,30,-49,30,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,30,30,-44,30,-49,30,30,30,30,30,]),'POW':([6,7,15,16,17,18,34,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,61,62,71,73,77,89,90,98,106,],[31,-49,-47,-45,-46,-48,31,-49,31,-43,31,31,31,31,31,31,31,31,31,31,31,-42,31,31,-44,31,-49,31,31,31,31,31,]),'ASSIGN':([7,],[32,]),'RPAREN':([15,16,17,18,33,34,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,60,61,62,63,64,70,71,73,76,77,83,85,89,90,92,98,108,110,],[-47,-45,-46,-48,59,62,-49,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,75,81,-25,-44,84,86,92,62,-10,95,62,-10,100,-28,-29,-30,-26,-11,114,]),'AND':([15,16,17,18,35,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,62,70,71,72,73,77,89,90,92,],[-47,-45,-46,-48,-49,67,-27,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-27,67,-44,67,-27,67,-49,-27,-28,-29,-30,]),'OR':([15,16,17,18,35,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,62,70,71,72,73,77,89,90,92,],[-47,-45,-46,-48,-49,68,-27,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-27,68,-44,68,-27,68,-49,-27,-28,-29,-30,]),'START_BLOCK':([15,16,17,18,35,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,62,75,84,87,89,90,92,95,100,114,],[-47,-45,-46,-48,-49,69,-27,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-44,69,69,69,-28,-29,-30,69,69,-16,]),'COMMA':([15,16,17,18,35,43,44,45,46,47,48,49,50,51,52,53,54,55,60,61,62,64,73,76,83,85,98,108,110,],[-47,-45,-46,-48,-49,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,82,-25,-44,82,-10,96,-10,96,-26,-11,82,]),'ELSE':([15,16,17,18,35,40,43,44,45,46,47,48,49,50,51,52,53,54,55,62,72,89,90,92,],[-47,-45,-46,-48,-49,-27,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-44,93,-28,-29,-30,]),'IN':([38,],[65,]),'RANGE':([65,],[88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt':([2,91,104,],[4,105,112,]),'expression':([2,8,12,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,41,42,56,67,68,74,82,91,93,103,104,],[6,34,40,44,45,46,47,48,49,50,51,52,53,54,55,57,61,61,71,40,77,89,90,77,98,6,106,61,6,]),'if_assign':([2,91,104,],[13,13,13,]),'condition_list':([12,32,41,42,56,74,],[39,58,70,72,70,70,]),'expr_list':([33,37,103,],[60,64,110,]),'block_format':([39,75,84,87,95,100,],[66,94,99,102,107,109,]),'func_params':([56,63,],[76,85,]),'range':([65,],[87,]),'block':([91,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dyacc.py',13),
  ('start -> start stmt','start',2,'p_start','dyacc.py',20),
  ('start -> empty','start',1,'p_start','dyacc.py',21),
  ('stmt -> SPLIT','stmt',1,'p_stmt_none','dyacc.py',29),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_expr','dyacc.py',33),
  ('stmt -> VAR ASSIGN LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params','dyacc.py',39),
  ('stmt -> FUNC VAR LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params_func','dyacc.py',48),
  ('stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params','dyacc.py',57),
  ('stmt -> FUNC VAR LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params_func','dyacc.py',66),
  ('func_params -> VAR','func_params',1,'p_func_params_list','dyacc.py',75),
  ('func_params -> func_params COMMA VAR','func_params',3,'p_func_params_list','dyacc.py',76),
  ('stmt -> VAR LPAREN RPAREN SPLIT','stmt',4,'p_stmt_func_exe_non_params','dyacc.py',85),
  ('stmt -> VAR LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_func_exe_params','dyacc.py',91),
  ('stmt -> PRINT LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_print','dyacc.py',98),
  ('stmt -> FOR VAR IN range block_format','stmt',5,'p_stmt_for','dyacc.py',105),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dyacc.py',113),
  ('stmt -> IF condition_list block_format','stmt',3,'p_stmt_if_block','dyacc.py',120),
  ('block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT','block_format',5,'p_block_format','dyacc.py',128),
  ('block -> stmt','block',1,'p_block','dyacc.py',133),
  ('block -> block stmt','block',2,'p_block','dyacc.py',134),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_assign','dyacc.py',146),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_assign','dyacc.py',147),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_triple_assign','dyacc.py',154),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dyacc.py',163),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dyacc.py',174),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dyacc.py',175),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dyacc.py',186),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dyacc.py',187),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dyacc.py',188),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dyacc.py',199),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dyacc.py',206),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dyacc.py',207),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dyacc.py',208),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dyacc.py',209),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dyacc.py',210),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dyacc.py',211),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dyacc.py',212),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dyacc.py',213),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dyacc.py',214),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dyacc.py',215),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dyacc.py',216),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dyacc.py',217),
  ('expression -> REM NUMBER','expression',2,'p_negative_number','dyacc.py',223),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dyacc.py',228),
  ('expression -> TRUE','expression',1,'p_expression_true','dyacc.py',234),
  ('expression -> FALSE','expression',1,'p_expression_false','dyacc.py',239),
  ('expression -> NUMBER','expression',1,'p_expression_num','dyacc.py',244),
  ('expression -> STRING','expression',1,'p_expression_string','dyacc.py',249),
  ('expression -> VAR','expression',1,'p_expression_var','dyacc.py',254),
  ('empty -> <empty>','empty',0,'p_empty','dyacc.py',266),
]
