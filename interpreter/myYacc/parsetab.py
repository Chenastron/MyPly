
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWADD AND ASSIGN COLON COMMA DIV ELSE END_BLOCK EQ FALSE FOR GE GT IF IN LE LPAREN LT MOD MUL NE NUMBER OR POW PRINT RANGE REM RPAREN SPLIT START_BLOCK STRING TRUE VARentry : startexpression : TRUEexpression : FALSE\n    start : start stmt\n          | empty\n    expression : NUMBERexpression : STRINGstmt : SPLITstmt : expression SPLITexpression : VAR\n    stmt : VAR ASSIGN LPAREN RPAREN block_format\n    \n    stmt : VAR ASSIGN LPAREN func_params RPAREN block_format\n    \n    func_params : VAR\n                | func_params COMMA VAR\n    \n    stmt : VAR LPAREN RPAREN SPLIT\n    \n    stmt : PRINT LPAREN expr_list RPAREN SPLIT\n    stmt : FOR VAR IN range block_formatrange : RANGE LPAREN expr_list RPAREN\n    stmt : IF condition_list block_format\n    \n    block_format : START_BLOCK SPLIT block END_BLOCK SPLIT\n    \n    block : stmt\n          | block stmt\n    \n    stmt : VAR ASSIGN expression SPLIT\n         | VAR ASSIGN condition_list SPLIT\n    stmt : if_assign IF condition_list ELSE expression SPLITif_assign : VAR ASSIGN expression\n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPAREN\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : LPAREN expression RPARENempty :'
    
_lr_action_items = {'SPLIT':([0,2,3,4,5,6,7,13,14,15,16,17,33,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,60,63,72,73,74,75,79,80,81,82,84,87,89,91,92,93,94,97,98,99,101,],[-46,5,-5,-4,-8,17,-10,-2,-3,-6,-7,-9,-10,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,72,73,74,-45,-19,81,-23,-24,-15,87,-30,-31,5,-32,-11,-16,-17,5,-21,99,-12,101,-22,-25,-20,]),'VAR':([0,2,3,4,5,8,10,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,60,61,62,68,72,73,74,76,81,83,84,86,87,89,90,91,92,94,98,99,101,],[-46,7,-5,-4,-8,33,35,33,-9,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,67,-19,33,33,33,-23,-24,-15,33,7,33,-11,95,-16,-17,33,7,-21,-12,-22,-25,-20,]),'PRINT':([0,2,3,4,5,17,60,72,73,74,81,84,87,89,91,92,94,98,99,101,],[-46,9,-5,-4,-8,-9,-19,-23,-24,-15,9,-11,-16,-17,9,-21,-12,-22,-25,-20,]),'FOR':([0,2,3,4,5,17,60,72,73,74,81,84,87,89,91,92,94,98,99,101,],[-46,10,-5,-4,-8,-9,-19,-23,-24,-15,10,-11,-16,-17,10,-21,-12,-22,-25,-20,]),'IF':([0,2,3,4,5,12,13,14,15,16,17,33,40,41,42,43,44,45,46,47,48,49,50,51,53,56,60,72,73,74,81,84,87,89,91,92,94,98,99,101,],[-46,11,-5,-4,-8,39,-2,-3,-6,-7,-9,-10,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-26,-45,-19,-23,-24,-15,11,-11,-16,-17,11,-21,-12,-22,-25,-20,]),'TRUE':([0,2,3,4,5,8,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,60,61,62,68,72,73,74,76,81,83,84,87,89,90,91,92,94,98,99,101,],[-46,13,-5,-4,-8,13,13,-9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-19,13,13,13,-23,-24,-15,13,13,13,-11,-16,-17,13,13,-21,-12,-22,-25,-20,]),'FALSE':([0,2,3,4,5,8,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,60,61,62,68,72,73,74,76,81,83,84,87,89,90,91,92,94,98,99,101,],[-46,14,-5,-4,-8,14,14,-9,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-19,14,14,14,-23,-24,-15,14,14,14,-11,-16,-17,14,14,-21,-12,-22,-25,-20,]),'NUMBER':([0,2,3,4,5,8,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,60,61,62,68,72,73,74,76,81,83,84,87,89,90,91,92,94,98,99,101,],[-46,15,-5,-4,-8,15,15,-9,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-19,15,15,15,-23,-24,-15,15,15,15,-11,-16,-17,15,15,-21,-12,-22,-25,-20,]),'STRING':([0,2,3,4,5,8,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,60,61,62,68,72,73,74,76,81,83,84,87,89,90,91,92,94,98,99,101,],[-46,16,-5,-4,-8,16,16,-9,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-19,16,16,16,-23,-24,-15,16,16,16,-11,-16,-17,16,16,-21,-12,-22,-25,-20,]),'LPAREN':([0,2,3,4,5,7,8,9,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,60,61,62,68,72,73,74,76,78,81,83,84,87,89,90,91,92,94,98,99,101,],[-46,8,-5,-4,-8,31,8,34,38,-9,8,8,8,8,8,8,8,8,8,8,8,8,52,8,38,38,68,-19,8,8,68,-23,-24,-15,8,90,8,8,-11,-16,-17,8,8,-21,-12,-22,-25,-20,]),'$end':([0,1,2,3,4,5,17,60,72,73,74,84,87,89,94,99,101,],[-46,0,-1,-5,-4,-8,-9,-19,-23,-24,-15,-11,-16,-17,-12,-25,-20,]),'END_BLOCK':([5,17,60,72,73,74,84,87,89,91,92,94,98,99,101,],[-8,-9,-19,-23,-24,-15,-11,-16,-17,97,-21,-12,-22,-25,-20,]),'ADD':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[18,-10,-2,-3,-6,-7,18,-10,18,-33,-34,-35,-36,-37,18,18,18,18,18,18,-44,18,-45,18,18,-10,18,18,18,18,18,]),'REM':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[19,-10,-2,-3,-6,-7,19,-10,19,-33,-34,-35,-36,-37,19,19,19,19,19,19,-44,19,-45,19,19,-10,19,19,19,19,19,]),'MUL':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[20,-10,-2,-3,-6,-7,20,-10,20,20,20,-35,-36,-37,20,20,20,20,20,20,-44,20,-45,20,20,-10,20,20,20,20,20,]),'DIV':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[21,-10,-2,-3,-6,-7,21,-10,21,21,21,-35,-36,-37,21,21,21,21,21,21,-44,21,-45,21,21,-10,21,21,21,21,21,]),'MOD':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[22,-10,-2,-3,-6,-7,22,-10,22,22,22,-35,-36,-37,22,22,22,22,22,22,-44,22,-45,22,22,-10,22,22,22,22,22,]),'GT':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[23,-10,-2,-3,-6,-7,23,-10,23,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,23,-45,23,23,-10,23,23,23,23,23,]),'LT':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[24,-10,-2,-3,-6,-7,24,-10,24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,24,-45,24,24,-10,24,24,24,24,24,]),'GE':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[25,-10,-2,-3,-6,-7,25,-10,25,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,25,-45,25,25,-10,25,25,25,25,25,]),'LE':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[26,-10,-2,-3,-6,-7,26,-10,26,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,26,-45,26,26,-10,26,26,26,26,26,]),'EQ':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[27,-10,-2,-3,-6,-7,27,-10,27,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,27,-45,27,27,-10,27,27,27,27,27,]),'NE':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[28,-10,-2,-3,-6,-7,28,-10,28,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,28,-45,28,28,-10,28,28,28,28,28,]),'POW':([6,7,13,14,15,16,32,33,37,40,41,42,43,44,45,46,47,48,49,50,51,53,56,58,65,67,71,79,80,88,93,],[29,-10,-2,-3,-6,-7,29,-10,29,29,29,29,29,29,29,29,29,29,29,29,-44,29,-45,29,29,-10,29,29,29,29,29,]),'ASSIGN':([7,],[30,]),'RPAREN':([13,14,15,16,31,32,33,40,41,42,43,44,45,46,47,48,49,50,51,52,56,57,58,64,65,67,70,71,79,80,82,88,95,96,],[-2,-3,-6,-7,55,56,-10,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,69,-45,75,-27,82,56,-10,85,56,-30,-31,-32,-28,-14,100,]),'AND':([13,14,15,16,33,36,37,40,41,42,43,44,45,46,47,48,49,50,51,53,54,56,64,65,66,67,71,79,80,82,],[-2,-3,-6,-7,-10,61,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-29,61,-45,61,-29,61,-10,-29,-30,-31,-32,]),'OR':([13,14,15,16,33,36,37,40,41,42,43,44,45,46,47,48,49,50,51,53,54,56,64,65,66,67,71,79,80,82,],[-2,-3,-6,-7,-10,62,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-29,62,-45,62,-29,62,-10,-29,-30,-31,-32,]),'START_BLOCK':([13,14,15,16,33,36,37,40,41,42,43,44,45,46,47,48,49,50,51,56,69,77,79,80,82,85,100,],[-2,-3,-6,-7,-10,63,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,63,63,-30,-31,-32,63,-18,]),'COMMA':([13,14,15,16,33,40,41,42,43,44,45,46,47,48,49,50,51,56,57,58,67,70,88,95,96,],[-2,-3,-6,-7,-10,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,76,-27,-13,86,-28,-14,76,]),'ELSE':([13,14,15,16,33,37,40,41,42,43,44,45,46,47,48,49,50,51,56,66,79,80,82,],[-2,-3,-6,-7,-10,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,83,-30,-31,-32,]),'IN':([35,],[59,]),'RANGE':([59,],[78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'entry':([0,],[1,]),'start':([0,],[2,]),'empty':([0,],[3,]),'stmt':([2,81,91,],[4,92,98,]),'expression':([2,8,11,18,19,20,21,22,23,24,25,26,27,28,29,30,34,38,39,52,61,62,68,76,81,83,90,91,],[6,32,37,40,41,42,43,44,45,46,47,48,49,50,51,53,58,65,37,71,79,80,71,88,6,93,58,6,]),'if_assign':([2,81,91,],[12,12,12,]),'condition_list':([11,30,38,39,52,68,],[36,54,64,66,64,64,]),'expr_list':([34,90,],[57,96,]),'block_format':([36,69,77,85,],[60,84,89,94,]),'func_params':([52,],[70,]),'range':([59,],[77,]),'block':([81,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> entry","S'",1,None,None,None),
  ('entry -> start','entry',1,'p_entry','dyacc.py',14),
  ('expression -> TRUE','expression',1,'p_expression_true','expressionEndRule.py',14),
  ('expression -> FALSE','expression',1,'p_expression_false','expressionEndRule.py',19),
  ('start -> start stmt','start',2,'p_start','dyacc.py',21),
  ('start -> empty','start',1,'p_start','dyacc.py',22),
  ('expression -> NUMBER','expression',1,'p_expression_num','expressionEndRule.py',24),
  ('expression -> STRING','expression',1,'p_expression_string','expressionEndRule.py',29),
  ('stmt -> SPLIT','stmt',1,'p_stmt_none','dyacc.py',30),
  ('stmt -> expression SPLIT','stmt',2,'p_stmt_expr','dyacc.py',34),
  ('expression -> VAR','expression',1,'p_expression_var','expressionEndRule.py',34),
  ('stmt -> VAR ASSIGN LPAREN RPAREN block_format','stmt',5,'p_stmt_func_define_non_params','dyacc.py',40),
  ('stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format','stmt',6,'p_stmt_func_define_params','dyacc.py',49),
  ('func_params -> VAR','func_params',1,'p_func_params_list','dyacc.py',58),
  ('func_params -> func_params COMMA VAR','func_params',3,'p_func_params_list','dyacc.py',59),
  ('stmt -> VAR LPAREN RPAREN SPLIT','stmt',4,'p_stmt_func_exe','dyacc.py',64),
  ('stmt -> PRINT LPAREN expr_list RPAREN SPLIT','stmt',5,'p_stmt_print','dyacc.py',72),
  ('stmt -> FOR VAR IN range block_format','stmt',5,'p_stmt_for','dyacc.py',79),
  ('range -> RANGE LPAREN expr_list RPAREN','range',4,'p_range','dyacc.py',87),
  ('stmt -> IF condition_list block_format','stmt',3,'p_stmt_if_block','dyacc.py',94),
  ('block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT','block_format',5,'p_block_format','dyacc.py',102),
  ('block -> stmt','block',1,'p_block','dyacc.py',107),
  ('block -> block stmt','block',2,'p_block','dyacc.py',108),
  ('stmt -> VAR ASSIGN expression SPLIT','stmt',4,'p_stmt_assign','dyacc.py',120),
  ('stmt -> VAR ASSIGN condition_list SPLIT','stmt',4,'p_stmt_assign','dyacc.py',121),
  ('stmt -> if_assign IF condition_list ELSE expression SPLIT','stmt',6,'p_stmt_triple_assign','dyacc.py',128),
  ('if_assign -> VAR ASSIGN expression','if_assign',3,'p_ifassign','dyacc.py',137),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dyacc.py',148),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dyacc.py',149),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dyacc.py',160),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dyacc.py',161),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dyacc.py',162),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dyacc.py',173),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dyacc.py',180),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dyacc.py',181),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dyacc.py',182),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dyacc.py',183),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dyacc.py',184),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dyacc.py',185),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dyacc.py',186),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dyacc.py',187),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dyacc.py',188),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dyacc.py',189),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dyacc.py',190),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dyacc.py',191),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dyacc.py',198),
  ('empty -> <empty>','empty',0,'p_empty','dyacc.py',214),
]
