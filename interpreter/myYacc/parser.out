Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> entry
Rule 1     entry -> start
Rule 2     expression -> TRUE
Rule 3     expression -> FALSE
Rule 4     start -> start stmt
Rule 5     start -> empty
Rule 6     expression -> NUMBER
Rule 7     expression -> STRING
Rule 8     stmt -> SPLIT
Rule 9     stmt -> expression SPLIT
Rule 10    expression -> VAR
Rule 11    stmt -> VAR ASSIGN LPAREN RPAREN block_format
Rule 12    stmt -> FUNC VAR LPAREN RPAREN block_format
Rule 13    stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format
Rule 14    stmt -> FUNC VAR LPAREN func_params RPAREN block_format
Rule 15    func_params -> VAR
Rule 16    func_params -> func_params COMMA VAR
Rule 17    stmt -> VAR LPAREN RPAREN SPLIT
Rule 18    stmt -> VAR LPAREN expr_list RPAREN SPLIT
Rule 19    stmt -> PRINT LPAREN expr_list RPAREN SPLIT
Rule 20    stmt -> FOR VAR IN range block_format
Rule 21    range -> RANGE LPAREN expr_list RPAREN
Rule 22    stmt -> IF condition_list block_format
Rule 23    block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT
Rule 24    block -> stmt
Rule 25    block -> block stmt
Rule 26    stmt -> VAR ASSIGN expression SPLIT
Rule 27    stmt -> VAR ASSIGN condition_list SPLIT
Rule 28    stmt -> if_assign IF condition_list ELSE expression SPLIT
Rule 29    if_assign -> VAR ASSIGN expression
Rule 30    expr_list -> expression
Rule 31    expr_list -> expr_list COMMA expression
Rule 32    condition_list -> expression
Rule 33    condition_list -> condition_list AND expression
Rule 34    condition_list -> condition_list OR expression
Rule 35    condition_list -> LPAREN condition_list RPAREN
Rule 36    expression -> expression ADD expression
Rule 37    expression -> expression REM expression
Rule 38    expression -> expression MUL expression
Rule 39    expression -> expression DIV expression
Rule 40    expression -> expression MOD expression
Rule 41    expression -> expression GT expression
Rule 42    expression -> expression LT expression
Rule 43    expression -> expression GE expression
Rule 44    expression -> expression LE expression
Rule 45    expression -> expression EQ expression
Rule 46    expression -> expression NE expression
Rule 47    expression -> expression POW expression
Rule 48    expression -> LPAREN expression RPAREN
Rule 49    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 36
AND                  : 33
ASSIGN               : 11 13 26 27 29
COMMA                : 16 31
DIV                  : 39
ELSE                 : 28
END_BLOCK            : 23
EQ                   : 45
FALSE                : 3
FOR                  : 20
FUNC                 : 12 14
GE                   : 43
GT                   : 41
IF                   : 22 28
IN                   : 20
LE                   : 44
LPAREN               : 11 12 13 14 17 18 19 21 35 48
LT                   : 42
MOD                  : 40
MUL                  : 38
NE                   : 46
NUMBER               : 6
OR                   : 34
POW                  : 47
PRINT                : 19
RANGE                : 21
REM                  : 37
RPAREN               : 11 12 13 14 17 18 19 21 35 48
SPLIT                : 8 9 17 18 19 23 23 26 27 28
START_BLOCK          : 23
STRING               : 7
TRUE                 : 2
VAR                  : 10 11 12 13 14 15 16 17 18 20 26 27 29
error                : 

Nonterminals, with rules where they appear

block                : 23 25
block_format         : 11 12 13 14 20 22
condition_list       : 22 27 28 33 34 35
empty                : 5
entry                : 0
expr_list            : 18 19 21 31
expression           : 9 26 28 29 30 31 32 33 34 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48
func_params          : 13 14 16
if_assign            : 28
range                : 20
start                : 1 4
stmt                 : 4 24 25

Parsing method: LALR

state 0

    (0) S' -> . entry
    (1) entry -> . start
    (4) start -> . start stmt
    (5) start -> . empty
    (49) empty -> .

    SPLIT           reduce using rule 49 (empty -> .)
    VAR             reduce using rule 49 (empty -> .)
    FUNC            reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    TRUE            reduce using rule 49 (empty -> .)
    FALSE           reduce using rule 49 (empty -> .)
    NUMBER          reduce using rule 49 (empty -> .)
    STRING          reduce using rule 49 (empty -> .)
    LPAREN          reduce using rule 49 (empty -> .)
    $end            reduce using rule 49 (empty -> .)

    entry                          shift and go to state 1
    start                          shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> entry .



state 2

    (1) entry -> start .
    (4) start -> start . stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . VAR ASSIGN LPAREN RPAREN block_format
    (12) stmt -> . FUNC VAR LPAREN RPAREN block_format
    (13) stmt -> . VAR ASSIGN LPAREN func_params RPAREN block_format
    (14) stmt -> . FUNC VAR LPAREN func_params RPAREN block_format
    (17) stmt -> . VAR LPAREN RPAREN SPLIT
    (18) stmt -> . VAR LPAREN expr_list RPAREN SPLIT
    (19) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (20) stmt -> . FOR VAR IN range block_format
    (22) stmt -> . IF condition_list block_format
    (26) stmt -> . VAR ASSIGN expression SPLIT
    (27) stmt -> . VAR ASSIGN condition_list SPLIT
    (28) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN
    (29) if_assign -> . VAR ASSIGN expression

    $end            reduce using rule 1 (entry -> start .)
    SPLIT           shift and go to state 5
    VAR             shift and go to state 7
    FUNC            shift and go to state 9
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 12
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    LPAREN          shift and go to state 8

    stmt                           shift and go to state 4
    expression                     shift and go to state 6
    if_assign                      shift and go to state 13

state 3

    (5) start -> empty .

    SPLIT           reduce using rule 5 (start -> empty .)
    VAR             reduce using rule 5 (start -> empty .)
    FUNC            reduce using rule 5 (start -> empty .)
    PRINT           reduce using rule 5 (start -> empty .)
    FOR             reduce using rule 5 (start -> empty .)
    IF              reduce using rule 5 (start -> empty .)
    TRUE            reduce using rule 5 (start -> empty .)
    FALSE           reduce using rule 5 (start -> empty .)
    NUMBER          reduce using rule 5 (start -> empty .)
    STRING          reduce using rule 5 (start -> empty .)
    LPAREN          reduce using rule 5 (start -> empty .)
    $end            reduce using rule 5 (start -> empty .)


state 4

    (4) start -> start stmt .

    SPLIT           reduce using rule 4 (start -> start stmt .)
    VAR             reduce using rule 4 (start -> start stmt .)
    FUNC            reduce using rule 4 (start -> start stmt .)
    PRINT           reduce using rule 4 (start -> start stmt .)
    FOR             reduce using rule 4 (start -> start stmt .)
    IF              reduce using rule 4 (start -> start stmt .)
    TRUE            reduce using rule 4 (start -> start stmt .)
    FALSE           reduce using rule 4 (start -> start stmt .)
    NUMBER          reduce using rule 4 (start -> start stmt .)
    STRING          reduce using rule 4 (start -> start stmt .)
    LPAREN          reduce using rule 4 (start -> start stmt .)
    $end            reduce using rule 4 (start -> start stmt .)


state 5

    (8) stmt -> SPLIT .

    SPLIT           reduce using rule 8 (stmt -> SPLIT .)
    VAR             reduce using rule 8 (stmt -> SPLIT .)
    FUNC            reduce using rule 8 (stmt -> SPLIT .)
    PRINT           reduce using rule 8 (stmt -> SPLIT .)
    FOR             reduce using rule 8 (stmt -> SPLIT .)
    IF              reduce using rule 8 (stmt -> SPLIT .)
    TRUE            reduce using rule 8 (stmt -> SPLIT .)
    FALSE           reduce using rule 8 (stmt -> SPLIT .)
    NUMBER          reduce using rule 8 (stmt -> SPLIT .)
    STRING          reduce using rule 8 (stmt -> SPLIT .)
    LPAREN          reduce using rule 8 (stmt -> SPLIT .)
    $end            reduce using rule 8 (stmt -> SPLIT .)
    END_BLOCK       reduce using rule 8 (stmt -> SPLIT .)


state 6

    (9) stmt -> expression . SPLIT
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           shift and go to state 18
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 7

    (11) stmt -> VAR . ASSIGN LPAREN RPAREN block_format
    (13) stmt -> VAR . ASSIGN LPAREN func_params RPAREN block_format
    (17) stmt -> VAR . LPAREN RPAREN SPLIT
    (18) stmt -> VAR . LPAREN expr_list RPAREN SPLIT
    (26) stmt -> VAR . ASSIGN expression SPLIT
    (27) stmt -> VAR . ASSIGN condition_list SPLIT
    (10) expression -> VAR .
    (29) if_assign -> VAR . ASSIGN expression

    ASSIGN          shift and go to state 31
    LPAREN          shift and go to state 32
    SPLIT           reduce using rule 10 (expression -> VAR .)
    ADD             reduce using rule 10 (expression -> VAR .)
    REM             reduce using rule 10 (expression -> VAR .)
    MUL             reduce using rule 10 (expression -> VAR .)
    DIV             reduce using rule 10 (expression -> VAR .)
    MOD             reduce using rule 10 (expression -> VAR .)
    GT              reduce using rule 10 (expression -> VAR .)
    LT              reduce using rule 10 (expression -> VAR .)
    GE              reduce using rule 10 (expression -> VAR .)
    LE              reduce using rule 10 (expression -> VAR .)
    EQ              reduce using rule 10 (expression -> VAR .)
    NE              reduce using rule 10 (expression -> VAR .)
    POW             reduce using rule 10 (expression -> VAR .)


state 8

    (48) expression -> LPAREN . expression RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 33

state 9

    (12) stmt -> FUNC . VAR LPAREN RPAREN block_format
    (14) stmt -> FUNC . VAR LPAREN func_params RPAREN block_format

    VAR             shift and go to state 35


state 10

    (19) stmt -> PRINT . LPAREN expr_list RPAREN SPLIT

    LPAREN          shift and go to state 36


state 11

    (20) stmt -> FOR . VAR IN range block_format

    VAR             shift and go to state 37


state 12

    (22) stmt -> IF . condition_list block_format
    (32) condition_list -> . expression
    (33) condition_list -> . condition_list AND expression
    (34) condition_list -> . condition_list OR expression
    (35) condition_list -> . LPAREN condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 40
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34

    condition_list                 shift and go to state 38
    expression                     shift and go to state 39

state 13

    (28) stmt -> if_assign . IF condition_list ELSE expression SPLIT

    IF              shift and go to state 41


state 14

    (2) expression -> TRUE .

    SPLIT           reduce using rule 2 (expression -> TRUE .)
    ADD             reduce using rule 2 (expression -> TRUE .)
    REM             reduce using rule 2 (expression -> TRUE .)
    MUL             reduce using rule 2 (expression -> TRUE .)
    DIV             reduce using rule 2 (expression -> TRUE .)
    MOD             reduce using rule 2 (expression -> TRUE .)
    GT              reduce using rule 2 (expression -> TRUE .)
    LT              reduce using rule 2 (expression -> TRUE .)
    GE              reduce using rule 2 (expression -> TRUE .)
    LE              reduce using rule 2 (expression -> TRUE .)
    EQ              reduce using rule 2 (expression -> TRUE .)
    NE              reduce using rule 2 (expression -> TRUE .)
    POW             reduce using rule 2 (expression -> TRUE .)
    RPAREN          reduce using rule 2 (expression -> TRUE .)
    AND             reduce using rule 2 (expression -> TRUE .)
    OR              reduce using rule 2 (expression -> TRUE .)
    START_BLOCK     reduce using rule 2 (expression -> TRUE .)
    IF              reduce using rule 2 (expression -> TRUE .)
    COMMA           reduce using rule 2 (expression -> TRUE .)
    ELSE            reduce using rule 2 (expression -> TRUE .)


state 15

    (3) expression -> FALSE .

    SPLIT           reduce using rule 3 (expression -> FALSE .)
    ADD             reduce using rule 3 (expression -> FALSE .)
    REM             reduce using rule 3 (expression -> FALSE .)
    MUL             reduce using rule 3 (expression -> FALSE .)
    DIV             reduce using rule 3 (expression -> FALSE .)
    MOD             reduce using rule 3 (expression -> FALSE .)
    GT              reduce using rule 3 (expression -> FALSE .)
    LT              reduce using rule 3 (expression -> FALSE .)
    GE              reduce using rule 3 (expression -> FALSE .)
    LE              reduce using rule 3 (expression -> FALSE .)
    EQ              reduce using rule 3 (expression -> FALSE .)
    NE              reduce using rule 3 (expression -> FALSE .)
    POW             reduce using rule 3 (expression -> FALSE .)
    RPAREN          reduce using rule 3 (expression -> FALSE .)
    AND             reduce using rule 3 (expression -> FALSE .)
    OR              reduce using rule 3 (expression -> FALSE .)
    START_BLOCK     reduce using rule 3 (expression -> FALSE .)
    IF              reduce using rule 3 (expression -> FALSE .)
    COMMA           reduce using rule 3 (expression -> FALSE .)
    ELSE            reduce using rule 3 (expression -> FALSE .)


state 16

    (6) expression -> NUMBER .

    SPLIT           reduce using rule 6 (expression -> NUMBER .)
    ADD             reduce using rule 6 (expression -> NUMBER .)
    REM             reduce using rule 6 (expression -> NUMBER .)
    MUL             reduce using rule 6 (expression -> NUMBER .)
    DIV             reduce using rule 6 (expression -> NUMBER .)
    MOD             reduce using rule 6 (expression -> NUMBER .)
    GT              reduce using rule 6 (expression -> NUMBER .)
    LT              reduce using rule 6 (expression -> NUMBER .)
    GE              reduce using rule 6 (expression -> NUMBER .)
    LE              reduce using rule 6 (expression -> NUMBER .)
    EQ              reduce using rule 6 (expression -> NUMBER .)
    NE              reduce using rule 6 (expression -> NUMBER .)
    POW             reduce using rule 6 (expression -> NUMBER .)
    RPAREN          reduce using rule 6 (expression -> NUMBER .)
    AND             reduce using rule 6 (expression -> NUMBER .)
    OR              reduce using rule 6 (expression -> NUMBER .)
    START_BLOCK     reduce using rule 6 (expression -> NUMBER .)
    IF              reduce using rule 6 (expression -> NUMBER .)
    COMMA           reduce using rule 6 (expression -> NUMBER .)
    ELSE            reduce using rule 6 (expression -> NUMBER .)


state 17

    (7) expression -> STRING .

    SPLIT           reduce using rule 7 (expression -> STRING .)
    ADD             reduce using rule 7 (expression -> STRING .)
    REM             reduce using rule 7 (expression -> STRING .)
    MUL             reduce using rule 7 (expression -> STRING .)
    DIV             reduce using rule 7 (expression -> STRING .)
    MOD             reduce using rule 7 (expression -> STRING .)
    GT              reduce using rule 7 (expression -> STRING .)
    LT              reduce using rule 7 (expression -> STRING .)
    GE              reduce using rule 7 (expression -> STRING .)
    LE              reduce using rule 7 (expression -> STRING .)
    EQ              reduce using rule 7 (expression -> STRING .)
    NE              reduce using rule 7 (expression -> STRING .)
    POW             reduce using rule 7 (expression -> STRING .)
    RPAREN          reduce using rule 7 (expression -> STRING .)
    AND             reduce using rule 7 (expression -> STRING .)
    OR              reduce using rule 7 (expression -> STRING .)
    START_BLOCK     reduce using rule 7 (expression -> STRING .)
    IF              reduce using rule 7 (expression -> STRING .)
    COMMA           reduce using rule 7 (expression -> STRING .)
    ELSE            reduce using rule 7 (expression -> STRING .)


state 18

    (9) stmt -> expression SPLIT .

    SPLIT           reduce using rule 9 (stmt -> expression SPLIT .)
    VAR             reduce using rule 9 (stmt -> expression SPLIT .)
    FUNC            reduce using rule 9 (stmt -> expression SPLIT .)
    PRINT           reduce using rule 9 (stmt -> expression SPLIT .)
    FOR             reduce using rule 9 (stmt -> expression SPLIT .)
    IF              reduce using rule 9 (stmt -> expression SPLIT .)
    TRUE            reduce using rule 9 (stmt -> expression SPLIT .)
    FALSE           reduce using rule 9 (stmt -> expression SPLIT .)
    NUMBER          reduce using rule 9 (stmt -> expression SPLIT .)
    STRING          reduce using rule 9 (stmt -> expression SPLIT .)
    LPAREN          reduce using rule 9 (stmt -> expression SPLIT .)
    $end            reduce using rule 9 (stmt -> expression SPLIT .)
    END_BLOCK       reduce using rule 9 (stmt -> expression SPLIT .)


state 19

    (36) expression -> expression ADD . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 42

state 20

    (37) expression -> expression REM . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 43

state 21

    (38) expression -> expression MUL . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 44

state 22

    (39) expression -> expression DIV . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 45

state 23

    (40) expression -> expression MOD . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 46

state 24

    (41) expression -> expression GT . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 47

state 25

    (42) expression -> expression LT . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 48

state 26

    (43) expression -> expression GE . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 49

state 27

    (44) expression -> expression LE . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 50

state 28

    (45) expression -> expression EQ . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 51

state 29

    (46) expression -> expression NE . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 52

state 30

    (47) expression -> expression POW . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 53

state 31

    (11) stmt -> VAR ASSIGN . LPAREN RPAREN block_format
    (13) stmt -> VAR ASSIGN . LPAREN func_params RPAREN block_format
    (26) stmt -> VAR ASSIGN . expression SPLIT
    (27) stmt -> VAR ASSIGN . condition_list SPLIT
    (29) if_assign -> VAR ASSIGN . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN
    (32) condition_list -> . expression
    (33) condition_list -> . condition_list AND expression
    (34) condition_list -> . condition_list OR expression
    (35) condition_list -> . LPAREN condition_list RPAREN

    LPAREN          shift and go to state 54
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34

    expression                     shift and go to state 55
    condition_list                 shift and go to state 56

state 32

    (17) stmt -> VAR LPAREN . RPAREN SPLIT
    (18) stmt -> VAR LPAREN . expr_list RPAREN SPLIT
    (30) expr_list -> . expression
    (31) expr_list -> . expr_list COMMA expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 57
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expr_list                      shift and go to state 58
    expression                     shift and go to state 59

state 33

    (48) expression -> LPAREN expression . RPAREN
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    RPAREN          shift and go to state 60
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 34

    (10) expression -> VAR .

    RPAREN          reduce using rule 10 (expression -> VAR .)
    ADD             reduce using rule 10 (expression -> VAR .)
    REM             reduce using rule 10 (expression -> VAR .)
    MUL             reduce using rule 10 (expression -> VAR .)
    DIV             reduce using rule 10 (expression -> VAR .)
    MOD             reduce using rule 10 (expression -> VAR .)
    GT              reduce using rule 10 (expression -> VAR .)
    LT              reduce using rule 10 (expression -> VAR .)
    GE              reduce using rule 10 (expression -> VAR .)
    LE              reduce using rule 10 (expression -> VAR .)
    EQ              reduce using rule 10 (expression -> VAR .)
    NE              reduce using rule 10 (expression -> VAR .)
    POW             reduce using rule 10 (expression -> VAR .)
    AND             reduce using rule 10 (expression -> VAR .)
    OR              reduce using rule 10 (expression -> VAR .)
    START_BLOCK     reduce using rule 10 (expression -> VAR .)
    SPLIT           reduce using rule 10 (expression -> VAR .)
    IF              reduce using rule 10 (expression -> VAR .)
    COMMA           reduce using rule 10 (expression -> VAR .)
    ELSE            reduce using rule 10 (expression -> VAR .)


state 35

    (12) stmt -> FUNC VAR . LPAREN RPAREN block_format
    (14) stmt -> FUNC VAR . LPAREN func_params RPAREN block_format

    LPAREN          shift and go to state 61


state 36

    (19) stmt -> PRINT LPAREN . expr_list RPAREN SPLIT
    (30) expr_list -> . expression
    (31) expr_list -> . expr_list COMMA expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expr_list                      shift and go to state 62
    expression                     shift and go to state 59

state 37

    (20) stmt -> FOR VAR . IN range block_format

    IN              shift and go to state 63


state 38

    (22) stmt -> IF condition_list . block_format
    (33) condition_list -> condition_list . AND expression
    (34) condition_list -> condition_list . OR expression
    (23) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    AND             shift and go to state 65
    OR              shift and go to state 66
    START_BLOCK     shift and go to state 67

    block_format                   shift and go to state 64

state 39

    (32) condition_list -> expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    AND             reduce using rule 32 (condition_list -> expression .)
    OR              reduce using rule 32 (condition_list -> expression .)
    START_BLOCK     reduce using rule 32 (condition_list -> expression .)
    ELSE            reduce using rule 32 (condition_list -> expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 40

    (35) condition_list -> LPAREN . condition_list RPAREN
    (48) expression -> LPAREN . expression RPAREN
    (32) condition_list -> . expression
    (33) condition_list -> . condition_list AND expression
    (34) condition_list -> . condition_list OR expression
    (35) condition_list -> . LPAREN condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 40
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34

    condition_list                 shift and go to state 68
    expression                     shift and go to state 69

state 41

    (28) stmt -> if_assign IF . condition_list ELSE expression SPLIT
    (32) condition_list -> . expression
    (33) condition_list -> . condition_list AND expression
    (34) condition_list -> . condition_list OR expression
    (35) condition_list -> . LPAREN condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 40
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34

    condition_list                 shift and go to state 70
    expression                     shift and go to state 39

state 42

    (36) expression -> expression ADD expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 36 (expression -> expression ADD expression .)
    ADD             reduce using rule 36 (expression -> expression ADD expression .)
    REM             reduce using rule 36 (expression -> expression ADD expression .)
    GT              reduce using rule 36 (expression -> expression ADD expression .)
    LT              reduce using rule 36 (expression -> expression ADD expression .)
    GE              reduce using rule 36 (expression -> expression ADD expression .)
    LE              reduce using rule 36 (expression -> expression ADD expression .)
    EQ              reduce using rule 36 (expression -> expression ADD expression .)
    NE              reduce using rule 36 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 36 (expression -> expression ADD expression .)
    AND             reduce using rule 36 (expression -> expression ADD expression .)
    OR              reduce using rule 36 (expression -> expression ADD expression .)
    START_BLOCK     reduce using rule 36 (expression -> expression ADD expression .)
    IF              reduce using rule 36 (expression -> expression ADD expression .)
    COMMA           reduce using rule 36 (expression -> expression ADD expression .)
    ELSE            reduce using rule 36 (expression -> expression ADD expression .)
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! MUL             [ reduce using rule 36 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> expression ADD expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression ADD expression .) ]
  ! POW             [ reduce using rule 36 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 19 ]
  ! REM             [ shift and go to state 20 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 43

    (37) expression -> expression REM expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 37 (expression -> expression REM expression .)
    ADD             reduce using rule 37 (expression -> expression REM expression .)
    REM             reduce using rule 37 (expression -> expression REM expression .)
    GT              reduce using rule 37 (expression -> expression REM expression .)
    LT              reduce using rule 37 (expression -> expression REM expression .)
    GE              reduce using rule 37 (expression -> expression REM expression .)
    LE              reduce using rule 37 (expression -> expression REM expression .)
    EQ              reduce using rule 37 (expression -> expression REM expression .)
    NE              reduce using rule 37 (expression -> expression REM expression .)
    RPAREN          reduce using rule 37 (expression -> expression REM expression .)
    AND             reduce using rule 37 (expression -> expression REM expression .)
    OR              reduce using rule 37 (expression -> expression REM expression .)
    START_BLOCK     reduce using rule 37 (expression -> expression REM expression .)
    IF              reduce using rule 37 (expression -> expression REM expression .)
    COMMA           reduce using rule 37 (expression -> expression REM expression .)
    ELSE            reduce using rule 37 (expression -> expression REM expression .)
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! MUL             [ reduce using rule 37 (expression -> expression REM expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> expression REM expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> expression REM expression .) ]
  ! POW             [ reduce using rule 37 (expression -> expression REM expression .) ]
  ! ADD             [ shift and go to state 19 ]
  ! REM             [ shift and go to state 20 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 44

    (38) expression -> expression MUL expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 38 (expression -> expression MUL expression .)
    ADD             reduce using rule 38 (expression -> expression MUL expression .)
    REM             reduce using rule 38 (expression -> expression MUL expression .)
    MUL             reduce using rule 38 (expression -> expression MUL expression .)
    DIV             reduce using rule 38 (expression -> expression MUL expression .)
    MOD             reduce using rule 38 (expression -> expression MUL expression .)
    GT              reduce using rule 38 (expression -> expression MUL expression .)
    LT              reduce using rule 38 (expression -> expression MUL expression .)
    GE              reduce using rule 38 (expression -> expression MUL expression .)
    LE              reduce using rule 38 (expression -> expression MUL expression .)
    EQ              reduce using rule 38 (expression -> expression MUL expression .)
    NE              reduce using rule 38 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 38 (expression -> expression MUL expression .)
    AND             reduce using rule 38 (expression -> expression MUL expression .)
    OR              reduce using rule 38 (expression -> expression MUL expression .)
    START_BLOCK     reduce using rule 38 (expression -> expression MUL expression .)
    IF              reduce using rule 38 (expression -> expression MUL expression .)
    COMMA           reduce using rule 38 (expression -> expression MUL expression .)
    ELSE            reduce using rule 38 (expression -> expression MUL expression .)
    POW             shift and go to state 30

  ! POW             [ reduce using rule 38 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 19 ]
  ! REM             [ shift and go to state 20 ]
  ! MUL             [ shift and go to state 21 ]
  ! DIV             [ shift and go to state 22 ]
  ! MOD             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 45

    (39) expression -> expression DIV expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 39 (expression -> expression DIV expression .)
    ADD             reduce using rule 39 (expression -> expression DIV expression .)
    REM             reduce using rule 39 (expression -> expression DIV expression .)
    MUL             reduce using rule 39 (expression -> expression DIV expression .)
    DIV             reduce using rule 39 (expression -> expression DIV expression .)
    MOD             reduce using rule 39 (expression -> expression DIV expression .)
    GT              reduce using rule 39 (expression -> expression DIV expression .)
    LT              reduce using rule 39 (expression -> expression DIV expression .)
    GE              reduce using rule 39 (expression -> expression DIV expression .)
    LE              reduce using rule 39 (expression -> expression DIV expression .)
    EQ              reduce using rule 39 (expression -> expression DIV expression .)
    NE              reduce using rule 39 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 39 (expression -> expression DIV expression .)
    AND             reduce using rule 39 (expression -> expression DIV expression .)
    OR              reduce using rule 39 (expression -> expression DIV expression .)
    START_BLOCK     reduce using rule 39 (expression -> expression DIV expression .)
    IF              reduce using rule 39 (expression -> expression DIV expression .)
    COMMA           reduce using rule 39 (expression -> expression DIV expression .)
    ELSE            reduce using rule 39 (expression -> expression DIV expression .)
    POW             shift and go to state 30

  ! POW             [ reduce using rule 39 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 19 ]
  ! REM             [ shift and go to state 20 ]
  ! MUL             [ shift and go to state 21 ]
  ! DIV             [ shift and go to state 22 ]
  ! MOD             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 46

    (40) expression -> expression MOD expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 40 (expression -> expression MOD expression .)
    ADD             reduce using rule 40 (expression -> expression MOD expression .)
    REM             reduce using rule 40 (expression -> expression MOD expression .)
    MUL             reduce using rule 40 (expression -> expression MOD expression .)
    DIV             reduce using rule 40 (expression -> expression MOD expression .)
    MOD             reduce using rule 40 (expression -> expression MOD expression .)
    GT              reduce using rule 40 (expression -> expression MOD expression .)
    LT              reduce using rule 40 (expression -> expression MOD expression .)
    GE              reduce using rule 40 (expression -> expression MOD expression .)
    LE              reduce using rule 40 (expression -> expression MOD expression .)
    EQ              reduce using rule 40 (expression -> expression MOD expression .)
    NE              reduce using rule 40 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 40 (expression -> expression MOD expression .)
    AND             reduce using rule 40 (expression -> expression MOD expression .)
    OR              reduce using rule 40 (expression -> expression MOD expression .)
    START_BLOCK     reduce using rule 40 (expression -> expression MOD expression .)
    IF              reduce using rule 40 (expression -> expression MOD expression .)
    COMMA           reduce using rule 40 (expression -> expression MOD expression .)
    ELSE            reduce using rule 40 (expression -> expression MOD expression .)
    POW             shift and go to state 30

  ! POW             [ reduce using rule 40 (expression -> expression MOD expression .) ]
  ! ADD             [ shift and go to state 19 ]
  ! REM             [ shift and go to state 20 ]
  ! MUL             [ shift and go to state 21 ]
  ! DIV             [ shift and go to state 22 ]
  ! MOD             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 47

    (41) expression -> expression GT expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 41 (expression -> expression GT expression .)
    GT              reduce using rule 41 (expression -> expression GT expression .)
    LT              reduce using rule 41 (expression -> expression GT expression .)
    GE              reduce using rule 41 (expression -> expression GT expression .)
    LE              reduce using rule 41 (expression -> expression GT expression .)
    EQ              reduce using rule 41 (expression -> expression GT expression .)
    NE              reduce using rule 41 (expression -> expression GT expression .)
    RPAREN          reduce using rule 41 (expression -> expression GT expression .)
    AND             reduce using rule 41 (expression -> expression GT expression .)
    OR              reduce using rule 41 (expression -> expression GT expression .)
    START_BLOCK     reduce using rule 41 (expression -> expression GT expression .)
    IF              reduce using rule 41 (expression -> expression GT expression .)
    COMMA           reduce using rule 41 (expression -> expression GT expression .)
    ELSE            reduce using rule 41 (expression -> expression GT expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! ADD             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! REM             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! POW             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 48

    (42) expression -> expression LT expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 42 (expression -> expression LT expression .)
    GT              reduce using rule 42 (expression -> expression LT expression .)
    LT              reduce using rule 42 (expression -> expression LT expression .)
    GE              reduce using rule 42 (expression -> expression LT expression .)
    LE              reduce using rule 42 (expression -> expression LT expression .)
    EQ              reduce using rule 42 (expression -> expression LT expression .)
    NE              reduce using rule 42 (expression -> expression LT expression .)
    RPAREN          reduce using rule 42 (expression -> expression LT expression .)
    AND             reduce using rule 42 (expression -> expression LT expression .)
    OR              reduce using rule 42 (expression -> expression LT expression .)
    START_BLOCK     reduce using rule 42 (expression -> expression LT expression .)
    IF              reduce using rule 42 (expression -> expression LT expression .)
    COMMA           reduce using rule 42 (expression -> expression LT expression .)
    ELSE            reduce using rule 42 (expression -> expression LT expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! ADD             [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! REM             [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! POW             [ reduce using rule 42 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 49

    (43) expression -> expression GE expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 43 (expression -> expression GE expression .)
    GT              reduce using rule 43 (expression -> expression GE expression .)
    LT              reduce using rule 43 (expression -> expression GE expression .)
    GE              reduce using rule 43 (expression -> expression GE expression .)
    LE              reduce using rule 43 (expression -> expression GE expression .)
    EQ              reduce using rule 43 (expression -> expression GE expression .)
    NE              reduce using rule 43 (expression -> expression GE expression .)
    RPAREN          reduce using rule 43 (expression -> expression GE expression .)
    AND             reduce using rule 43 (expression -> expression GE expression .)
    OR              reduce using rule 43 (expression -> expression GE expression .)
    START_BLOCK     reduce using rule 43 (expression -> expression GE expression .)
    IF              reduce using rule 43 (expression -> expression GE expression .)
    COMMA           reduce using rule 43 (expression -> expression GE expression .)
    ELSE            reduce using rule 43 (expression -> expression GE expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! ADD             [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! REM             [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! MUL             [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! POW             [ reduce using rule 43 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 50

    (44) expression -> expression LE expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 44 (expression -> expression LE expression .)
    GT              reduce using rule 44 (expression -> expression LE expression .)
    LT              reduce using rule 44 (expression -> expression LE expression .)
    GE              reduce using rule 44 (expression -> expression LE expression .)
    LE              reduce using rule 44 (expression -> expression LE expression .)
    EQ              reduce using rule 44 (expression -> expression LE expression .)
    NE              reduce using rule 44 (expression -> expression LE expression .)
    RPAREN          reduce using rule 44 (expression -> expression LE expression .)
    AND             reduce using rule 44 (expression -> expression LE expression .)
    OR              reduce using rule 44 (expression -> expression LE expression .)
    START_BLOCK     reduce using rule 44 (expression -> expression LE expression .)
    IF              reduce using rule 44 (expression -> expression LE expression .)
    COMMA           reduce using rule 44 (expression -> expression LE expression .)
    ELSE            reduce using rule 44 (expression -> expression LE expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! ADD             [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! REM             [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! MUL             [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! POW             [ reduce using rule 44 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 51

    (45) expression -> expression EQ expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 45 (expression -> expression EQ expression .)
    GT              reduce using rule 45 (expression -> expression EQ expression .)
    LT              reduce using rule 45 (expression -> expression EQ expression .)
    GE              reduce using rule 45 (expression -> expression EQ expression .)
    LE              reduce using rule 45 (expression -> expression EQ expression .)
    EQ              reduce using rule 45 (expression -> expression EQ expression .)
    NE              reduce using rule 45 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 45 (expression -> expression EQ expression .)
    AND             reduce using rule 45 (expression -> expression EQ expression .)
    OR              reduce using rule 45 (expression -> expression EQ expression .)
    START_BLOCK     reduce using rule 45 (expression -> expression EQ expression .)
    IF              reduce using rule 45 (expression -> expression EQ expression .)
    COMMA           reduce using rule 45 (expression -> expression EQ expression .)
    ELSE            reduce using rule 45 (expression -> expression EQ expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! ADD             [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! REM             [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! POW             [ reduce using rule 45 (expression -> expression EQ expression .) ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 52

    (46) expression -> expression NE expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 46 (expression -> expression NE expression .)
    GT              reduce using rule 46 (expression -> expression NE expression .)
    LT              reduce using rule 46 (expression -> expression NE expression .)
    GE              reduce using rule 46 (expression -> expression NE expression .)
    LE              reduce using rule 46 (expression -> expression NE expression .)
    EQ              reduce using rule 46 (expression -> expression NE expression .)
    NE              reduce using rule 46 (expression -> expression NE expression .)
    RPAREN          reduce using rule 46 (expression -> expression NE expression .)
    AND             reduce using rule 46 (expression -> expression NE expression .)
    OR              reduce using rule 46 (expression -> expression NE expression .)
    START_BLOCK     reduce using rule 46 (expression -> expression NE expression .)
    IF              reduce using rule 46 (expression -> expression NE expression .)
    COMMA           reduce using rule 46 (expression -> expression NE expression .)
    ELSE            reduce using rule 46 (expression -> expression NE expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    POW             shift and go to state 30

  ! ADD             [ reduce using rule 46 (expression -> expression NE expression .) ]
  ! REM             [ reduce using rule 46 (expression -> expression NE expression .) ]
  ! MUL             [ reduce using rule 46 (expression -> expression NE expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression NE expression .) ]
  ! POW             [ reduce using rule 46 (expression -> expression NE expression .) ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]


state 53

    (47) expression -> expression POW expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           reduce using rule 47 (expression -> expression POW expression .)
    ADD             reduce using rule 47 (expression -> expression POW expression .)
    REM             reduce using rule 47 (expression -> expression POW expression .)
    MUL             reduce using rule 47 (expression -> expression POW expression .)
    DIV             reduce using rule 47 (expression -> expression POW expression .)
    MOD             reduce using rule 47 (expression -> expression POW expression .)
    GT              reduce using rule 47 (expression -> expression POW expression .)
    LT              reduce using rule 47 (expression -> expression POW expression .)
    GE              reduce using rule 47 (expression -> expression POW expression .)
    LE              reduce using rule 47 (expression -> expression POW expression .)
    EQ              reduce using rule 47 (expression -> expression POW expression .)
    NE              reduce using rule 47 (expression -> expression POW expression .)
    POW             reduce using rule 47 (expression -> expression POW expression .)
    RPAREN          reduce using rule 47 (expression -> expression POW expression .)
    AND             reduce using rule 47 (expression -> expression POW expression .)
    OR              reduce using rule 47 (expression -> expression POW expression .)
    START_BLOCK     reduce using rule 47 (expression -> expression POW expression .)
    IF              reduce using rule 47 (expression -> expression POW expression .)
    COMMA           reduce using rule 47 (expression -> expression POW expression .)
    ELSE            reduce using rule 47 (expression -> expression POW expression .)

  ! ADD             [ shift and go to state 19 ]
  ! REM             [ shift and go to state 20 ]
  ! MUL             [ shift and go to state 21 ]
  ! DIV             [ shift and go to state 22 ]
  ! MOD             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! LT              [ shift and go to state 25 ]
  ! GE              [ shift and go to state 26 ]
  ! LE              [ shift and go to state 27 ]
  ! EQ              [ shift and go to state 28 ]
  ! NE              [ shift and go to state 29 ]
  ! POW             [ shift and go to state 30 ]


state 54

    (11) stmt -> VAR ASSIGN LPAREN . RPAREN block_format
    (13) stmt -> VAR ASSIGN LPAREN . func_params RPAREN block_format
    (48) expression -> LPAREN . expression RPAREN
    (35) condition_list -> LPAREN . condition_list RPAREN
    (15) func_params -> . VAR
    (16) func_params -> . func_params COMMA VAR
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN
    (32) condition_list -> . expression
    (33) condition_list -> . condition_list AND expression
    (34) condition_list -> . condition_list OR expression
    (35) condition_list -> . LPAREN condition_list RPAREN

    RPAREN          shift and go to state 73
    VAR             shift and go to state 71
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    LPAREN          shift and go to state 72

    func_params                    shift and go to state 74
    expression                     shift and go to state 75
    condition_list                 shift and go to state 68

state 55

    (26) stmt -> VAR ASSIGN expression . SPLIT
    (29) if_assign -> VAR ASSIGN expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression
    (32) condition_list -> expression .

  ! shift/reduce conflict for SPLIT resolved as shift
    SPLIT           shift and go to state 76
    IF              reduce using rule 29 (if_assign -> VAR ASSIGN expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30
    AND             reduce using rule 32 (condition_list -> expression .)
    OR              reduce using rule 32 (condition_list -> expression .)

  ! SPLIT           [ reduce using rule 32 (condition_list -> expression .) ]


state 56

    (27) stmt -> VAR ASSIGN condition_list . SPLIT
    (33) condition_list -> condition_list . AND expression
    (34) condition_list -> condition_list . OR expression

    SPLIT           shift and go to state 77
    AND             shift and go to state 65
    OR              shift and go to state 66


state 57

    (17) stmt -> VAR LPAREN RPAREN . SPLIT

    SPLIT           shift and go to state 78


state 58

    (18) stmt -> VAR LPAREN expr_list . RPAREN SPLIT
    (31) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 79
    COMMA           shift and go to state 80


state 59

    (30) expr_list -> expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    RPAREN          reduce using rule 30 (expr_list -> expression .)
    COMMA           reduce using rule 30 (expr_list -> expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 60

    (48) expression -> LPAREN expression RPAREN .

    SPLIT           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    REM             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    START_BLOCK     reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 48 (expression -> LPAREN expression RPAREN .)


state 61

    (12) stmt -> FUNC VAR LPAREN . RPAREN block_format
    (14) stmt -> FUNC VAR LPAREN . func_params RPAREN block_format
    (15) func_params -> . VAR
    (16) func_params -> . func_params COMMA VAR

    RPAREN          shift and go to state 82
    VAR             shift and go to state 81

    func_params                    shift and go to state 83

state 62

    (19) stmt -> PRINT LPAREN expr_list . RPAREN SPLIT
    (31) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 84
    COMMA           shift and go to state 80


state 63

    (20) stmt -> FOR VAR IN . range block_format
    (21) range -> . RANGE LPAREN expr_list RPAREN

    RANGE           shift and go to state 86

    range                          shift and go to state 85

state 64

    (22) stmt -> IF condition_list block_format .

    SPLIT           reduce using rule 22 (stmt -> IF condition_list block_format .)
    VAR             reduce using rule 22 (stmt -> IF condition_list block_format .)
    FUNC            reduce using rule 22 (stmt -> IF condition_list block_format .)
    PRINT           reduce using rule 22 (stmt -> IF condition_list block_format .)
    FOR             reduce using rule 22 (stmt -> IF condition_list block_format .)
    IF              reduce using rule 22 (stmt -> IF condition_list block_format .)
    TRUE            reduce using rule 22 (stmt -> IF condition_list block_format .)
    FALSE           reduce using rule 22 (stmt -> IF condition_list block_format .)
    NUMBER          reduce using rule 22 (stmt -> IF condition_list block_format .)
    STRING          reduce using rule 22 (stmt -> IF condition_list block_format .)
    LPAREN          reduce using rule 22 (stmt -> IF condition_list block_format .)
    $end            reduce using rule 22 (stmt -> IF condition_list block_format .)
    END_BLOCK       reduce using rule 22 (stmt -> IF condition_list block_format .)


state 65

    (33) condition_list -> condition_list AND . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 87

state 66

    (34) condition_list -> condition_list OR . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 88

state 67

    (23) block_format -> START_BLOCK . SPLIT block END_BLOCK SPLIT

    SPLIT           shift and go to state 89


state 68

    (35) condition_list -> LPAREN condition_list . RPAREN
    (33) condition_list -> condition_list . AND expression
    (34) condition_list -> condition_list . OR expression

    RPAREN          shift and go to state 90
    AND             shift and go to state 65
    OR              shift and go to state 66


state 69

    (48) expression -> LPAREN expression . RPAREN
    (32) condition_list -> expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 60
    AND             reduce using rule 32 (condition_list -> expression .)
    OR              reduce using rule 32 (condition_list -> expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30

  ! RPAREN          [ reduce using rule 32 (condition_list -> expression .) ]


state 70

    (28) stmt -> if_assign IF condition_list . ELSE expression SPLIT
    (33) condition_list -> condition_list . AND expression
    (34) condition_list -> condition_list . OR expression

    ELSE            shift and go to state 91
    AND             shift and go to state 65
    OR              shift and go to state 66


state 71

    (15) func_params -> VAR .
    (10) expression -> VAR .

  ! reduce/reduce conflict for RPAREN resolved using rule 10 (expression -> VAR .)
    COMMA           reduce using rule 15 (func_params -> VAR .)
    RPAREN          reduce using rule 10 (expression -> VAR .)
    ADD             reduce using rule 10 (expression -> VAR .)
    REM             reduce using rule 10 (expression -> VAR .)
    MUL             reduce using rule 10 (expression -> VAR .)
    DIV             reduce using rule 10 (expression -> VAR .)
    MOD             reduce using rule 10 (expression -> VAR .)
    GT              reduce using rule 10 (expression -> VAR .)
    LT              reduce using rule 10 (expression -> VAR .)
    GE              reduce using rule 10 (expression -> VAR .)
    LE              reduce using rule 10 (expression -> VAR .)
    EQ              reduce using rule 10 (expression -> VAR .)
    NE              reduce using rule 10 (expression -> VAR .)
    POW             reduce using rule 10 (expression -> VAR .)
    AND             reduce using rule 10 (expression -> VAR .)
    OR              reduce using rule 10 (expression -> VAR .)

  ! RPAREN          [ reduce using rule 15 (func_params -> VAR .) ]


state 72

    (48) expression -> LPAREN . expression RPAREN
    (35) condition_list -> LPAREN . condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN
    (32) condition_list -> . expression
    (33) condition_list -> . condition_list AND expression
    (34) condition_list -> . condition_list OR expression
    (35) condition_list -> . LPAREN condition_list RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 72

    expression                     shift and go to state 75
    condition_list                 shift and go to state 68

state 73

    (11) stmt -> VAR ASSIGN LPAREN RPAREN . block_format
    (23) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 67

    block_format                   shift and go to state 92

state 74

    (13) stmt -> VAR ASSIGN LPAREN func_params . RPAREN block_format
    (16) func_params -> func_params . COMMA VAR

    RPAREN          shift and go to state 93
    COMMA           shift and go to state 94


state 75

    (48) expression -> LPAREN expression . RPAREN
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression
    (32) condition_list -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 60
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30
    AND             reduce using rule 32 (condition_list -> expression .)
    OR              reduce using rule 32 (condition_list -> expression .)

  ! RPAREN          [ reduce using rule 32 (condition_list -> expression .) ]


state 76

    (26) stmt -> VAR ASSIGN expression SPLIT .

    SPLIT           reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    VAR             reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    FUNC            reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    PRINT           reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    FOR             reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    IF              reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    TRUE            reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    FALSE           reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    NUMBER          reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    STRING          reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    LPAREN          reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    $end            reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)
    END_BLOCK       reduce using rule 26 (stmt -> VAR ASSIGN expression SPLIT .)


state 77

    (27) stmt -> VAR ASSIGN condition_list SPLIT .

    SPLIT           reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    VAR             reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FUNC            reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    PRINT           reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FOR             reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    IF              reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    TRUE            reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FALSE           reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    NUMBER          reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    STRING          reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    LPAREN          reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    $end            reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)
    END_BLOCK       reduce using rule 27 (stmt -> VAR ASSIGN condition_list SPLIT .)


state 78

    (17) stmt -> VAR LPAREN RPAREN SPLIT .

    SPLIT           reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    VAR             reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    FUNC            reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    PRINT           reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    FOR             reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    IF              reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    TRUE            reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    FALSE           reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    NUMBER          reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    STRING          reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    LPAREN          reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    $end            reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)
    END_BLOCK       reduce using rule 17 (stmt -> VAR LPAREN RPAREN SPLIT .)


state 79

    (18) stmt -> VAR LPAREN expr_list RPAREN . SPLIT

    SPLIT           shift and go to state 95


state 80

    (31) expr_list -> expr_list COMMA . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 96

state 81

    (15) func_params -> VAR .

    RPAREN          reduce using rule 15 (func_params -> VAR .)
    COMMA           reduce using rule 15 (func_params -> VAR .)


state 82

    (12) stmt -> FUNC VAR LPAREN RPAREN . block_format
    (23) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 67

    block_format                   shift and go to state 97

state 83

    (14) stmt -> FUNC VAR LPAREN func_params . RPAREN block_format
    (16) func_params -> func_params . COMMA VAR

    RPAREN          shift and go to state 98
    COMMA           shift and go to state 94


state 84

    (19) stmt -> PRINT LPAREN expr_list RPAREN . SPLIT

    SPLIT           shift and go to state 99


state 85

    (20) stmt -> FOR VAR IN range . block_format
    (23) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 67

    block_format                   shift and go to state 100

state 86

    (21) range -> RANGE . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 101


state 87

    (33) condition_list -> condition_list AND expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    AND             reduce using rule 33 (condition_list -> condition_list AND expression .)
    OR              reduce using rule 33 (condition_list -> condition_list AND expression .)
    START_BLOCK     reduce using rule 33 (condition_list -> condition_list AND expression .)
    SPLIT           reduce using rule 33 (condition_list -> condition_list AND expression .)
    RPAREN          reduce using rule 33 (condition_list -> condition_list AND expression .)
    ELSE            reduce using rule 33 (condition_list -> condition_list AND expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 88

    (34) condition_list -> condition_list OR expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    AND             reduce using rule 34 (condition_list -> condition_list OR expression .)
    OR              reduce using rule 34 (condition_list -> condition_list OR expression .)
    START_BLOCK     reduce using rule 34 (condition_list -> condition_list OR expression .)
    SPLIT           reduce using rule 34 (condition_list -> condition_list OR expression .)
    RPAREN          reduce using rule 34 (condition_list -> condition_list OR expression .)
    ELSE            reduce using rule 34 (condition_list -> condition_list OR expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 89

    (23) block_format -> START_BLOCK SPLIT . block END_BLOCK SPLIT
    (24) block -> . stmt
    (25) block -> . block stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . VAR ASSIGN LPAREN RPAREN block_format
    (12) stmt -> . FUNC VAR LPAREN RPAREN block_format
    (13) stmt -> . VAR ASSIGN LPAREN func_params RPAREN block_format
    (14) stmt -> . FUNC VAR LPAREN func_params RPAREN block_format
    (17) stmt -> . VAR LPAREN RPAREN SPLIT
    (18) stmt -> . VAR LPAREN expr_list RPAREN SPLIT
    (19) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (20) stmt -> . FOR VAR IN range block_format
    (22) stmt -> . IF condition_list block_format
    (26) stmt -> . VAR ASSIGN expression SPLIT
    (27) stmt -> . VAR ASSIGN condition_list SPLIT
    (28) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN
    (29) if_assign -> . VAR ASSIGN expression

    SPLIT           shift and go to state 5
    VAR             shift and go to state 7
    FUNC            shift and go to state 9
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 12
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    LPAREN          shift and go to state 8

    block                          shift and go to state 102
    stmt                           shift and go to state 103
    expression                     shift and go to state 6
    if_assign                      shift and go to state 13

state 90

    (35) condition_list -> LPAREN condition_list RPAREN .

    AND             reduce using rule 35 (condition_list -> LPAREN condition_list RPAREN .)
    OR              reduce using rule 35 (condition_list -> LPAREN condition_list RPAREN .)
    START_BLOCK     reduce using rule 35 (condition_list -> LPAREN condition_list RPAREN .)
    SPLIT           reduce using rule 35 (condition_list -> LPAREN condition_list RPAREN .)
    RPAREN          reduce using rule 35 (condition_list -> LPAREN condition_list RPAREN .)
    ELSE            reduce using rule 35 (condition_list -> LPAREN condition_list RPAREN .)


state 91

    (28) stmt -> if_assign IF condition_list ELSE . expression SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expression                     shift and go to state 104

state 92

    (11) stmt -> VAR ASSIGN LPAREN RPAREN block_format .

    SPLIT           reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    VAR             reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FUNC            reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    PRINT           reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FOR             reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    IF              reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    TRUE            reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FALSE           reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    NUMBER          reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    STRING          reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    LPAREN          reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    $end            reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    END_BLOCK       reduce using rule 11 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)


state 93

    (13) stmt -> VAR ASSIGN LPAREN func_params RPAREN . block_format
    (23) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 67

    block_format                   shift and go to state 105

state 94

    (16) func_params -> func_params COMMA . VAR

    VAR             shift and go to state 106


state 95

    (18) stmt -> VAR LPAREN expr_list RPAREN SPLIT .

    SPLIT           reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    VAR             reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    FUNC            reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    PRINT           reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    FOR             reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    IF              reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    TRUE            reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    FALSE           reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    NUMBER          reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    STRING          reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    LPAREN          reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    $end            reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)
    END_BLOCK       reduce using rule 18 (stmt -> VAR LPAREN expr_list RPAREN SPLIT .)


state 96

    (31) expr_list -> expr_list COMMA expression .
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    RPAREN          reduce using rule 31 (expr_list -> expr_list COMMA expression .)
    COMMA           reduce using rule 31 (expr_list -> expr_list COMMA expression .)
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 97

    (12) stmt -> FUNC VAR LPAREN RPAREN block_format .

    SPLIT           reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    VAR             reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FUNC            reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    PRINT           reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FOR             reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    IF              reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    TRUE            reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FALSE           reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    NUMBER          reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    STRING          reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    LPAREN          reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    $end            reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    END_BLOCK       reduce using rule 12 (stmt -> FUNC VAR LPAREN RPAREN block_format .)


state 98

    (14) stmt -> FUNC VAR LPAREN func_params RPAREN . block_format
    (23) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 67

    block_format                   shift and go to state 107

state 99

    (19) stmt -> PRINT LPAREN expr_list RPAREN SPLIT .

    SPLIT           reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    VAR             reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FUNC            reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    PRINT           reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FOR             reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    IF              reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    TRUE            reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FALSE           reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    NUMBER          reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    STRING          reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    LPAREN          reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    $end            reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    END_BLOCK       reduce using rule 19 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)


state 100

    (20) stmt -> FOR VAR IN range block_format .

    SPLIT           reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    VAR             reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    FUNC            reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    PRINT           reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    FOR             reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    IF              reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    TRUE            reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    FALSE           reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    NUMBER          reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    STRING          reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    LPAREN          reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    $end            reduce using rule 20 (stmt -> FOR VAR IN range block_format .)
    END_BLOCK       reduce using rule 20 (stmt -> FOR VAR IN range block_format .)


state 101

    (21) range -> RANGE LPAREN . expr_list RPAREN
    (30) expr_list -> . expression
    (31) expr_list -> . expr_list COMMA expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    VAR             shift and go to state 34
    LPAREN          shift and go to state 8

    expr_list                      shift and go to state 108
    expression                     shift and go to state 59

state 102

    (23) block_format -> START_BLOCK SPLIT block . END_BLOCK SPLIT
    (25) block -> block . stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . VAR ASSIGN LPAREN RPAREN block_format
    (12) stmt -> . FUNC VAR LPAREN RPAREN block_format
    (13) stmt -> . VAR ASSIGN LPAREN func_params RPAREN block_format
    (14) stmt -> . FUNC VAR LPAREN func_params RPAREN block_format
    (17) stmt -> . VAR LPAREN RPAREN SPLIT
    (18) stmt -> . VAR LPAREN expr_list RPAREN SPLIT
    (19) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (20) stmt -> . FOR VAR IN range block_format
    (22) stmt -> . IF condition_list block_format
    (26) stmt -> . VAR ASSIGN expression SPLIT
    (27) stmt -> . VAR ASSIGN condition_list SPLIT
    (28) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (36) expression -> . expression ADD expression
    (37) expression -> . expression REM expression
    (38) expression -> . expression MUL expression
    (39) expression -> . expression DIV expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression LT expression
    (43) expression -> . expression GE expression
    (44) expression -> . expression LE expression
    (45) expression -> . expression EQ expression
    (46) expression -> . expression NE expression
    (47) expression -> . expression POW expression
    (48) expression -> . LPAREN expression RPAREN
    (29) if_assign -> . VAR ASSIGN expression

    END_BLOCK       shift and go to state 109
    SPLIT           shift and go to state 5
    VAR             shift and go to state 7
    FUNC            shift and go to state 9
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 12
    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    NUMBER          shift and go to state 16
    STRING          shift and go to state 17
    LPAREN          shift and go to state 8

    stmt                           shift and go to state 110
    expression                     shift and go to state 6
    if_assign                      shift and go to state 13

state 103

    (24) block -> stmt .

    END_BLOCK       reduce using rule 24 (block -> stmt .)
    SPLIT           reduce using rule 24 (block -> stmt .)
    VAR             reduce using rule 24 (block -> stmt .)
    FUNC            reduce using rule 24 (block -> stmt .)
    PRINT           reduce using rule 24 (block -> stmt .)
    FOR             reduce using rule 24 (block -> stmt .)
    IF              reduce using rule 24 (block -> stmt .)
    TRUE            reduce using rule 24 (block -> stmt .)
    FALSE           reduce using rule 24 (block -> stmt .)
    NUMBER          reduce using rule 24 (block -> stmt .)
    STRING          reduce using rule 24 (block -> stmt .)
    LPAREN          reduce using rule 24 (block -> stmt .)


state 104

    (28) stmt -> if_assign IF condition_list ELSE expression . SPLIT
    (36) expression -> expression . ADD expression
    (37) expression -> expression . REM expression
    (38) expression -> expression . MUL expression
    (39) expression -> expression . DIV expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . LT expression
    (43) expression -> expression . GE expression
    (44) expression -> expression . LE expression
    (45) expression -> expression . EQ expression
    (46) expression -> expression . NE expression
    (47) expression -> expression . POW expression

    SPLIT           shift and go to state 111
    ADD             shift and go to state 19
    REM             shift and go to state 20
    MUL             shift and go to state 21
    DIV             shift and go to state 22
    MOD             shift and go to state 23
    GT              shift and go to state 24
    LT              shift and go to state 25
    GE              shift and go to state 26
    LE              shift and go to state 27
    EQ              shift and go to state 28
    NE              shift and go to state 29
    POW             shift and go to state 30


state 105

    (13) stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .

    SPLIT           reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    VAR             reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FUNC            reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    PRINT           reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FOR             reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    IF              reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    TRUE            reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FALSE           reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    NUMBER          reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    STRING          reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    LPAREN          reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    $end            reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    END_BLOCK       reduce using rule 13 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)


state 106

    (16) func_params -> func_params COMMA VAR .

    RPAREN          reduce using rule 16 (func_params -> func_params COMMA VAR .)
    COMMA           reduce using rule 16 (func_params -> func_params COMMA VAR .)


state 107

    (14) stmt -> FUNC VAR LPAREN func_params RPAREN block_format .

    SPLIT           reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    VAR             reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FUNC            reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    PRINT           reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FOR             reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    IF              reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    TRUE            reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FALSE           reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    NUMBER          reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    STRING          reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    LPAREN          reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    $end            reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    END_BLOCK       reduce using rule 14 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)


state 108

    (21) range -> RANGE LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 112
    COMMA           shift and go to state 80


state 109

    (23) block_format -> START_BLOCK SPLIT block END_BLOCK . SPLIT

    SPLIT           shift and go to state 113


state 110

    (25) block -> block stmt .

    END_BLOCK       reduce using rule 25 (block -> block stmt .)
    SPLIT           reduce using rule 25 (block -> block stmt .)
    VAR             reduce using rule 25 (block -> block stmt .)
    FUNC            reduce using rule 25 (block -> block stmt .)
    PRINT           reduce using rule 25 (block -> block stmt .)
    FOR             reduce using rule 25 (block -> block stmt .)
    IF              reduce using rule 25 (block -> block stmt .)
    TRUE            reduce using rule 25 (block -> block stmt .)
    FALSE           reduce using rule 25 (block -> block stmt .)
    NUMBER          reduce using rule 25 (block -> block stmt .)
    STRING          reduce using rule 25 (block -> block stmt .)
    LPAREN          reduce using rule 25 (block -> block stmt .)


state 111

    (28) stmt -> if_assign IF condition_list ELSE expression SPLIT .

    SPLIT           reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    VAR             reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FUNC            reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    PRINT           reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FOR             reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    IF              reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    TRUE            reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FALSE           reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    NUMBER          reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    STRING          reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    LPAREN          reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    $end            reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    END_BLOCK       reduce using rule 28 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)


state 112

    (21) range -> RANGE LPAREN expr_list RPAREN .

    START_BLOCK     reduce using rule 21 (range -> RANGE LPAREN expr_list RPAREN .)


state 113

    (23) block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .

    SPLIT           reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    VAR             reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FUNC            reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    PRINT           reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FOR             reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    IF              reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    TRUE            reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FALSE           reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    NUMBER          reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    STRING          reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    LPAREN          reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    $end            reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    END_BLOCK       reduce using rule 23 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SPLIT in state 55 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 75 resolved as shift
WARNING: reduce/reduce conflict in state 71 resolved using rule (expression -> VAR)
WARNING: rejected rule (func_params -> VAR) in state 71
