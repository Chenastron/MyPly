Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> entry
Rule 1     entry -> start
Rule 2     start -> start stmt
Rule 3     start -> empty
Rule 4     stmt -> SPLIT
Rule 5     stmt -> expression SPLIT
Rule 6     stmt -> VAR ASSIGN LPAREN RPAREN block_format
Rule 7     stmt -> FUNC VAR LPAREN RPAREN block_format
Rule 8     stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format
Rule 9     stmt -> FUNC VAR LPAREN func_params RPAREN block_format
Rule 10    func_params -> VAR
Rule 11    func_params -> func_params COMMA VAR
Rule 12    expression -> VAR LPAREN RPAREN
Rule 13    expression -> VAR LPAREN expr_list RPAREN
Rule 14    stmt -> RETURN expression SPLIT
Rule 15    stmt -> PRINT LPAREN expr_list RPAREN SPLIT
Rule 16    stmt -> FOR VAR IN range block_format
Rule 17    range -> RANGE LPAREN expr_list RPAREN
Rule 18    stmt -> IF condition_list block_format
Rule 19    stmt -> IF condition_list block_format ELSE block_format
Rule 20    block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT
Rule 21    block -> stmt
Rule 22    block -> block stmt
Rule 23    stmt -> VAR ASSIGN expression SPLIT
Rule 24    stmt -> VAR ASSIGN condition_list SPLIT
Rule 25    stmt -> if_assign IF condition_list ELSE expression SPLIT
Rule 26    if_assign -> VAR ASSIGN expression
Rule 27    expr_list -> expression
Rule 28    expr_list -> expr_list COMMA expression
Rule 29    condition_list -> expression
Rule 30    condition_list -> condition_list AND expression
Rule 31    condition_list -> condition_list OR expression
Rule 32    condition_list -> LPAREN condition_list RPAREN
Rule 33    expression -> expression ADD expression
Rule 34    expression -> expression REM expression
Rule 35    expression -> expression MUL expression
Rule 36    expression -> expression DIV expression
Rule 37    expression -> expression MOD expression
Rule 38    expression -> expression GT expression
Rule 39    expression -> expression LT expression
Rule 40    expression -> expression GE expression
Rule 41    expression -> expression LE expression
Rule 42    expression -> expression EQ expression
Rule 43    expression -> expression NE expression
Rule 44    expression -> expression POW expression
Rule 45    expression -> REM NUMBER
Rule 46    expression -> LPAREN expression RPAREN
Rule 47    expression -> TRUE
Rule 48    expression -> FALSE
Rule 49    expression -> NUMBER
Rule 50    expression -> FLOAT
Rule 51    expression -> STRING
Rule 52    expression -> VAR
Rule 53    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 33
AND                  : 30
ASSIGN               : 6 8 23 24 26
COMMA                : 11 28
DIV                  : 36
ELSE                 : 19 25
END_BLOCK            : 20
EQ                   : 42
FALSE                : 48
FLOAT                : 50
FOR                  : 16
FUNC                 : 7 9
GE                   : 40
GT                   : 38
IF                   : 18 19 25
IN                   : 16
LE                   : 41
LPAREN               : 6 7 8 9 12 13 15 17 32 46
LT                   : 39
MOD                  : 37
MUL                  : 35
NE                   : 43
NUMBER               : 45 49
OR                   : 31
POW                  : 44
PRINT                : 15
RANGE                : 17
REM                  : 34 45
RETURN               : 14
RPAREN               : 6 7 8 9 12 13 15 17 32 46
SPLIT                : 4 5 14 15 20 20 23 24 25
START_BLOCK          : 20
STRING               : 51
TRUE                 : 47
VAR                  : 6 7 8 9 10 11 12 13 16 23 24 26 52
error                : 

Nonterminals, with rules where they appear

block                : 20 22
block_format         : 6 7 8 9 16 18 19 19
condition_list       : 18 19 24 25 30 31 32
empty                : 3
entry                : 0
expr_list            : 13 15 17 28
expression           : 5 14 23 25 26 27 28 29 30 31 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 46
func_params          : 8 9 11
if_assign            : 25
range                : 16
start                : 1 2
stmt                 : 2 21 22

Parsing method: LALR

state 0

    (0) S' -> . entry
    (1) entry -> . start
    (2) start -> . start stmt
    (3) start -> . empty
    (53) empty -> .

    SPLIT           reduce using rule 53 (empty -> .)
    VAR             reduce using rule 53 (empty -> .)
    FUNC            reduce using rule 53 (empty -> .)
    RETURN          reduce using rule 53 (empty -> .)
    PRINT           reduce using rule 53 (empty -> .)
    FOR             reduce using rule 53 (empty -> .)
    IF              reduce using rule 53 (empty -> .)
    REM             reduce using rule 53 (empty -> .)
    LPAREN          reduce using rule 53 (empty -> .)
    TRUE            reduce using rule 53 (empty -> .)
    FALSE           reduce using rule 53 (empty -> .)
    NUMBER          reduce using rule 53 (empty -> .)
    FLOAT           reduce using rule 53 (empty -> .)
    STRING          reduce using rule 53 (empty -> .)
    $end            reduce using rule 53 (empty -> .)

    entry                          shift and go to state 1
    start                          shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> entry .



state 2

    (1) entry -> start .
    (2) start -> start . stmt
    (4) stmt -> . SPLIT
    (5) stmt -> . expression SPLIT
    (6) stmt -> . VAR ASSIGN LPAREN RPAREN block_format
    (7) stmt -> . FUNC VAR LPAREN RPAREN block_format
    (8) stmt -> . VAR ASSIGN LPAREN func_params RPAREN block_format
    (9) stmt -> . FUNC VAR LPAREN func_params RPAREN block_format
    (14) stmt -> . RETURN expression SPLIT
    (15) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (16) stmt -> . FOR VAR IN range block_format
    (18) stmt -> . IF condition_list block_format
    (19) stmt -> . IF condition_list block_format ELSE block_format
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (25) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR
    (26) if_assign -> . VAR ASSIGN expression

    $end            reduce using rule 1 (entry -> start .)
    SPLIT           shift and go to state 5
    VAR             shift and go to state 7
    FUNC            shift and go to state 9
    RETURN          shift and go to state 10
    PRINT           shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 13
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    stmt                           shift and go to state 4
    expression                     shift and go to state 6
    if_assign                      shift and go to state 14

state 3

    (3) start -> empty .

    SPLIT           reduce using rule 3 (start -> empty .)
    VAR             reduce using rule 3 (start -> empty .)
    FUNC            reduce using rule 3 (start -> empty .)
    RETURN          reduce using rule 3 (start -> empty .)
    PRINT           reduce using rule 3 (start -> empty .)
    FOR             reduce using rule 3 (start -> empty .)
    IF              reduce using rule 3 (start -> empty .)
    REM             reduce using rule 3 (start -> empty .)
    LPAREN          reduce using rule 3 (start -> empty .)
    TRUE            reduce using rule 3 (start -> empty .)
    FALSE           reduce using rule 3 (start -> empty .)
    NUMBER          reduce using rule 3 (start -> empty .)
    FLOAT           reduce using rule 3 (start -> empty .)
    STRING          reduce using rule 3 (start -> empty .)
    $end            reduce using rule 3 (start -> empty .)


state 4

    (2) start -> start stmt .

    SPLIT           reduce using rule 2 (start -> start stmt .)
    VAR             reduce using rule 2 (start -> start stmt .)
    FUNC            reduce using rule 2 (start -> start stmt .)
    RETURN          reduce using rule 2 (start -> start stmt .)
    PRINT           reduce using rule 2 (start -> start stmt .)
    FOR             reduce using rule 2 (start -> start stmt .)
    IF              reduce using rule 2 (start -> start stmt .)
    REM             reduce using rule 2 (start -> start stmt .)
    LPAREN          reduce using rule 2 (start -> start stmt .)
    TRUE            reduce using rule 2 (start -> start stmt .)
    FALSE           reduce using rule 2 (start -> start stmt .)
    NUMBER          reduce using rule 2 (start -> start stmt .)
    FLOAT           reduce using rule 2 (start -> start stmt .)
    STRING          reduce using rule 2 (start -> start stmt .)
    $end            reduce using rule 2 (start -> start stmt .)


state 5

    (4) stmt -> SPLIT .

    SPLIT           reduce using rule 4 (stmt -> SPLIT .)
    VAR             reduce using rule 4 (stmt -> SPLIT .)
    FUNC            reduce using rule 4 (stmt -> SPLIT .)
    RETURN          reduce using rule 4 (stmt -> SPLIT .)
    PRINT           reduce using rule 4 (stmt -> SPLIT .)
    FOR             reduce using rule 4 (stmt -> SPLIT .)
    IF              reduce using rule 4 (stmt -> SPLIT .)
    REM             reduce using rule 4 (stmt -> SPLIT .)
    LPAREN          reduce using rule 4 (stmt -> SPLIT .)
    TRUE            reduce using rule 4 (stmt -> SPLIT .)
    FALSE           reduce using rule 4 (stmt -> SPLIT .)
    NUMBER          reduce using rule 4 (stmt -> SPLIT .)
    FLOAT           reduce using rule 4 (stmt -> SPLIT .)
    STRING          reduce using rule 4 (stmt -> SPLIT .)
    $end            reduce using rule 4 (stmt -> SPLIT .)
    END_BLOCK       reduce using rule 4 (stmt -> SPLIT .)


state 6

    (5) stmt -> expression . SPLIT
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           shift and go to state 21
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 7

    (6) stmt -> VAR . ASSIGN LPAREN RPAREN block_format
    (8) stmt -> VAR . ASSIGN LPAREN func_params RPAREN block_format
    (23) stmt -> VAR . ASSIGN expression SPLIT
    (24) stmt -> VAR . ASSIGN condition_list SPLIT
    (12) expression -> VAR . LPAREN RPAREN
    (13) expression -> VAR . LPAREN expr_list RPAREN
    (52) expression -> VAR .
    (26) if_assign -> VAR . ASSIGN expression

    ASSIGN          shift and go to state 34
    LPAREN          shift and go to state 35
    SPLIT           reduce using rule 52 (expression -> VAR .)
    ADD             reduce using rule 52 (expression -> VAR .)
    REM             reduce using rule 52 (expression -> VAR .)
    MUL             reduce using rule 52 (expression -> VAR .)
    DIV             reduce using rule 52 (expression -> VAR .)
    MOD             reduce using rule 52 (expression -> VAR .)
    GT              reduce using rule 52 (expression -> VAR .)
    LT              reduce using rule 52 (expression -> VAR .)
    GE              reduce using rule 52 (expression -> VAR .)
    LE              reduce using rule 52 (expression -> VAR .)
    EQ              reduce using rule 52 (expression -> VAR .)
    NE              reduce using rule 52 (expression -> VAR .)
    POW             reduce using rule 52 (expression -> VAR .)


state 8

    (46) expression -> LPAREN . expression RPAREN
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 36

state 9

    (7) stmt -> FUNC . VAR LPAREN RPAREN block_format
    (9) stmt -> FUNC . VAR LPAREN func_params RPAREN block_format

    VAR             shift and go to state 38


state 10

    (14) stmt -> RETURN . expression SPLIT
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 39

state 11

    (15) stmt -> PRINT . LPAREN expr_list RPAREN SPLIT

    LPAREN          shift and go to state 40


state 12

    (16) stmt -> FOR . VAR IN range block_format

    VAR             shift and go to state 41


state 13

    (18) stmt -> IF . condition_list block_format
    (19) stmt -> IF . condition_list block_format ELSE block_format
    (29) condition_list -> . expression
    (30) condition_list -> . condition_list AND expression
    (31) condition_list -> . condition_list OR expression
    (32) condition_list -> . LPAREN condition_list RPAREN
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    LPAREN          shift and go to state 44
    VAR             shift and go to state 37
    REM             shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    condition_list                 shift and go to state 42
    expression                     shift and go to state 43

state 14

    (25) stmt -> if_assign . IF condition_list ELSE expression SPLIT

    IF              shift and go to state 45


state 15

    (45) expression -> REM . NUMBER

    NUMBER          shift and go to state 46


state 16

    (49) expression -> NUMBER .

    SPLIT           reduce using rule 49 (expression -> NUMBER .)
    ADD             reduce using rule 49 (expression -> NUMBER .)
    REM             reduce using rule 49 (expression -> NUMBER .)
    MUL             reduce using rule 49 (expression -> NUMBER .)
    DIV             reduce using rule 49 (expression -> NUMBER .)
    MOD             reduce using rule 49 (expression -> NUMBER .)
    GT              reduce using rule 49 (expression -> NUMBER .)
    LT              reduce using rule 49 (expression -> NUMBER .)
    GE              reduce using rule 49 (expression -> NUMBER .)
    LE              reduce using rule 49 (expression -> NUMBER .)
    EQ              reduce using rule 49 (expression -> NUMBER .)
    NE              reduce using rule 49 (expression -> NUMBER .)
    POW             reduce using rule 49 (expression -> NUMBER .)
    RPAREN          reduce using rule 49 (expression -> NUMBER .)
    AND             reduce using rule 49 (expression -> NUMBER .)
    OR              reduce using rule 49 (expression -> NUMBER .)
    START_BLOCK     reduce using rule 49 (expression -> NUMBER .)
    IF              reduce using rule 49 (expression -> NUMBER .)
    COMMA           reduce using rule 49 (expression -> NUMBER .)
    ELSE            reduce using rule 49 (expression -> NUMBER .)


state 17

    (47) expression -> TRUE .

    SPLIT           reduce using rule 47 (expression -> TRUE .)
    ADD             reduce using rule 47 (expression -> TRUE .)
    REM             reduce using rule 47 (expression -> TRUE .)
    MUL             reduce using rule 47 (expression -> TRUE .)
    DIV             reduce using rule 47 (expression -> TRUE .)
    MOD             reduce using rule 47 (expression -> TRUE .)
    GT              reduce using rule 47 (expression -> TRUE .)
    LT              reduce using rule 47 (expression -> TRUE .)
    GE              reduce using rule 47 (expression -> TRUE .)
    LE              reduce using rule 47 (expression -> TRUE .)
    EQ              reduce using rule 47 (expression -> TRUE .)
    NE              reduce using rule 47 (expression -> TRUE .)
    POW             reduce using rule 47 (expression -> TRUE .)
    RPAREN          reduce using rule 47 (expression -> TRUE .)
    AND             reduce using rule 47 (expression -> TRUE .)
    OR              reduce using rule 47 (expression -> TRUE .)
    START_BLOCK     reduce using rule 47 (expression -> TRUE .)
    IF              reduce using rule 47 (expression -> TRUE .)
    COMMA           reduce using rule 47 (expression -> TRUE .)
    ELSE            reduce using rule 47 (expression -> TRUE .)


state 18

    (48) expression -> FALSE .

    SPLIT           reduce using rule 48 (expression -> FALSE .)
    ADD             reduce using rule 48 (expression -> FALSE .)
    REM             reduce using rule 48 (expression -> FALSE .)
    MUL             reduce using rule 48 (expression -> FALSE .)
    DIV             reduce using rule 48 (expression -> FALSE .)
    MOD             reduce using rule 48 (expression -> FALSE .)
    GT              reduce using rule 48 (expression -> FALSE .)
    LT              reduce using rule 48 (expression -> FALSE .)
    GE              reduce using rule 48 (expression -> FALSE .)
    LE              reduce using rule 48 (expression -> FALSE .)
    EQ              reduce using rule 48 (expression -> FALSE .)
    NE              reduce using rule 48 (expression -> FALSE .)
    POW             reduce using rule 48 (expression -> FALSE .)
    RPAREN          reduce using rule 48 (expression -> FALSE .)
    AND             reduce using rule 48 (expression -> FALSE .)
    OR              reduce using rule 48 (expression -> FALSE .)
    START_BLOCK     reduce using rule 48 (expression -> FALSE .)
    IF              reduce using rule 48 (expression -> FALSE .)
    COMMA           reduce using rule 48 (expression -> FALSE .)
    ELSE            reduce using rule 48 (expression -> FALSE .)


state 19

    (50) expression -> FLOAT .

    SPLIT           reduce using rule 50 (expression -> FLOAT .)
    ADD             reduce using rule 50 (expression -> FLOAT .)
    REM             reduce using rule 50 (expression -> FLOAT .)
    MUL             reduce using rule 50 (expression -> FLOAT .)
    DIV             reduce using rule 50 (expression -> FLOAT .)
    MOD             reduce using rule 50 (expression -> FLOAT .)
    GT              reduce using rule 50 (expression -> FLOAT .)
    LT              reduce using rule 50 (expression -> FLOAT .)
    GE              reduce using rule 50 (expression -> FLOAT .)
    LE              reduce using rule 50 (expression -> FLOAT .)
    EQ              reduce using rule 50 (expression -> FLOAT .)
    NE              reduce using rule 50 (expression -> FLOAT .)
    POW             reduce using rule 50 (expression -> FLOAT .)
    RPAREN          reduce using rule 50 (expression -> FLOAT .)
    AND             reduce using rule 50 (expression -> FLOAT .)
    OR              reduce using rule 50 (expression -> FLOAT .)
    START_BLOCK     reduce using rule 50 (expression -> FLOAT .)
    IF              reduce using rule 50 (expression -> FLOAT .)
    COMMA           reduce using rule 50 (expression -> FLOAT .)
    ELSE            reduce using rule 50 (expression -> FLOAT .)


state 20

    (51) expression -> STRING .

    SPLIT           reduce using rule 51 (expression -> STRING .)
    ADD             reduce using rule 51 (expression -> STRING .)
    REM             reduce using rule 51 (expression -> STRING .)
    MUL             reduce using rule 51 (expression -> STRING .)
    DIV             reduce using rule 51 (expression -> STRING .)
    MOD             reduce using rule 51 (expression -> STRING .)
    GT              reduce using rule 51 (expression -> STRING .)
    LT              reduce using rule 51 (expression -> STRING .)
    GE              reduce using rule 51 (expression -> STRING .)
    LE              reduce using rule 51 (expression -> STRING .)
    EQ              reduce using rule 51 (expression -> STRING .)
    NE              reduce using rule 51 (expression -> STRING .)
    POW             reduce using rule 51 (expression -> STRING .)
    RPAREN          reduce using rule 51 (expression -> STRING .)
    AND             reduce using rule 51 (expression -> STRING .)
    OR              reduce using rule 51 (expression -> STRING .)
    START_BLOCK     reduce using rule 51 (expression -> STRING .)
    IF              reduce using rule 51 (expression -> STRING .)
    COMMA           reduce using rule 51 (expression -> STRING .)
    ELSE            reduce using rule 51 (expression -> STRING .)


state 21

    (5) stmt -> expression SPLIT .

    SPLIT           reduce using rule 5 (stmt -> expression SPLIT .)
    VAR             reduce using rule 5 (stmt -> expression SPLIT .)
    FUNC            reduce using rule 5 (stmt -> expression SPLIT .)
    RETURN          reduce using rule 5 (stmt -> expression SPLIT .)
    PRINT           reduce using rule 5 (stmt -> expression SPLIT .)
    FOR             reduce using rule 5 (stmt -> expression SPLIT .)
    IF              reduce using rule 5 (stmt -> expression SPLIT .)
    REM             reduce using rule 5 (stmt -> expression SPLIT .)
    LPAREN          reduce using rule 5 (stmt -> expression SPLIT .)
    TRUE            reduce using rule 5 (stmt -> expression SPLIT .)
    FALSE           reduce using rule 5 (stmt -> expression SPLIT .)
    NUMBER          reduce using rule 5 (stmt -> expression SPLIT .)
    FLOAT           reduce using rule 5 (stmt -> expression SPLIT .)
    STRING          reduce using rule 5 (stmt -> expression SPLIT .)
    $end            reduce using rule 5 (stmt -> expression SPLIT .)
    END_BLOCK       reduce using rule 5 (stmt -> expression SPLIT .)


state 22

    (33) expression -> expression ADD . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 47

state 23

    (34) expression -> expression REM . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 48

state 24

    (35) expression -> expression MUL . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 49

state 25

    (36) expression -> expression DIV . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 50

state 26

    (37) expression -> expression MOD . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 51

state 27

    (38) expression -> expression GT . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 52

state 28

    (39) expression -> expression LT . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 53

state 29

    (40) expression -> expression GE . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 54

state 30

    (41) expression -> expression LE . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 55

state 31

    (42) expression -> expression EQ . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 56

state 32

    (43) expression -> expression NE . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 57

state 33

    (44) expression -> expression POW . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 58

state 34

    (6) stmt -> VAR ASSIGN . LPAREN RPAREN block_format
    (8) stmt -> VAR ASSIGN . LPAREN func_params RPAREN block_format
    (23) stmt -> VAR ASSIGN . expression SPLIT
    (24) stmt -> VAR ASSIGN . condition_list SPLIT
    (26) if_assign -> VAR ASSIGN . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR
    (29) condition_list -> . expression
    (30) condition_list -> . condition_list AND expression
    (31) condition_list -> . condition_list OR expression
    (32) condition_list -> . LPAREN condition_list RPAREN

    LPAREN          shift and go to state 59
    VAR             shift and go to state 37
    REM             shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 60
    condition_list                 shift and go to state 61

state 35

    (12) expression -> VAR LPAREN . RPAREN
    (13) expression -> VAR LPAREN . expr_list RPAREN
    (27) expr_list -> . expression
    (28) expr_list -> . expr_list COMMA expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    RPAREN          shift and go to state 62
    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expr_list                      shift and go to state 63
    expression                     shift and go to state 64

state 36

    (46) expression -> LPAREN expression . RPAREN
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    RPAREN          shift and go to state 65
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 37

    (12) expression -> VAR . LPAREN RPAREN
    (13) expression -> VAR . LPAREN expr_list RPAREN
    (52) expression -> VAR .

    LPAREN          shift and go to state 35
    RPAREN          reduce using rule 52 (expression -> VAR .)
    ADD             reduce using rule 52 (expression -> VAR .)
    REM             reduce using rule 52 (expression -> VAR .)
    MUL             reduce using rule 52 (expression -> VAR .)
    DIV             reduce using rule 52 (expression -> VAR .)
    MOD             reduce using rule 52 (expression -> VAR .)
    GT              reduce using rule 52 (expression -> VAR .)
    LT              reduce using rule 52 (expression -> VAR .)
    GE              reduce using rule 52 (expression -> VAR .)
    LE              reduce using rule 52 (expression -> VAR .)
    EQ              reduce using rule 52 (expression -> VAR .)
    NE              reduce using rule 52 (expression -> VAR .)
    POW             reduce using rule 52 (expression -> VAR .)
    SPLIT           reduce using rule 52 (expression -> VAR .)
    AND             reduce using rule 52 (expression -> VAR .)
    OR              reduce using rule 52 (expression -> VAR .)
    START_BLOCK     reduce using rule 52 (expression -> VAR .)
    IF              reduce using rule 52 (expression -> VAR .)
    COMMA           reduce using rule 52 (expression -> VAR .)
    ELSE            reduce using rule 52 (expression -> VAR .)


state 38

    (7) stmt -> FUNC VAR . LPAREN RPAREN block_format
    (9) stmt -> FUNC VAR . LPAREN func_params RPAREN block_format

    LPAREN          shift and go to state 66


state 39

    (14) stmt -> RETURN expression . SPLIT
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           shift and go to state 67
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 40

    (15) stmt -> PRINT LPAREN . expr_list RPAREN SPLIT
    (27) expr_list -> . expression
    (28) expr_list -> . expr_list COMMA expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expr_list                      shift and go to state 68
    expression                     shift and go to state 64

state 41

    (16) stmt -> FOR VAR . IN range block_format

    IN              shift and go to state 69


state 42

    (18) stmt -> IF condition_list . block_format
    (19) stmt -> IF condition_list . block_format ELSE block_format
    (30) condition_list -> condition_list . AND expression
    (31) condition_list -> condition_list . OR expression
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    AND             shift and go to state 71
    OR              shift and go to state 72
    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 70

state 43

    (29) condition_list -> expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    AND             reduce using rule 29 (condition_list -> expression .)
    OR              reduce using rule 29 (condition_list -> expression .)
    START_BLOCK     reduce using rule 29 (condition_list -> expression .)
    ELSE            reduce using rule 29 (condition_list -> expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 44

    (32) condition_list -> LPAREN . condition_list RPAREN
    (46) expression -> LPAREN . expression RPAREN
    (29) condition_list -> . expression
    (30) condition_list -> . condition_list AND expression
    (31) condition_list -> . condition_list OR expression
    (32) condition_list -> . LPAREN condition_list RPAREN
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    LPAREN          shift and go to state 44
    VAR             shift and go to state 37
    REM             shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    condition_list                 shift and go to state 74
    expression                     shift and go to state 75

state 45

    (25) stmt -> if_assign IF . condition_list ELSE expression SPLIT
    (29) condition_list -> . expression
    (30) condition_list -> . condition_list AND expression
    (31) condition_list -> . condition_list OR expression
    (32) condition_list -> . LPAREN condition_list RPAREN
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    LPAREN          shift and go to state 44
    VAR             shift and go to state 37
    REM             shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    condition_list                 shift and go to state 76
    expression                     shift and go to state 43

state 46

    (45) expression -> REM NUMBER .

    SPLIT           reduce using rule 45 (expression -> REM NUMBER .)
    ADD             reduce using rule 45 (expression -> REM NUMBER .)
    REM             reduce using rule 45 (expression -> REM NUMBER .)
    MUL             reduce using rule 45 (expression -> REM NUMBER .)
    DIV             reduce using rule 45 (expression -> REM NUMBER .)
    MOD             reduce using rule 45 (expression -> REM NUMBER .)
    GT              reduce using rule 45 (expression -> REM NUMBER .)
    LT              reduce using rule 45 (expression -> REM NUMBER .)
    GE              reduce using rule 45 (expression -> REM NUMBER .)
    LE              reduce using rule 45 (expression -> REM NUMBER .)
    EQ              reduce using rule 45 (expression -> REM NUMBER .)
    NE              reduce using rule 45 (expression -> REM NUMBER .)
    POW             reduce using rule 45 (expression -> REM NUMBER .)
    RPAREN          reduce using rule 45 (expression -> REM NUMBER .)
    AND             reduce using rule 45 (expression -> REM NUMBER .)
    OR              reduce using rule 45 (expression -> REM NUMBER .)
    START_BLOCK     reduce using rule 45 (expression -> REM NUMBER .)
    IF              reduce using rule 45 (expression -> REM NUMBER .)
    COMMA           reduce using rule 45 (expression -> REM NUMBER .)
    ELSE            reduce using rule 45 (expression -> REM NUMBER .)


state 47

    (33) expression -> expression ADD expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 33 (expression -> expression ADD expression .)
    ADD             reduce using rule 33 (expression -> expression ADD expression .)
    REM             reduce using rule 33 (expression -> expression ADD expression .)
    GT              reduce using rule 33 (expression -> expression ADD expression .)
    LT              reduce using rule 33 (expression -> expression ADD expression .)
    GE              reduce using rule 33 (expression -> expression ADD expression .)
    LE              reduce using rule 33 (expression -> expression ADD expression .)
    EQ              reduce using rule 33 (expression -> expression ADD expression .)
    NE              reduce using rule 33 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 33 (expression -> expression ADD expression .)
    AND             reduce using rule 33 (expression -> expression ADD expression .)
    OR              reduce using rule 33 (expression -> expression ADD expression .)
    START_BLOCK     reduce using rule 33 (expression -> expression ADD expression .)
    IF              reduce using rule 33 (expression -> expression ADD expression .)
    COMMA           reduce using rule 33 (expression -> expression ADD expression .)
    ELSE            reduce using rule 33 (expression -> expression ADD expression .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! MUL             [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! MOD             [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! POW             [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 22 ]
  ! REM             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 48

    (34) expression -> expression REM expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 34 (expression -> expression REM expression .)
    ADD             reduce using rule 34 (expression -> expression REM expression .)
    REM             reduce using rule 34 (expression -> expression REM expression .)
    GT              reduce using rule 34 (expression -> expression REM expression .)
    LT              reduce using rule 34 (expression -> expression REM expression .)
    GE              reduce using rule 34 (expression -> expression REM expression .)
    LE              reduce using rule 34 (expression -> expression REM expression .)
    EQ              reduce using rule 34 (expression -> expression REM expression .)
    NE              reduce using rule 34 (expression -> expression REM expression .)
    RPAREN          reduce using rule 34 (expression -> expression REM expression .)
    AND             reduce using rule 34 (expression -> expression REM expression .)
    OR              reduce using rule 34 (expression -> expression REM expression .)
    START_BLOCK     reduce using rule 34 (expression -> expression REM expression .)
    IF              reduce using rule 34 (expression -> expression REM expression .)
    COMMA           reduce using rule 34 (expression -> expression REM expression .)
    ELSE            reduce using rule 34 (expression -> expression REM expression .)
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! MUL             [ reduce using rule 34 (expression -> expression REM expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression REM expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> expression REM expression .) ]
  ! POW             [ reduce using rule 34 (expression -> expression REM expression .) ]
  ! ADD             [ shift and go to state 22 ]
  ! REM             [ shift and go to state 23 ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 49

    (35) expression -> expression MUL expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 35 (expression -> expression MUL expression .)
    ADD             reduce using rule 35 (expression -> expression MUL expression .)
    REM             reduce using rule 35 (expression -> expression MUL expression .)
    MUL             reduce using rule 35 (expression -> expression MUL expression .)
    DIV             reduce using rule 35 (expression -> expression MUL expression .)
    MOD             reduce using rule 35 (expression -> expression MUL expression .)
    GT              reduce using rule 35 (expression -> expression MUL expression .)
    LT              reduce using rule 35 (expression -> expression MUL expression .)
    GE              reduce using rule 35 (expression -> expression MUL expression .)
    LE              reduce using rule 35 (expression -> expression MUL expression .)
    EQ              reduce using rule 35 (expression -> expression MUL expression .)
    NE              reduce using rule 35 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 35 (expression -> expression MUL expression .)
    AND             reduce using rule 35 (expression -> expression MUL expression .)
    OR              reduce using rule 35 (expression -> expression MUL expression .)
    START_BLOCK     reduce using rule 35 (expression -> expression MUL expression .)
    IF              reduce using rule 35 (expression -> expression MUL expression .)
    COMMA           reduce using rule 35 (expression -> expression MUL expression .)
    ELSE            reduce using rule 35 (expression -> expression MUL expression .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 35 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 22 ]
  ! REM             [ shift and go to state 23 ]
  ! MUL             [ shift and go to state 24 ]
  ! DIV             [ shift and go to state 25 ]
  ! MOD             [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 50

    (36) expression -> expression DIV expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 36 (expression -> expression DIV expression .)
    ADD             reduce using rule 36 (expression -> expression DIV expression .)
    REM             reduce using rule 36 (expression -> expression DIV expression .)
    MUL             reduce using rule 36 (expression -> expression DIV expression .)
    DIV             reduce using rule 36 (expression -> expression DIV expression .)
    MOD             reduce using rule 36 (expression -> expression DIV expression .)
    GT              reduce using rule 36 (expression -> expression DIV expression .)
    LT              reduce using rule 36 (expression -> expression DIV expression .)
    GE              reduce using rule 36 (expression -> expression DIV expression .)
    LE              reduce using rule 36 (expression -> expression DIV expression .)
    EQ              reduce using rule 36 (expression -> expression DIV expression .)
    NE              reduce using rule 36 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 36 (expression -> expression DIV expression .)
    AND             reduce using rule 36 (expression -> expression DIV expression .)
    OR              reduce using rule 36 (expression -> expression DIV expression .)
    START_BLOCK     reduce using rule 36 (expression -> expression DIV expression .)
    IF              reduce using rule 36 (expression -> expression DIV expression .)
    COMMA           reduce using rule 36 (expression -> expression DIV expression .)
    ELSE            reduce using rule 36 (expression -> expression DIV expression .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 36 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 22 ]
  ! REM             [ shift and go to state 23 ]
  ! MUL             [ shift and go to state 24 ]
  ! DIV             [ shift and go to state 25 ]
  ! MOD             [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 51

    (37) expression -> expression MOD expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 37 (expression -> expression MOD expression .)
    ADD             reduce using rule 37 (expression -> expression MOD expression .)
    REM             reduce using rule 37 (expression -> expression MOD expression .)
    MUL             reduce using rule 37 (expression -> expression MOD expression .)
    DIV             reduce using rule 37 (expression -> expression MOD expression .)
    MOD             reduce using rule 37 (expression -> expression MOD expression .)
    GT              reduce using rule 37 (expression -> expression MOD expression .)
    LT              reduce using rule 37 (expression -> expression MOD expression .)
    GE              reduce using rule 37 (expression -> expression MOD expression .)
    LE              reduce using rule 37 (expression -> expression MOD expression .)
    EQ              reduce using rule 37 (expression -> expression MOD expression .)
    NE              reduce using rule 37 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 37 (expression -> expression MOD expression .)
    AND             reduce using rule 37 (expression -> expression MOD expression .)
    OR              reduce using rule 37 (expression -> expression MOD expression .)
    START_BLOCK     reduce using rule 37 (expression -> expression MOD expression .)
    IF              reduce using rule 37 (expression -> expression MOD expression .)
    COMMA           reduce using rule 37 (expression -> expression MOD expression .)
    ELSE            reduce using rule 37 (expression -> expression MOD expression .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! ADD             [ shift and go to state 22 ]
  ! REM             [ shift and go to state 23 ]
  ! MUL             [ shift and go to state 24 ]
  ! DIV             [ shift and go to state 25 ]
  ! MOD             [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 52

    (38) expression -> expression GT expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 38 (expression -> expression GT expression .)
    GT              reduce using rule 38 (expression -> expression GT expression .)
    LT              reduce using rule 38 (expression -> expression GT expression .)
    GE              reduce using rule 38 (expression -> expression GT expression .)
    LE              reduce using rule 38 (expression -> expression GT expression .)
    EQ              reduce using rule 38 (expression -> expression GT expression .)
    NE              reduce using rule 38 (expression -> expression GT expression .)
    RPAREN          reduce using rule 38 (expression -> expression GT expression .)
    AND             reduce using rule 38 (expression -> expression GT expression .)
    OR              reduce using rule 38 (expression -> expression GT expression .)
    START_BLOCK     reduce using rule 38 (expression -> expression GT expression .)
    IF              reduce using rule 38 (expression -> expression GT expression .)
    COMMA           reduce using rule 38 (expression -> expression GT expression .)
    ELSE            reduce using rule 38 (expression -> expression GT expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! ADD             [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! REM             [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! POW             [ reduce using rule 38 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 53

    (39) expression -> expression LT expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 39 (expression -> expression LT expression .)
    GT              reduce using rule 39 (expression -> expression LT expression .)
    LT              reduce using rule 39 (expression -> expression LT expression .)
    GE              reduce using rule 39 (expression -> expression LT expression .)
    LE              reduce using rule 39 (expression -> expression LT expression .)
    EQ              reduce using rule 39 (expression -> expression LT expression .)
    NE              reduce using rule 39 (expression -> expression LT expression .)
    RPAREN          reduce using rule 39 (expression -> expression LT expression .)
    AND             reduce using rule 39 (expression -> expression LT expression .)
    OR              reduce using rule 39 (expression -> expression LT expression .)
    START_BLOCK     reduce using rule 39 (expression -> expression LT expression .)
    IF              reduce using rule 39 (expression -> expression LT expression .)
    COMMA           reduce using rule 39 (expression -> expression LT expression .)
    ELSE            reduce using rule 39 (expression -> expression LT expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! ADD             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! REM             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! POW             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 54

    (40) expression -> expression GE expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 40 (expression -> expression GE expression .)
    GT              reduce using rule 40 (expression -> expression GE expression .)
    LT              reduce using rule 40 (expression -> expression GE expression .)
    GE              reduce using rule 40 (expression -> expression GE expression .)
    LE              reduce using rule 40 (expression -> expression GE expression .)
    EQ              reduce using rule 40 (expression -> expression GE expression .)
    NE              reduce using rule 40 (expression -> expression GE expression .)
    RPAREN          reduce using rule 40 (expression -> expression GE expression .)
    AND             reduce using rule 40 (expression -> expression GE expression .)
    OR              reduce using rule 40 (expression -> expression GE expression .)
    START_BLOCK     reduce using rule 40 (expression -> expression GE expression .)
    IF              reduce using rule 40 (expression -> expression GE expression .)
    COMMA           reduce using rule 40 (expression -> expression GE expression .)
    ELSE            reduce using rule 40 (expression -> expression GE expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! ADD             [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! REM             [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! MUL             [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! POW             [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 55

    (41) expression -> expression LE expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 41 (expression -> expression LE expression .)
    GT              reduce using rule 41 (expression -> expression LE expression .)
    LT              reduce using rule 41 (expression -> expression LE expression .)
    GE              reduce using rule 41 (expression -> expression LE expression .)
    LE              reduce using rule 41 (expression -> expression LE expression .)
    EQ              reduce using rule 41 (expression -> expression LE expression .)
    NE              reduce using rule 41 (expression -> expression LE expression .)
    RPAREN          reduce using rule 41 (expression -> expression LE expression .)
    AND             reduce using rule 41 (expression -> expression LE expression .)
    OR              reduce using rule 41 (expression -> expression LE expression .)
    START_BLOCK     reduce using rule 41 (expression -> expression LE expression .)
    IF              reduce using rule 41 (expression -> expression LE expression .)
    COMMA           reduce using rule 41 (expression -> expression LE expression .)
    ELSE            reduce using rule 41 (expression -> expression LE expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! ADD             [ reduce using rule 41 (expression -> expression LE expression .) ]
  ! REM             [ reduce using rule 41 (expression -> expression LE expression .) ]
  ! MUL             [ reduce using rule 41 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 41 (expression -> expression LE expression .) ]
  ! POW             [ reduce using rule 41 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 56

    (42) expression -> expression EQ expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 42 (expression -> expression EQ expression .)
    GT              reduce using rule 42 (expression -> expression EQ expression .)
    LT              reduce using rule 42 (expression -> expression EQ expression .)
    GE              reduce using rule 42 (expression -> expression EQ expression .)
    LE              reduce using rule 42 (expression -> expression EQ expression .)
    EQ              reduce using rule 42 (expression -> expression EQ expression .)
    NE              reduce using rule 42 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 42 (expression -> expression EQ expression .)
    AND             reduce using rule 42 (expression -> expression EQ expression .)
    OR              reduce using rule 42 (expression -> expression EQ expression .)
    START_BLOCK     reduce using rule 42 (expression -> expression EQ expression .)
    IF              reduce using rule 42 (expression -> expression EQ expression .)
    COMMA           reduce using rule 42 (expression -> expression EQ expression .)
    ELSE            reduce using rule 42 (expression -> expression EQ expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! ADD             [ reduce using rule 42 (expression -> expression EQ expression .) ]
  ! REM             [ reduce using rule 42 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 42 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 42 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 42 (expression -> expression EQ expression .) ]
  ! POW             [ reduce using rule 42 (expression -> expression EQ expression .) ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 57

    (43) expression -> expression NE expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 43 (expression -> expression NE expression .)
    GT              reduce using rule 43 (expression -> expression NE expression .)
    LT              reduce using rule 43 (expression -> expression NE expression .)
    GE              reduce using rule 43 (expression -> expression NE expression .)
    LE              reduce using rule 43 (expression -> expression NE expression .)
    EQ              reduce using rule 43 (expression -> expression NE expression .)
    NE              reduce using rule 43 (expression -> expression NE expression .)
    RPAREN          reduce using rule 43 (expression -> expression NE expression .)
    AND             reduce using rule 43 (expression -> expression NE expression .)
    OR              reduce using rule 43 (expression -> expression NE expression .)
    START_BLOCK     reduce using rule 43 (expression -> expression NE expression .)
    IF              reduce using rule 43 (expression -> expression NE expression .)
    COMMA           reduce using rule 43 (expression -> expression NE expression .)
    ELSE            reduce using rule 43 (expression -> expression NE expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    POW             shift and go to state 33

  ! ADD             [ reduce using rule 43 (expression -> expression NE expression .) ]
  ! REM             [ reduce using rule 43 (expression -> expression NE expression .) ]
  ! MUL             [ reduce using rule 43 (expression -> expression NE expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression NE expression .) ]
  ! POW             [ reduce using rule 43 (expression -> expression NE expression .) ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]


state 58

    (44) expression -> expression POW expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           reduce using rule 44 (expression -> expression POW expression .)
    ADD             reduce using rule 44 (expression -> expression POW expression .)
    REM             reduce using rule 44 (expression -> expression POW expression .)
    MUL             reduce using rule 44 (expression -> expression POW expression .)
    DIV             reduce using rule 44 (expression -> expression POW expression .)
    MOD             reduce using rule 44 (expression -> expression POW expression .)
    GT              reduce using rule 44 (expression -> expression POW expression .)
    LT              reduce using rule 44 (expression -> expression POW expression .)
    GE              reduce using rule 44 (expression -> expression POW expression .)
    LE              reduce using rule 44 (expression -> expression POW expression .)
    EQ              reduce using rule 44 (expression -> expression POW expression .)
    NE              reduce using rule 44 (expression -> expression POW expression .)
    POW             reduce using rule 44 (expression -> expression POW expression .)
    RPAREN          reduce using rule 44 (expression -> expression POW expression .)
    AND             reduce using rule 44 (expression -> expression POW expression .)
    OR              reduce using rule 44 (expression -> expression POW expression .)
    START_BLOCK     reduce using rule 44 (expression -> expression POW expression .)
    IF              reduce using rule 44 (expression -> expression POW expression .)
    COMMA           reduce using rule 44 (expression -> expression POW expression .)
    ELSE            reduce using rule 44 (expression -> expression POW expression .)

  ! ADD             [ shift and go to state 22 ]
  ! REM             [ shift and go to state 23 ]
  ! MUL             [ shift and go to state 24 ]
  ! DIV             [ shift and go to state 25 ]
  ! MOD             [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! GE              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 30 ]
  ! EQ              [ shift and go to state 31 ]
  ! NE              [ shift and go to state 32 ]
  ! POW             [ shift and go to state 33 ]


state 59

    (6) stmt -> VAR ASSIGN LPAREN . RPAREN block_format
    (8) stmt -> VAR ASSIGN LPAREN . func_params RPAREN block_format
    (46) expression -> LPAREN . expression RPAREN
    (32) condition_list -> LPAREN . condition_list RPAREN
    (10) func_params -> . VAR
    (11) func_params -> . func_params COMMA VAR
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR
    (29) condition_list -> . expression
    (30) condition_list -> . condition_list AND expression
    (31) condition_list -> . condition_list OR expression
    (32) condition_list -> . LPAREN condition_list RPAREN

    RPAREN          shift and go to state 79
    VAR             shift and go to state 77
    REM             shift and go to state 15
    LPAREN          shift and go to state 78
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    func_params                    shift and go to state 80
    expression                     shift and go to state 81
    condition_list                 shift and go to state 74

state 60

    (23) stmt -> VAR ASSIGN expression . SPLIT
    (26) if_assign -> VAR ASSIGN expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression
    (29) condition_list -> expression .

  ! shift/reduce conflict for SPLIT resolved as shift
    SPLIT           shift and go to state 82
    IF              reduce using rule 26 (if_assign -> VAR ASSIGN expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33
    AND             reduce using rule 29 (condition_list -> expression .)
    OR              reduce using rule 29 (condition_list -> expression .)

  ! SPLIT           [ reduce using rule 29 (condition_list -> expression .) ]


state 61

    (24) stmt -> VAR ASSIGN condition_list . SPLIT
    (30) condition_list -> condition_list . AND expression
    (31) condition_list -> condition_list . OR expression

    SPLIT           shift and go to state 83
    AND             shift and go to state 71
    OR              shift and go to state 72


state 62

    (12) expression -> VAR LPAREN RPAREN .

    SPLIT           reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    ADD             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    REM             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    MUL             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    DIV             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    MOD             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    GT              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    LT              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    GE              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    LE              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    EQ              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    NE              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    POW             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    RPAREN          reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    AND             reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    OR              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    START_BLOCK     reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    IF              reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    COMMA           reduce using rule 12 (expression -> VAR LPAREN RPAREN .)
    ELSE            reduce using rule 12 (expression -> VAR LPAREN RPAREN .)


state 63

    (13) expression -> VAR LPAREN expr_list . RPAREN
    (28) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 84
    COMMA           shift and go to state 85


state 64

    (27) expr_list -> expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    RPAREN          reduce using rule 27 (expr_list -> expression .)
    COMMA           reduce using rule 27 (expr_list -> expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 65

    (46) expression -> LPAREN expression RPAREN .

    SPLIT           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    REM             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    START_BLOCK     reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 46 (expression -> LPAREN expression RPAREN .)


state 66

    (7) stmt -> FUNC VAR LPAREN . RPAREN block_format
    (9) stmt -> FUNC VAR LPAREN . func_params RPAREN block_format
    (10) func_params -> . VAR
    (11) func_params -> . func_params COMMA VAR

    RPAREN          shift and go to state 87
    VAR             shift and go to state 86

    func_params                    shift and go to state 88

state 67

    (14) stmt -> RETURN expression SPLIT .

    SPLIT           reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    VAR             reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    FUNC            reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    RETURN          reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    PRINT           reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    FOR             reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    IF              reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    REM             reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    LPAREN          reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    TRUE            reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    FALSE           reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    NUMBER          reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    FLOAT           reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    STRING          reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    $end            reduce using rule 14 (stmt -> RETURN expression SPLIT .)
    END_BLOCK       reduce using rule 14 (stmt -> RETURN expression SPLIT .)


state 68

    (15) stmt -> PRINT LPAREN expr_list . RPAREN SPLIT
    (28) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 89
    COMMA           shift and go to state 85


state 69

    (16) stmt -> FOR VAR IN . range block_format
    (17) range -> . RANGE LPAREN expr_list RPAREN

    RANGE           shift and go to state 91

    range                          shift and go to state 90

state 70

    (18) stmt -> IF condition_list block_format .
    (19) stmt -> IF condition_list block_format . ELSE block_format

    SPLIT           reduce using rule 18 (stmt -> IF condition_list block_format .)
    VAR             reduce using rule 18 (stmt -> IF condition_list block_format .)
    FUNC            reduce using rule 18 (stmt -> IF condition_list block_format .)
    RETURN          reduce using rule 18 (stmt -> IF condition_list block_format .)
    PRINT           reduce using rule 18 (stmt -> IF condition_list block_format .)
    FOR             reduce using rule 18 (stmt -> IF condition_list block_format .)
    IF              reduce using rule 18 (stmt -> IF condition_list block_format .)
    REM             reduce using rule 18 (stmt -> IF condition_list block_format .)
    LPAREN          reduce using rule 18 (stmt -> IF condition_list block_format .)
    TRUE            reduce using rule 18 (stmt -> IF condition_list block_format .)
    FALSE           reduce using rule 18 (stmt -> IF condition_list block_format .)
    NUMBER          reduce using rule 18 (stmt -> IF condition_list block_format .)
    FLOAT           reduce using rule 18 (stmt -> IF condition_list block_format .)
    STRING          reduce using rule 18 (stmt -> IF condition_list block_format .)
    $end            reduce using rule 18 (stmt -> IF condition_list block_format .)
    END_BLOCK       reduce using rule 18 (stmt -> IF condition_list block_format .)
    ELSE            shift and go to state 92


state 71

    (30) condition_list -> condition_list AND . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 93

state 72

    (31) condition_list -> condition_list OR . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 94

state 73

    (20) block_format -> START_BLOCK . SPLIT block END_BLOCK SPLIT

    SPLIT           shift and go to state 95


state 74

    (32) condition_list -> LPAREN condition_list . RPAREN
    (30) condition_list -> condition_list . AND expression
    (31) condition_list -> condition_list . OR expression

    RPAREN          shift and go to state 96
    AND             shift and go to state 71
    OR              shift and go to state 72


state 75

    (46) expression -> LPAREN expression . RPAREN
    (29) condition_list -> expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 65
    AND             reduce using rule 29 (condition_list -> expression .)
    OR              reduce using rule 29 (condition_list -> expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33

  ! RPAREN          [ reduce using rule 29 (condition_list -> expression .) ]


state 76

    (25) stmt -> if_assign IF condition_list . ELSE expression SPLIT
    (30) condition_list -> condition_list . AND expression
    (31) condition_list -> condition_list . OR expression

    ELSE            shift and go to state 97
    AND             shift and go to state 71
    OR              shift and go to state 72


state 77

    (10) func_params -> VAR .
    (12) expression -> VAR . LPAREN RPAREN
    (13) expression -> VAR . LPAREN expr_list RPAREN
    (52) expression -> VAR .

  ! reduce/reduce conflict for RPAREN resolved using rule 10 (func_params -> VAR .)
    RPAREN          reduce using rule 10 (func_params -> VAR .)
    COMMA           reduce using rule 10 (func_params -> VAR .)
    LPAREN          shift and go to state 35
    ADD             reduce using rule 52 (expression -> VAR .)
    REM             reduce using rule 52 (expression -> VAR .)
    MUL             reduce using rule 52 (expression -> VAR .)
    DIV             reduce using rule 52 (expression -> VAR .)
    MOD             reduce using rule 52 (expression -> VAR .)
    GT              reduce using rule 52 (expression -> VAR .)
    LT              reduce using rule 52 (expression -> VAR .)
    GE              reduce using rule 52 (expression -> VAR .)
    LE              reduce using rule 52 (expression -> VAR .)
    EQ              reduce using rule 52 (expression -> VAR .)
    NE              reduce using rule 52 (expression -> VAR .)
    POW             reduce using rule 52 (expression -> VAR .)
    AND             reduce using rule 52 (expression -> VAR .)
    OR              reduce using rule 52 (expression -> VAR .)

  ! RPAREN          [ reduce using rule 52 (expression -> VAR .) ]


state 78

    (46) expression -> LPAREN . expression RPAREN
    (32) condition_list -> LPAREN . condition_list RPAREN
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR
    (29) condition_list -> . expression
    (30) condition_list -> . condition_list AND expression
    (31) condition_list -> . condition_list OR expression
    (32) condition_list -> . LPAREN condition_list RPAREN

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 78
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 81
    condition_list                 shift and go to state 74

state 79

    (6) stmt -> VAR ASSIGN LPAREN RPAREN . block_format
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 98

state 80

    (8) stmt -> VAR ASSIGN LPAREN func_params . RPAREN block_format
    (11) func_params -> func_params . COMMA VAR

    RPAREN          shift and go to state 99
    COMMA           shift and go to state 100


state 81

    (46) expression -> LPAREN expression . RPAREN
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression
    (29) condition_list -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 65
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33
    AND             reduce using rule 29 (condition_list -> expression .)
    OR              reduce using rule 29 (condition_list -> expression .)

  ! RPAREN          [ reduce using rule 29 (condition_list -> expression .) ]


state 82

    (23) stmt -> VAR ASSIGN expression SPLIT .

    SPLIT           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    VAR             reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    FUNC            reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    RETURN          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    PRINT           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    FOR             reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    IF              reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    REM             reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    LPAREN          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    TRUE            reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    FALSE           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    NUMBER          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    FLOAT           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    STRING          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    $end            reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    END_BLOCK       reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)


state 83

    (24) stmt -> VAR ASSIGN condition_list SPLIT .

    SPLIT           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    VAR             reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FUNC            reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    RETURN          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    PRINT           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FOR             reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    IF              reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    REM             reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    LPAREN          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    TRUE            reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FALSE           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    NUMBER          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FLOAT           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    STRING          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    $end            reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    END_BLOCK       reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)


state 84

    (13) expression -> VAR LPAREN expr_list RPAREN .

    SPLIT           reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    ADD             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    REM             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    MUL             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    DIV             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    MOD             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    GT              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    LT              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    GE              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    LE              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    EQ              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    NE              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    POW             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    AND             reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    OR              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    START_BLOCK     reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    IF              reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)
    ELSE            reduce using rule 13 (expression -> VAR LPAREN expr_list RPAREN .)


state 85

    (28) expr_list -> expr_list COMMA . expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 101

state 86

    (10) func_params -> VAR .

    RPAREN          reduce using rule 10 (func_params -> VAR .)
    COMMA           reduce using rule 10 (func_params -> VAR .)


state 87

    (7) stmt -> FUNC VAR LPAREN RPAREN . block_format
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 102

state 88

    (9) stmt -> FUNC VAR LPAREN func_params . RPAREN block_format
    (11) func_params -> func_params . COMMA VAR

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 100


state 89

    (15) stmt -> PRINT LPAREN expr_list RPAREN . SPLIT

    SPLIT           shift and go to state 104


state 90

    (16) stmt -> FOR VAR IN range . block_format
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 105

state 91

    (17) range -> RANGE . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 106


state 92

    (19) stmt -> IF condition_list block_format ELSE . block_format
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 107

state 93

    (30) condition_list -> condition_list AND expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    AND             reduce using rule 30 (condition_list -> condition_list AND expression .)
    OR              reduce using rule 30 (condition_list -> condition_list AND expression .)
    START_BLOCK     reduce using rule 30 (condition_list -> condition_list AND expression .)
    SPLIT           reduce using rule 30 (condition_list -> condition_list AND expression .)
    RPAREN          reduce using rule 30 (condition_list -> condition_list AND expression .)
    ELSE            reduce using rule 30 (condition_list -> condition_list AND expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 94

    (31) condition_list -> condition_list OR expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    AND             reduce using rule 31 (condition_list -> condition_list OR expression .)
    OR              reduce using rule 31 (condition_list -> condition_list OR expression .)
    START_BLOCK     reduce using rule 31 (condition_list -> condition_list OR expression .)
    SPLIT           reduce using rule 31 (condition_list -> condition_list OR expression .)
    RPAREN          reduce using rule 31 (condition_list -> condition_list OR expression .)
    ELSE            reduce using rule 31 (condition_list -> condition_list OR expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 95

    (20) block_format -> START_BLOCK SPLIT . block END_BLOCK SPLIT
    (21) block -> . stmt
    (22) block -> . block stmt
    (4) stmt -> . SPLIT
    (5) stmt -> . expression SPLIT
    (6) stmt -> . VAR ASSIGN LPAREN RPAREN block_format
    (7) stmt -> . FUNC VAR LPAREN RPAREN block_format
    (8) stmt -> . VAR ASSIGN LPAREN func_params RPAREN block_format
    (9) stmt -> . FUNC VAR LPAREN func_params RPAREN block_format
    (14) stmt -> . RETURN expression SPLIT
    (15) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (16) stmt -> . FOR VAR IN range block_format
    (18) stmt -> . IF condition_list block_format
    (19) stmt -> . IF condition_list block_format ELSE block_format
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (25) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR
    (26) if_assign -> . VAR ASSIGN expression

    SPLIT           shift and go to state 5
    VAR             shift and go to state 7
    FUNC            shift and go to state 9
    RETURN          shift and go to state 10
    PRINT           shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 13
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    block                          shift and go to state 108
    stmt                           shift and go to state 109
    expression                     shift and go to state 6
    if_assign                      shift and go to state 14

state 96

    (32) condition_list -> LPAREN condition_list RPAREN .

    AND             reduce using rule 32 (condition_list -> LPAREN condition_list RPAREN .)
    OR              reduce using rule 32 (condition_list -> LPAREN condition_list RPAREN .)
    START_BLOCK     reduce using rule 32 (condition_list -> LPAREN condition_list RPAREN .)
    SPLIT           reduce using rule 32 (condition_list -> LPAREN condition_list RPAREN .)
    RPAREN          reduce using rule 32 (condition_list -> LPAREN condition_list RPAREN .)
    ELSE            reduce using rule 32 (condition_list -> LPAREN condition_list RPAREN .)


state 97

    (25) stmt -> if_assign IF condition_list ELSE . expression SPLIT
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expression                     shift and go to state 110

state 98

    (6) stmt -> VAR ASSIGN LPAREN RPAREN block_format .

    SPLIT           reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    VAR             reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FUNC            reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    RETURN          reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    PRINT           reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FOR             reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    IF              reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    REM             reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    LPAREN          reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    TRUE            reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FALSE           reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    NUMBER          reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    FLOAT           reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    STRING          reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    $end            reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)
    END_BLOCK       reduce using rule 6 (stmt -> VAR ASSIGN LPAREN RPAREN block_format .)


state 99

    (8) stmt -> VAR ASSIGN LPAREN func_params RPAREN . block_format
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 111

state 100

    (11) func_params -> func_params COMMA . VAR

    VAR             shift and go to state 112


state 101

    (28) expr_list -> expr_list COMMA expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    RPAREN          reduce using rule 28 (expr_list -> expr_list COMMA expression .)
    COMMA           reduce using rule 28 (expr_list -> expr_list COMMA expression .)
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 102

    (7) stmt -> FUNC VAR LPAREN RPAREN block_format .

    SPLIT           reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    VAR             reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FUNC            reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    RETURN          reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    PRINT           reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FOR             reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    IF              reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    REM             reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    LPAREN          reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    TRUE            reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FALSE           reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    NUMBER          reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    FLOAT           reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    STRING          reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    $end            reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)
    END_BLOCK       reduce using rule 7 (stmt -> FUNC VAR LPAREN RPAREN block_format .)


state 103

    (9) stmt -> FUNC VAR LPAREN func_params RPAREN . block_format
    (20) block_format -> . START_BLOCK SPLIT block END_BLOCK SPLIT

    START_BLOCK     shift and go to state 73

    block_format                   shift and go to state 113

state 104

    (15) stmt -> PRINT LPAREN expr_list RPAREN SPLIT .

    SPLIT           reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    VAR             reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FUNC            reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    RETURN          reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    PRINT           reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FOR             reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    IF              reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    REM             reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    LPAREN          reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    TRUE            reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FALSE           reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    NUMBER          reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FLOAT           reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    STRING          reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    $end            reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    END_BLOCK       reduce using rule 15 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)


state 105

    (16) stmt -> FOR VAR IN range block_format .

    SPLIT           reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    VAR             reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    FUNC            reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    RETURN          reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    PRINT           reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    FOR             reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    IF              reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    REM             reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    LPAREN          reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    TRUE            reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    FALSE           reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    NUMBER          reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    FLOAT           reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    STRING          reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    $end            reduce using rule 16 (stmt -> FOR VAR IN range block_format .)
    END_BLOCK       reduce using rule 16 (stmt -> FOR VAR IN range block_format .)


state 106

    (17) range -> RANGE LPAREN . expr_list RPAREN
    (27) expr_list -> . expression
    (28) expr_list -> . expr_list COMMA expression
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR

    VAR             shift and go to state 37
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    expr_list                      shift and go to state 114
    expression                     shift and go to state 64

state 107

    (19) stmt -> IF condition_list block_format ELSE block_format .

    SPLIT           reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    VAR             reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    FUNC            reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    RETURN          reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    PRINT           reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    FOR             reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    IF              reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    REM             reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    LPAREN          reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    TRUE            reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    FALSE           reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    NUMBER          reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    FLOAT           reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    STRING          reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    $end            reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)
    END_BLOCK       reduce using rule 19 (stmt -> IF condition_list block_format ELSE block_format .)


state 108

    (20) block_format -> START_BLOCK SPLIT block . END_BLOCK SPLIT
    (22) block -> block . stmt
    (4) stmt -> . SPLIT
    (5) stmt -> . expression SPLIT
    (6) stmt -> . VAR ASSIGN LPAREN RPAREN block_format
    (7) stmt -> . FUNC VAR LPAREN RPAREN block_format
    (8) stmt -> . VAR ASSIGN LPAREN func_params RPAREN block_format
    (9) stmt -> . FUNC VAR LPAREN func_params RPAREN block_format
    (14) stmt -> . RETURN expression SPLIT
    (15) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (16) stmt -> . FOR VAR IN range block_format
    (18) stmt -> . IF condition_list block_format
    (19) stmt -> . IF condition_list block_format ELSE block_format
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (25) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (12) expression -> . VAR LPAREN RPAREN
    (13) expression -> . VAR LPAREN expr_list RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression REM expression
    (35) expression -> . expression MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression GT expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression LE expression
    (42) expression -> . expression EQ expression
    (43) expression -> . expression NE expression
    (44) expression -> . expression POW expression
    (45) expression -> . REM NUMBER
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . NUMBER
    (50) expression -> . FLOAT
    (51) expression -> . STRING
    (52) expression -> . VAR
    (26) if_assign -> . VAR ASSIGN expression

    END_BLOCK       shift and go to state 115
    SPLIT           shift and go to state 5
    VAR             shift and go to state 7
    FUNC            shift and go to state 9
    RETURN          shift and go to state 10
    PRINT           shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 13
    REM             shift and go to state 15
    LPAREN          shift and go to state 8
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    NUMBER          shift and go to state 16
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20

    stmt                           shift and go to state 116
    expression                     shift and go to state 6
    if_assign                      shift and go to state 14

state 109

    (21) block -> stmt .

    END_BLOCK       reduce using rule 21 (block -> stmt .)
    SPLIT           reduce using rule 21 (block -> stmt .)
    VAR             reduce using rule 21 (block -> stmt .)
    FUNC            reduce using rule 21 (block -> stmt .)
    RETURN          reduce using rule 21 (block -> stmt .)
    PRINT           reduce using rule 21 (block -> stmt .)
    FOR             reduce using rule 21 (block -> stmt .)
    IF              reduce using rule 21 (block -> stmt .)
    REM             reduce using rule 21 (block -> stmt .)
    LPAREN          reduce using rule 21 (block -> stmt .)
    TRUE            reduce using rule 21 (block -> stmt .)
    FALSE           reduce using rule 21 (block -> stmt .)
    NUMBER          reduce using rule 21 (block -> stmt .)
    FLOAT           reduce using rule 21 (block -> stmt .)
    STRING          reduce using rule 21 (block -> stmt .)


state 110

    (25) stmt -> if_assign IF condition_list ELSE expression . SPLIT
    (33) expression -> expression . ADD expression
    (34) expression -> expression . REM expression
    (35) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . GT expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . LE expression
    (42) expression -> expression . EQ expression
    (43) expression -> expression . NE expression
    (44) expression -> expression . POW expression

    SPLIT           shift and go to state 117
    ADD             shift and go to state 22
    REM             shift and go to state 23
    MUL             shift and go to state 24
    DIV             shift and go to state 25
    MOD             shift and go to state 26
    GT              shift and go to state 27
    LT              shift and go to state 28
    GE              shift and go to state 29
    LE              shift and go to state 30
    EQ              shift and go to state 31
    NE              shift and go to state 32
    POW             shift and go to state 33


state 111

    (8) stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .

    SPLIT           reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    VAR             reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FUNC            reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    RETURN          reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    PRINT           reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FOR             reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    IF              reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    REM             reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    LPAREN          reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    TRUE            reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FALSE           reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    NUMBER          reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    FLOAT           reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    STRING          reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    $end            reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)
    END_BLOCK       reduce using rule 8 (stmt -> VAR ASSIGN LPAREN func_params RPAREN block_format .)


state 112

    (11) func_params -> func_params COMMA VAR .

    RPAREN          reduce using rule 11 (func_params -> func_params COMMA VAR .)
    COMMA           reduce using rule 11 (func_params -> func_params COMMA VAR .)


state 113

    (9) stmt -> FUNC VAR LPAREN func_params RPAREN block_format .

    SPLIT           reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    VAR             reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FUNC            reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    RETURN          reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    PRINT           reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FOR             reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    IF              reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    REM             reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    LPAREN          reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    TRUE            reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FALSE           reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    NUMBER          reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    FLOAT           reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    STRING          reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    $end            reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)
    END_BLOCK       reduce using rule 9 (stmt -> FUNC VAR LPAREN func_params RPAREN block_format .)


state 114

    (17) range -> RANGE LPAREN expr_list . RPAREN
    (28) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 118
    COMMA           shift and go to state 85


state 115

    (20) block_format -> START_BLOCK SPLIT block END_BLOCK . SPLIT

    SPLIT           shift and go to state 119


state 116

    (22) block -> block stmt .

    END_BLOCK       reduce using rule 22 (block -> block stmt .)
    SPLIT           reduce using rule 22 (block -> block stmt .)
    VAR             reduce using rule 22 (block -> block stmt .)
    FUNC            reduce using rule 22 (block -> block stmt .)
    RETURN          reduce using rule 22 (block -> block stmt .)
    PRINT           reduce using rule 22 (block -> block stmt .)
    FOR             reduce using rule 22 (block -> block stmt .)
    IF              reduce using rule 22 (block -> block stmt .)
    REM             reduce using rule 22 (block -> block stmt .)
    LPAREN          reduce using rule 22 (block -> block stmt .)
    TRUE            reduce using rule 22 (block -> block stmt .)
    FALSE           reduce using rule 22 (block -> block stmt .)
    NUMBER          reduce using rule 22 (block -> block stmt .)
    FLOAT           reduce using rule 22 (block -> block stmt .)
    STRING          reduce using rule 22 (block -> block stmt .)


state 117

    (25) stmt -> if_assign IF condition_list ELSE expression SPLIT .

    SPLIT           reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    VAR             reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FUNC            reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    RETURN          reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    PRINT           reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FOR             reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    IF              reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    REM             reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    LPAREN          reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    TRUE            reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FALSE           reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    NUMBER          reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FLOAT           reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    STRING          reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    $end            reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    END_BLOCK       reduce using rule 25 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)


state 118

    (17) range -> RANGE LPAREN expr_list RPAREN .

    START_BLOCK     reduce using rule 17 (range -> RANGE LPAREN expr_list RPAREN .)


state 119

    (20) block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .

    ELSE            reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    SPLIT           reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    VAR             reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FUNC            reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    RETURN          reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    PRINT           reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FOR             reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    IF              reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    REM             reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    LPAREN          reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    TRUE            reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FALSE           reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    NUMBER          reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FLOAT           reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    STRING          reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    $end            reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)
    END_BLOCK       reduce using rule 20 (block_format -> START_BLOCK SPLIT block END_BLOCK SPLIT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SPLIT in state 60 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 75 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 81 resolved as shift
WARNING: reduce/reduce conflict in state 77 resolved using rule (func_params -> VAR)
WARNING: rejected rule (expression -> VAR) in state 77
