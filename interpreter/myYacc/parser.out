Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> entry
Rule 1     entry -> start
Rule 2     expression -> TRUE
Rule 3     expression -> FALSE
Rule 4     start -> start stmt
Rule 5     start -> empty
Rule 6     expression -> NUMBER
Rule 7     expression -> STRING
Rule 8     stmt -> SPLIT
Rule 9     stmt -> expression SPLIT
Rule 10    expression -> VAR
Rule 11    stmt -> PRINT LPAREN expr_list RPAREN SPLIT
Rule 12    expr_list -> expression
Rule 13    expr_list -> expr_list COMMA expression
Rule 14    range -> RANGE LPAREN expr_list RPAREN
Rule 15    stmt -> FOR VAR IN range COLON stmt
Rule 16    stmt -> if_assign IF condition_list ELSE expression SPLIT
Rule 17    if_assign -> VAR ASSIGN expression
Rule 18    stmt -> IF condition_list COLON stmt
Rule 19    stmt -> IF condition_list COLON SPLIT stmt
Rule 20    stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
Rule 21    block -> stmt
Rule 22    block -> block stmt
Rule 23    stmt -> VAR ASSIGN expression SPLIT
Rule 24    stmt -> VAR ASSIGN condition_list SPLIT
Rule 25    condition_list -> expression
Rule 26    condition_list -> condition_list AND expression
Rule 27    condition_list -> condition_list OR expression
Rule 28    condition_list -> LPAREN condition_list RPAREN
Rule 29    expression -> expression ADD expression
Rule 30    expression -> expression REM expression
Rule 31    expression -> expression MUL expression
Rule 32    expression -> expression DIV expression
Rule 33    expression -> expression MOD expression
Rule 34    expression -> expression GT expression
Rule 35    expression -> expression LT expression
Rule 36    expression -> expression GE expression
Rule 37    expression -> expression LE expression
Rule 38    expression -> expression EQ expression
Rule 39    expression -> expression NE expression
Rule 40    expression -> expression POW expression
Rule 41    expression -> LPAREN expression RPAREN
Rule 42    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 29
AND                  : 26
ASSIGN               : 17 23 24
COLON                : 15 18 19
COMMA                : 13
DIV                  : 32
ELSE                 : 16
END_BLOCK            : 20
EQ                   : 38
FALSE                : 3
FOR                  : 15
GE                   : 36
GT                   : 34
IF                   : 16 18 19 20
IN                   : 15
LE                   : 37
LPAREN               : 11 14 28 41
LT                   : 35
MOD                  : 33
MUL                  : 31
NE                   : 39
NUMBER               : 6
OR                   : 27
POW                  : 40
PRINT                : 11
RANGE                : 14
REM                  : 30
RPAREN               : 11 14 28 41
SPLIT                : 8 9 11 16 19 20 20 23 24
START_BLOCK          : 20
STRING               : 7
TRUE                 : 2
VAR                  : 10 15 17 23 24
error                : 

Nonterminals, with rules where they appear

block                : 20 22
condition_list       : 16 18 19 20 24 26 27 28
empty                : 5
entry                : 0
expr_list            : 11 13 14
expression           : 9 12 13 16 17 23 25 26 27 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41
if_assign            : 16
range                : 15
start                : 1 4
stmt                 : 4 15 18 19 21 22

Parsing method: LALR

state 0

    (0) S' -> . entry
    (1) entry -> . start
    (4) start -> . start stmt
    (5) start -> . empty
    (42) empty -> .

    SPLIT           reduce using rule 42 (empty -> .)
    PRINT           reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)
    VAR             reduce using rule 42 (empty -> .)
    TRUE            reduce using rule 42 (empty -> .)
    FALSE           reduce using rule 42 (empty -> .)
    NUMBER          reduce using rule 42 (empty -> .)
    STRING          reduce using rule 42 (empty -> .)
    LPAREN          reduce using rule 42 (empty -> .)
    $end            reduce using rule 42 (empty -> .)

    entry                          shift and go to state 1
    start                          shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> entry .



state 2

    (1) entry -> start .
    (4) start -> start . stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (15) stmt -> . FOR VAR IN range COLON stmt
    (16) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (18) stmt -> . IF condition_list COLON stmt
    (19) stmt -> . IF condition_list COLON SPLIT stmt
    (20) stmt -> . IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (17) if_assign -> . VAR ASSIGN expression

    $end            reduce using rule 1 (entry -> start .)
    SPLIT           shift and go to state 5
    PRINT           shift and go to state 7
    FOR             shift and go to state 9
    IF              shift and go to state 12
    VAR             shift and go to state 10
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    LPAREN          shift and go to state 8

    stmt                           shift and go to state 4
    expression                     shift and go to state 6
    if_assign                      shift and go to state 11

state 3

    (5) start -> empty .

    SPLIT           reduce using rule 5 (start -> empty .)
    PRINT           reduce using rule 5 (start -> empty .)
    FOR             reduce using rule 5 (start -> empty .)
    IF              reduce using rule 5 (start -> empty .)
    VAR             reduce using rule 5 (start -> empty .)
    TRUE            reduce using rule 5 (start -> empty .)
    FALSE           reduce using rule 5 (start -> empty .)
    NUMBER          reduce using rule 5 (start -> empty .)
    STRING          reduce using rule 5 (start -> empty .)
    LPAREN          reduce using rule 5 (start -> empty .)
    $end            reduce using rule 5 (start -> empty .)


state 4

    (4) start -> start stmt .

    SPLIT           reduce using rule 4 (start -> start stmt .)
    PRINT           reduce using rule 4 (start -> start stmt .)
    FOR             reduce using rule 4 (start -> start stmt .)
    IF              reduce using rule 4 (start -> start stmt .)
    VAR             reduce using rule 4 (start -> start stmt .)
    TRUE            reduce using rule 4 (start -> start stmt .)
    FALSE           reduce using rule 4 (start -> start stmt .)
    NUMBER          reduce using rule 4 (start -> start stmt .)
    STRING          reduce using rule 4 (start -> start stmt .)
    LPAREN          reduce using rule 4 (start -> start stmt .)
    $end            reduce using rule 4 (start -> start stmt .)


state 5

    (8) stmt -> SPLIT .

    SPLIT           reduce using rule 8 (stmt -> SPLIT .)
    PRINT           reduce using rule 8 (stmt -> SPLIT .)
    FOR             reduce using rule 8 (stmt -> SPLIT .)
    IF              reduce using rule 8 (stmt -> SPLIT .)
    VAR             reduce using rule 8 (stmt -> SPLIT .)
    TRUE            reduce using rule 8 (stmt -> SPLIT .)
    FALSE           reduce using rule 8 (stmt -> SPLIT .)
    NUMBER          reduce using rule 8 (stmt -> SPLIT .)
    STRING          reduce using rule 8 (stmt -> SPLIT .)
    LPAREN          reduce using rule 8 (stmt -> SPLIT .)
    $end            reduce using rule 8 (stmt -> SPLIT .)
    END_BLOCK       reduce using rule 8 (stmt -> SPLIT .)


state 6

    (9) stmt -> expression . SPLIT
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           shift and go to state 17
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 7

    (11) stmt -> PRINT . LPAREN expr_list RPAREN SPLIT

    LPAREN          shift and go to state 30


state 8

    (41) expression -> LPAREN . expression RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 31

state 9

    (15) stmt -> FOR . VAR IN range COLON stmt

    VAR             shift and go to state 33


state 10

    (23) stmt -> VAR . ASSIGN expression SPLIT
    (24) stmt -> VAR . ASSIGN condition_list SPLIT
    (10) expression -> VAR .
    (17) if_assign -> VAR . ASSIGN expression

    ASSIGN          shift and go to state 34
    SPLIT           reduce using rule 10 (expression -> VAR .)
    ADD             reduce using rule 10 (expression -> VAR .)
    REM             reduce using rule 10 (expression -> VAR .)
    MUL             reduce using rule 10 (expression -> VAR .)
    DIV             reduce using rule 10 (expression -> VAR .)
    MOD             reduce using rule 10 (expression -> VAR .)
    GT              reduce using rule 10 (expression -> VAR .)
    LT              reduce using rule 10 (expression -> VAR .)
    GE              reduce using rule 10 (expression -> VAR .)
    LE              reduce using rule 10 (expression -> VAR .)
    EQ              reduce using rule 10 (expression -> VAR .)
    NE              reduce using rule 10 (expression -> VAR .)
    POW             reduce using rule 10 (expression -> VAR .)


state 11

    (16) stmt -> if_assign . IF condition_list ELSE expression SPLIT

    IF              shift and go to state 35


state 12

    (18) stmt -> IF . condition_list COLON stmt
    (19) stmt -> IF . condition_list COLON SPLIT stmt
    (20) stmt -> IF . condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (25) condition_list -> . expression
    (26) condition_list -> . condition_list AND expression
    (27) condition_list -> . condition_list OR expression
    (28) condition_list -> . LPAREN condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 38
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32

    condition_list                 shift and go to state 36
    expression                     shift and go to state 37

state 13

    (2) expression -> TRUE .

    SPLIT           reduce using rule 2 (expression -> TRUE .)
    ADD             reduce using rule 2 (expression -> TRUE .)
    REM             reduce using rule 2 (expression -> TRUE .)
    MUL             reduce using rule 2 (expression -> TRUE .)
    DIV             reduce using rule 2 (expression -> TRUE .)
    MOD             reduce using rule 2 (expression -> TRUE .)
    GT              reduce using rule 2 (expression -> TRUE .)
    LT              reduce using rule 2 (expression -> TRUE .)
    GE              reduce using rule 2 (expression -> TRUE .)
    LE              reduce using rule 2 (expression -> TRUE .)
    EQ              reduce using rule 2 (expression -> TRUE .)
    NE              reduce using rule 2 (expression -> TRUE .)
    POW             reduce using rule 2 (expression -> TRUE .)
    RPAREN          reduce using rule 2 (expression -> TRUE .)
    COLON           reduce using rule 2 (expression -> TRUE .)
    START_BLOCK     reduce using rule 2 (expression -> TRUE .)
    AND             reduce using rule 2 (expression -> TRUE .)
    OR              reduce using rule 2 (expression -> TRUE .)
    COMMA           reduce using rule 2 (expression -> TRUE .)
    IF              reduce using rule 2 (expression -> TRUE .)
    ELSE            reduce using rule 2 (expression -> TRUE .)


state 14

    (3) expression -> FALSE .

    SPLIT           reduce using rule 3 (expression -> FALSE .)
    ADD             reduce using rule 3 (expression -> FALSE .)
    REM             reduce using rule 3 (expression -> FALSE .)
    MUL             reduce using rule 3 (expression -> FALSE .)
    DIV             reduce using rule 3 (expression -> FALSE .)
    MOD             reduce using rule 3 (expression -> FALSE .)
    GT              reduce using rule 3 (expression -> FALSE .)
    LT              reduce using rule 3 (expression -> FALSE .)
    GE              reduce using rule 3 (expression -> FALSE .)
    LE              reduce using rule 3 (expression -> FALSE .)
    EQ              reduce using rule 3 (expression -> FALSE .)
    NE              reduce using rule 3 (expression -> FALSE .)
    POW             reduce using rule 3 (expression -> FALSE .)
    RPAREN          reduce using rule 3 (expression -> FALSE .)
    COLON           reduce using rule 3 (expression -> FALSE .)
    START_BLOCK     reduce using rule 3 (expression -> FALSE .)
    AND             reduce using rule 3 (expression -> FALSE .)
    OR              reduce using rule 3 (expression -> FALSE .)
    COMMA           reduce using rule 3 (expression -> FALSE .)
    IF              reduce using rule 3 (expression -> FALSE .)
    ELSE            reduce using rule 3 (expression -> FALSE .)


state 15

    (6) expression -> NUMBER .

    SPLIT           reduce using rule 6 (expression -> NUMBER .)
    ADD             reduce using rule 6 (expression -> NUMBER .)
    REM             reduce using rule 6 (expression -> NUMBER .)
    MUL             reduce using rule 6 (expression -> NUMBER .)
    DIV             reduce using rule 6 (expression -> NUMBER .)
    MOD             reduce using rule 6 (expression -> NUMBER .)
    GT              reduce using rule 6 (expression -> NUMBER .)
    LT              reduce using rule 6 (expression -> NUMBER .)
    GE              reduce using rule 6 (expression -> NUMBER .)
    LE              reduce using rule 6 (expression -> NUMBER .)
    EQ              reduce using rule 6 (expression -> NUMBER .)
    NE              reduce using rule 6 (expression -> NUMBER .)
    POW             reduce using rule 6 (expression -> NUMBER .)
    RPAREN          reduce using rule 6 (expression -> NUMBER .)
    COLON           reduce using rule 6 (expression -> NUMBER .)
    START_BLOCK     reduce using rule 6 (expression -> NUMBER .)
    AND             reduce using rule 6 (expression -> NUMBER .)
    OR              reduce using rule 6 (expression -> NUMBER .)
    COMMA           reduce using rule 6 (expression -> NUMBER .)
    IF              reduce using rule 6 (expression -> NUMBER .)
    ELSE            reduce using rule 6 (expression -> NUMBER .)


state 16

    (7) expression -> STRING .

    SPLIT           reduce using rule 7 (expression -> STRING .)
    ADD             reduce using rule 7 (expression -> STRING .)
    REM             reduce using rule 7 (expression -> STRING .)
    MUL             reduce using rule 7 (expression -> STRING .)
    DIV             reduce using rule 7 (expression -> STRING .)
    MOD             reduce using rule 7 (expression -> STRING .)
    GT              reduce using rule 7 (expression -> STRING .)
    LT              reduce using rule 7 (expression -> STRING .)
    GE              reduce using rule 7 (expression -> STRING .)
    LE              reduce using rule 7 (expression -> STRING .)
    EQ              reduce using rule 7 (expression -> STRING .)
    NE              reduce using rule 7 (expression -> STRING .)
    POW             reduce using rule 7 (expression -> STRING .)
    RPAREN          reduce using rule 7 (expression -> STRING .)
    COLON           reduce using rule 7 (expression -> STRING .)
    START_BLOCK     reduce using rule 7 (expression -> STRING .)
    AND             reduce using rule 7 (expression -> STRING .)
    OR              reduce using rule 7 (expression -> STRING .)
    COMMA           reduce using rule 7 (expression -> STRING .)
    IF              reduce using rule 7 (expression -> STRING .)
    ELSE            reduce using rule 7 (expression -> STRING .)


state 17

    (9) stmt -> expression SPLIT .

    SPLIT           reduce using rule 9 (stmt -> expression SPLIT .)
    PRINT           reduce using rule 9 (stmt -> expression SPLIT .)
    FOR             reduce using rule 9 (stmt -> expression SPLIT .)
    IF              reduce using rule 9 (stmt -> expression SPLIT .)
    VAR             reduce using rule 9 (stmt -> expression SPLIT .)
    TRUE            reduce using rule 9 (stmt -> expression SPLIT .)
    FALSE           reduce using rule 9 (stmt -> expression SPLIT .)
    NUMBER          reduce using rule 9 (stmt -> expression SPLIT .)
    STRING          reduce using rule 9 (stmt -> expression SPLIT .)
    LPAREN          reduce using rule 9 (stmt -> expression SPLIT .)
    $end            reduce using rule 9 (stmt -> expression SPLIT .)
    END_BLOCK       reduce using rule 9 (stmt -> expression SPLIT .)


state 18

    (29) expression -> expression ADD . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 39

state 19

    (30) expression -> expression REM . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 40

state 20

    (31) expression -> expression MUL . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 41

state 21

    (32) expression -> expression DIV . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 42

state 22

    (33) expression -> expression MOD . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 43

state 23

    (34) expression -> expression GT . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 44

state 24

    (35) expression -> expression LT . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 45

state 25

    (36) expression -> expression GE . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 46

state 26

    (37) expression -> expression LE . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 47

state 27

    (38) expression -> expression EQ . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 48

state 28

    (39) expression -> expression NE . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 49

state 29

    (40) expression -> expression POW . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 50

state 30

    (11) stmt -> PRINT LPAREN . expr_list RPAREN SPLIT
    (12) expr_list -> . expression
    (13) expr_list -> . expr_list COMMA expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expr_list                      shift and go to state 51
    expression                     shift and go to state 52

state 31

    (41) expression -> LPAREN expression . RPAREN
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    RPAREN          shift and go to state 53
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 32

    (10) expression -> VAR .

    RPAREN          reduce using rule 10 (expression -> VAR .)
    ADD             reduce using rule 10 (expression -> VAR .)
    REM             reduce using rule 10 (expression -> VAR .)
    MUL             reduce using rule 10 (expression -> VAR .)
    DIV             reduce using rule 10 (expression -> VAR .)
    MOD             reduce using rule 10 (expression -> VAR .)
    GT              reduce using rule 10 (expression -> VAR .)
    LT              reduce using rule 10 (expression -> VAR .)
    GE              reduce using rule 10 (expression -> VAR .)
    LE              reduce using rule 10 (expression -> VAR .)
    EQ              reduce using rule 10 (expression -> VAR .)
    NE              reduce using rule 10 (expression -> VAR .)
    POW             reduce using rule 10 (expression -> VAR .)
    COLON           reduce using rule 10 (expression -> VAR .)
    START_BLOCK     reduce using rule 10 (expression -> VAR .)
    AND             reduce using rule 10 (expression -> VAR .)
    OR              reduce using rule 10 (expression -> VAR .)
    SPLIT           reduce using rule 10 (expression -> VAR .)
    COMMA           reduce using rule 10 (expression -> VAR .)
    IF              reduce using rule 10 (expression -> VAR .)
    ELSE            reduce using rule 10 (expression -> VAR .)


state 33

    (15) stmt -> FOR VAR . IN range COLON stmt

    IN              shift and go to state 54


state 34

    (23) stmt -> VAR ASSIGN . expression SPLIT
    (24) stmt -> VAR ASSIGN . condition_list SPLIT
    (17) if_assign -> VAR ASSIGN . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (25) condition_list -> . expression
    (26) condition_list -> . condition_list AND expression
    (27) condition_list -> . condition_list OR expression
    (28) condition_list -> . LPAREN condition_list RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 57

    expression                     shift and go to state 55
    condition_list                 shift and go to state 56

state 35

    (16) stmt -> if_assign IF . condition_list ELSE expression SPLIT
    (25) condition_list -> . expression
    (26) condition_list -> . condition_list AND expression
    (27) condition_list -> . condition_list OR expression
    (28) condition_list -> . LPAREN condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 38
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32

    condition_list                 shift and go to state 58
    expression                     shift and go to state 37

state 36

    (18) stmt -> IF condition_list . COLON stmt
    (19) stmt -> IF condition_list . COLON SPLIT stmt
    (20) stmt -> IF condition_list . START_BLOCK SPLIT block END_BLOCK SPLIT
    (26) condition_list -> condition_list . AND expression
    (27) condition_list -> condition_list . OR expression

    COLON           shift and go to state 59
    START_BLOCK     shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 37

    (25) condition_list -> expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    COLON           reduce using rule 25 (condition_list -> expression .)
    START_BLOCK     reduce using rule 25 (condition_list -> expression .)
    AND             reduce using rule 25 (condition_list -> expression .)
    OR              reduce using rule 25 (condition_list -> expression .)
    ELSE            reduce using rule 25 (condition_list -> expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 38

    (28) condition_list -> LPAREN . condition_list RPAREN
    (41) expression -> LPAREN . expression RPAREN
    (25) condition_list -> . expression
    (26) condition_list -> . condition_list AND expression
    (27) condition_list -> . condition_list OR expression
    (28) condition_list -> . LPAREN condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 38
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32

    condition_list                 shift and go to state 63
    expression                     shift and go to state 64

state 39

    (29) expression -> expression ADD expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 29 (expression -> expression ADD expression .)
    ADD             reduce using rule 29 (expression -> expression ADD expression .)
    REM             reduce using rule 29 (expression -> expression ADD expression .)
    GT              reduce using rule 29 (expression -> expression ADD expression .)
    LT              reduce using rule 29 (expression -> expression ADD expression .)
    GE              reduce using rule 29 (expression -> expression ADD expression .)
    LE              reduce using rule 29 (expression -> expression ADD expression .)
    EQ              reduce using rule 29 (expression -> expression ADD expression .)
    NE              reduce using rule 29 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 29 (expression -> expression ADD expression .)
    COLON           reduce using rule 29 (expression -> expression ADD expression .)
    START_BLOCK     reduce using rule 29 (expression -> expression ADD expression .)
    AND             reduce using rule 29 (expression -> expression ADD expression .)
    OR              reduce using rule 29 (expression -> expression ADD expression .)
    COMMA           reduce using rule 29 (expression -> expression ADD expression .)
    IF              reduce using rule 29 (expression -> expression ADD expression .)
    ELSE            reduce using rule 29 (expression -> expression ADD expression .)
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! MUL             [ reduce using rule 29 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 29 (expression -> expression ADD expression .) ]
  ! MOD             [ reduce using rule 29 (expression -> expression ADD expression .) ]
  ! POW             [ reduce using rule 29 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 18 ]
  ! REM             [ shift and go to state 19 ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 40

    (30) expression -> expression REM expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 30 (expression -> expression REM expression .)
    ADD             reduce using rule 30 (expression -> expression REM expression .)
    REM             reduce using rule 30 (expression -> expression REM expression .)
    GT              reduce using rule 30 (expression -> expression REM expression .)
    LT              reduce using rule 30 (expression -> expression REM expression .)
    GE              reduce using rule 30 (expression -> expression REM expression .)
    LE              reduce using rule 30 (expression -> expression REM expression .)
    EQ              reduce using rule 30 (expression -> expression REM expression .)
    NE              reduce using rule 30 (expression -> expression REM expression .)
    RPAREN          reduce using rule 30 (expression -> expression REM expression .)
    COLON           reduce using rule 30 (expression -> expression REM expression .)
    START_BLOCK     reduce using rule 30 (expression -> expression REM expression .)
    AND             reduce using rule 30 (expression -> expression REM expression .)
    OR              reduce using rule 30 (expression -> expression REM expression .)
    COMMA           reduce using rule 30 (expression -> expression REM expression .)
    IF              reduce using rule 30 (expression -> expression REM expression .)
    ELSE            reduce using rule 30 (expression -> expression REM expression .)
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! MUL             [ reduce using rule 30 (expression -> expression REM expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> expression REM expression .) ]
  ! MOD             [ reduce using rule 30 (expression -> expression REM expression .) ]
  ! POW             [ reduce using rule 30 (expression -> expression REM expression .) ]
  ! ADD             [ shift and go to state 18 ]
  ! REM             [ shift and go to state 19 ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 41

    (31) expression -> expression MUL expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 31 (expression -> expression MUL expression .)
    ADD             reduce using rule 31 (expression -> expression MUL expression .)
    REM             reduce using rule 31 (expression -> expression MUL expression .)
    MUL             reduce using rule 31 (expression -> expression MUL expression .)
    DIV             reduce using rule 31 (expression -> expression MUL expression .)
    MOD             reduce using rule 31 (expression -> expression MUL expression .)
    GT              reduce using rule 31 (expression -> expression MUL expression .)
    LT              reduce using rule 31 (expression -> expression MUL expression .)
    GE              reduce using rule 31 (expression -> expression MUL expression .)
    LE              reduce using rule 31 (expression -> expression MUL expression .)
    EQ              reduce using rule 31 (expression -> expression MUL expression .)
    NE              reduce using rule 31 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 31 (expression -> expression MUL expression .)
    COLON           reduce using rule 31 (expression -> expression MUL expression .)
    START_BLOCK     reduce using rule 31 (expression -> expression MUL expression .)
    AND             reduce using rule 31 (expression -> expression MUL expression .)
    OR              reduce using rule 31 (expression -> expression MUL expression .)
    COMMA           reduce using rule 31 (expression -> expression MUL expression .)
    IF              reduce using rule 31 (expression -> expression MUL expression .)
    ELSE            reduce using rule 31 (expression -> expression MUL expression .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 31 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 18 ]
  ! REM             [ shift and go to state 19 ]
  ! MUL             [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 42

    (32) expression -> expression DIV expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 32 (expression -> expression DIV expression .)
    ADD             reduce using rule 32 (expression -> expression DIV expression .)
    REM             reduce using rule 32 (expression -> expression DIV expression .)
    MUL             reduce using rule 32 (expression -> expression DIV expression .)
    DIV             reduce using rule 32 (expression -> expression DIV expression .)
    MOD             reduce using rule 32 (expression -> expression DIV expression .)
    GT              reduce using rule 32 (expression -> expression DIV expression .)
    LT              reduce using rule 32 (expression -> expression DIV expression .)
    GE              reduce using rule 32 (expression -> expression DIV expression .)
    LE              reduce using rule 32 (expression -> expression DIV expression .)
    EQ              reduce using rule 32 (expression -> expression DIV expression .)
    NE              reduce using rule 32 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 32 (expression -> expression DIV expression .)
    COLON           reduce using rule 32 (expression -> expression DIV expression .)
    START_BLOCK     reduce using rule 32 (expression -> expression DIV expression .)
    AND             reduce using rule 32 (expression -> expression DIV expression .)
    OR              reduce using rule 32 (expression -> expression DIV expression .)
    COMMA           reduce using rule 32 (expression -> expression DIV expression .)
    IF              reduce using rule 32 (expression -> expression DIV expression .)
    ELSE            reduce using rule 32 (expression -> expression DIV expression .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 32 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 18 ]
  ! REM             [ shift and go to state 19 ]
  ! MUL             [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 43

    (33) expression -> expression MOD expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 33 (expression -> expression MOD expression .)
    ADD             reduce using rule 33 (expression -> expression MOD expression .)
    REM             reduce using rule 33 (expression -> expression MOD expression .)
    MUL             reduce using rule 33 (expression -> expression MOD expression .)
    DIV             reduce using rule 33 (expression -> expression MOD expression .)
    MOD             reduce using rule 33 (expression -> expression MOD expression .)
    GT              reduce using rule 33 (expression -> expression MOD expression .)
    LT              reduce using rule 33 (expression -> expression MOD expression .)
    GE              reduce using rule 33 (expression -> expression MOD expression .)
    LE              reduce using rule 33 (expression -> expression MOD expression .)
    EQ              reduce using rule 33 (expression -> expression MOD expression .)
    NE              reduce using rule 33 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 33 (expression -> expression MOD expression .)
    COLON           reduce using rule 33 (expression -> expression MOD expression .)
    START_BLOCK     reduce using rule 33 (expression -> expression MOD expression .)
    AND             reduce using rule 33 (expression -> expression MOD expression .)
    OR              reduce using rule 33 (expression -> expression MOD expression .)
    COMMA           reduce using rule 33 (expression -> expression MOD expression .)
    IF              reduce using rule 33 (expression -> expression MOD expression .)
    ELSE            reduce using rule 33 (expression -> expression MOD expression .)
    POW             shift and go to state 29

  ! POW             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! ADD             [ shift and go to state 18 ]
  ! REM             [ shift and go to state 19 ]
  ! MUL             [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 44

    (34) expression -> expression GT expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 34 (expression -> expression GT expression .)
    GT              reduce using rule 34 (expression -> expression GT expression .)
    LT              reduce using rule 34 (expression -> expression GT expression .)
    GE              reduce using rule 34 (expression -> expression GT expression .)
    LE              reduce using rule 34 (expression -> expression GT expression .)
    EQ              reduce using rule 34 (expression -> expression GT expression .)
    NE              reduce using rule 34 (expression -> expression GT expression .)
    RPAREN          reduce using rule 34 (expression -> expression GT expression .)
    COLON           reduce using rule 34 (expression -> expression GT expression .)
    START_BLOCK     reduce using rule 34 (expression -> expression GT expression .)
    AND             reduce using rule 34 (expression -> expression GT expression .)
    OR              reduce using rule 34 (expression -> expression GT expression .)
    COMMA           reduce using rule 34 (expression -> expression GT expression .)
    IF              reduce using rule 34 (expression -> expression GT expression .)
    ELSE            reduce using rule 34 (expression -> expression GT expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! ADD             [ reduce using rule 34 (expression -> expression GT expression .) ]
  ! REM             [ reduce using rule 34 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> expression GT expression .) ]
  ! POW             [ reduce using rule 34 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 45

    (35) expression -> expression LT expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 35 (expression -> expression LT expression .)
    GT              reduce using rule 35 (expression -> expression LT expression .)
    LT              reduce using rule 35 (expression -> expression LT expression .)
    GE              reduce using rule 35 (expression -> expression LT expression .)
    LE              reduce using rule 35 (expression -> expression LT expression .)
    EQ              reduce using rule 35 (expression -> expression LT expression .)
    NE              reduce using rule 35 (expression -> expression LT expression .)
    RPAREN          reduce using rule 35 (expression -> expression LT expression .)
    COLON           reduce using rule 35 (expression -> expression LT expression .)
    START_BLOCK     reduce using rule 35 (expression -> expression LT expression .)
    AND             reduce using rule 35 (expression -> expression LT expression .)
    OR              reduce using rule 35 (expression -> expression LT expression .)
    COMMA           reduce using rule 35 (expression -> expression LT expression .)
    IF              reduce using rule 35 (expression -> expression LT expression .)
    ELSE            reduce using rule 35 (expression -> expression LT expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! ADD             [ reduce using rule 35 (expression -> expression LT expression .) ]
  ! REM             [ reduce using rule 35 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression LT expression .) ]
  ! POW             [ reduce using rule 35 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 46

    (36) expression -> expression GE expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 36 (expression -> expression GE expression .)
    GT              reduce using rule 36 (expression -> expression GE expression .)
    LT              reduce using rule 36 (expression -> expression GE expression .)
    GE              reduce using rule 36 (expression -> expression GE expression .)
    LE              reduce using rule 36 (expression -> expression GE expression .)
    EQ              reduce using rule 36 (expression -> expression GE expression .)
    NE              reduce using rule 36 (expression -> expression GE expression .)
    RPAREN          reduce using rule 36 (expression -> expression GE expression .)
    COLON           reduce using rule 36 (expression -> expression GE expression .)
    START_BLOCK     reduce using rule 36 (expression -> expression GE expression .)
    AND             reduce using rule 36 (expression -> expression GE expression .)
    OR              reduce using rule 36 (expression -> expression GE expression .)
    COMMA           reduce using rule 36 (expression -> expression GE expression .)
    IF              reduce using rule 36 (expression -> expression GE expression .)
    ELSE            reduce using rule 36 (expression -> expression GE expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! ADD             [ reduce using rule 36 (expression -> expression GE expression .) ]
  ! REM             [ reduce using rule 36 (expression -> expression GE expression .) ]
  ! MUL             [ reduce using rule 36 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression GE expression .) ]
  ! POW             [ reduce using rule 36 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 47

    (37) expression -> expression LE expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 37 (expression -> expression LE expression .)
    GT              reduce using rule 37 (expression -> expression LE expression .)
    LT              reduce using rule 37 (expression -> expression LE expression .)
    GE              reduce using rule 37 (expression -> expression LE expression .)
    LE              reduce using rule 37 (expression -> expression LE expression .)
    EQ              reduce using rule 37 (expression -> expression LE expression .)
    NE              reduce using rule 37 (expression -> expression LE expression .)
    RPAREN          reduce using rule 37 (expression -> expression LE expression .)
    COLON           reduce using rule 37 (expression -> expression LE expression .)
    START_BLOCK     reduce using rule 37 (expression -> expression LE expression .)
    AND             reduce using rule 37 (expression -> expression LE expression .)
    OR              reduce using rule 37 (expression -> expression LE expression .)
    COMMA           reduce using rule 37 (expression -> expression LE expression .)
    IF              reduce using rule 37 (expression -> expression LE expression .)
    ELSE            reduce using rule 37 (expression -> expression LE expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! ADD             [ reduce using rule 37 (expression -> expression LE expression .) ]
  ! REM             [ reduce using rule 37 (expression -> expression LE expression .) ]
  ! MUL             [ reduce using rule 37 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> expression LE expression .) ]
  ! POW             [ reduce using rule 37 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 48

    (38) expression -> expression EQ expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 38 (expression -> expression EQ expression .)
    GT              reduce using rule 38 (expression -> expression EQ expression .)
    LT              reduce using rule 38 (expression -> expression EQ expression .)
    GE              reduce using rule 38 (expression -> expression EQ expression .)
    LE              reduce using rule 38 (expression -> expression EQ expression .)
    EQ              reduce using rule 38 (expression -> expression EQ expression .)
    NE              reduce using rule 38 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 38 (expression -> expression EQ expression .)
    COLON           reduce using rule 38 (expression -> expression EQ expression .)
    START_BLOCK     reduce using rule 38 (expression -> expression EQ expression .)
    AND             reduce using rule 38 (expression -> expression EQ expression .)
    OR              reduce using rule 38 (expression -> expression EQ expression .)
    COMMA           reduce using rule 38 (expression -> expression EQ expression .)
    IF              reduce using rule 38 (expression -> expression EQ expression .)
    ELSE            reduce using rule 38 (expression -> expression EQ expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! ADD             [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! REM             [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! POW             [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 49

    (39) expression -> expression NE expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 39 (expression -> expression NE expression .)
    GT              reduce using rule 39 (expression -> expression NE expression .)
    LT              reduce using rule 39 (expression -> expression NE expression .)
    GE              reduce using rule 39 (expression -> expression NE expression .)
    LE              reduce using rule 39 (expression -> expression NE expression .)
    EQ              reduce using rule 39 (expression -> expression NE expression .)
    NE              reduce using rule 39 (expression -> expression NE expression .)
    RPAREN          reduce using rule 39 (expression -> expression NE expression .)
    COLON           reduce using rule 39 (expression -> expression NE expression .)
    START_BLOCK     reduce using rule 39 (expression -> expression NE expression .)
    AND             reduce using rule 39 (expression -> expression NE expression .)
    OR              reduce using rule 39 (expression -> expression NE expression .)
    COMMA           reduce using rule 39 (expression -> expression NE expression .)
    IF              reduce using rule 39 (expression -> expression NE expression .)
    ELSE            reduce using rule 39 (expression -> expression NE expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    POW             shift and go to state 29

  ! ADD             [ reduce using rule 39 (expression -> expression NE expression .) ]
  ! REM             [ reduce using rule 39 (expression -> expression NE expression .) ]
  ! MUL             [ reduce using rule 39 (expression -> expression NE expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression NE expression .) ]
  ! POW             [ reduce using rule 39 (expression -> expression NE expression .) ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]


state 50

    (40) expression -> expression POW expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           reduce using rule 40 (expression -> expression POW expression .)
    ADD             reduce using rule 40 (expression -> expression POW expression .)
    REM             reduce using rule 40 (expression -> expression POW expression .)
    MUL             reduce using rule 40 (expression -> expression POW expression .)
    DIV             reduce using rule 40 (expression -> expression POW expression .)
    MOD             reduce using rule 40 (expression -> expression POW expression .)
    GT              reduce using rule 40 (expression -> expression POW expression .)
    LT              reduce using rule 40 (expression -> expression POW expression .)
    GE              reduce using rule 40 (expression -> expression POW expression .)
    LE              reduce using rule 40 (expression -> expression POW expression .)
    EQ              reduce using rule 40 (expression -> expression POW expression .)
    NE              reduce using rule 40 (expression -> expression POW expression .)
    POW             reduce using rule 40 (expression -> expression POW expression .)
    RPAREN          reduce using rule 40 (expression -> expression POW expression .)
    COLON           reduce using rule 40 (expression -> expression POW expression .)
    START_BLOCK     reduce using rule 40 (expression -> expression POW expression .)
    AND             reduce using rule 40 (expression -> expression POW expression .)
    OR              reduce using rule 40 (expression -> expression POW expression .)
    COMMA           reduce using rule 40 (expression -> expression POW expression .)
    IF              reduce using rule 40 (expression -> expression POW expression .)
    ELSE            reduce using rule 40 (expression -> expression POW expression .)

  ! ADD             [ shift and go to state 18 ]
  ! REM             [ shift and go to state 19 ]
  ! MUL             [ shift and go to state 20 ]
  ! DIV             [ shift and go to state 21 ]
  ! MOD             [ shift and go to state 22 ]
  ! GT              [ shift and go to state 23 ]
  ! LT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! LE              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NE              [ shift and go to state 28 ]
  ! POW             [ shift and go to state 29 ]


state 51

    (11) stmt -> PRINT LPAREN expr_list . RPAREN SPLIT
    (13) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 65
    COMMA           shift and go to state 66


state 52

    (12) expr_list -> expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    RPAREN          reduce using rule 12 (expr_list -> expression .)
    COMMA           reduce using rule 12 (expr_list -> expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 53

    (41) expression -> LPAREN expression RPAREN .

    SPLIT           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    REM             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    START_BLOCK     reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 41 (expression -> LPAREN expression RPAREN .)


state 54

    (15) stmt -> FOR VAR IN . range COLON stmt
    (14) range -> . RANGE LPAREN expr_list RPAREN

    RANGE           shift and go to state 68

    range                          shift and go to state 67

state 55

    (23) stmt -> VAR ASSIGN expression . SPLIT
    (17) if_assign -> VAR ASSIGN expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression
    (25) condition_list -> expression .

  ! shift/reduce conflict for SPLIT resolved as shift
    SPLIT           shift and go to state 69
    IF              reduce using rule 17 (if_assign -> VAR ASSIGN expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29
    AND             reduce using rule 25 (condition_list -> expression .)
    OR              reduce using rule 25 (condition_list -> expression .)

  ! SPLIT           [ reduce using rule 25 (condition_list -> expression .) ]


state 56

    (24) stmt -> VAR ASSIGN condition_list . SPLIT
    (26) condition_list -> condition_list . AND expression
    (27) condition_list -> condition_list . OR expression

    SPLIT           shift and go to state 70
    AND             shift and go to state 61
    OR              shift and go to state 62


state 57

    (41) expression -> LPAREN . expression RPAREN
    (28) condition_list -> LPAREN . condition_list RPAREN
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (25) condition_list -> . expression
    (26) condition_list -> . condition_list AND expression
    (27) condition_list -> . condition_list OR expression
    (28) condition_list -> . LPAREN condition_list RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 57

    expression                     shift and go to state 71
    condition_list                 shift and go to state 63

state 58

    (16) stmt -> if_assign IF condition_list . ELSE expression SPLIT
    (26) condition_list -> condition_list . AND expression
    (27) condition_list -> condition_list . OR expression

    ELSE            shift and go to state 72
    AND             shift and go to state 61
    OR              shift and go to state 62


state 59

    (18) stmt -> IF condition_list COLON . stmt
    (19) stmt -> IF condition_list COLON . SPLIT stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (15) stmt -> . FOR VAR IN range COLON stmt
    (16) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (18) stmt -> . IF condition_list COLON stmt
    (19) stmt -> . IF condition_list COLON SPLIT stmt
    (20) stmt -> . IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (17) if_assign -> . VAR ASSIGN expression

    SPLIT           shift and go to state 74
    PRINT           shift and go to state 7
    FOR             shift and go to state 9
    IF              shift and go to state 12
    VAR             shift and go to state 10
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    LPAREN          shift and go to state 8

    stmt                           shift and go to state 73
    expression                     shift and go to state 6
    if_assign                      shift and go to state 11

state 60

    (20) stmt -> IF condition_list START_BLOCK . SPLIT block END_BLOCK SPLIT

    SPLIT           shift and go to state 75


state 61

    (26) condition_list -> condition_list AND . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 76

state 62

    (27) condition_list -> condition_list OR . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 77

state 63

    (28) condition_list -> LPAREN condition_list . RPAREN
    (26) condition_list -> condition_list . AND expression
    (27) condition_list -> condition_list . OR expression

    RPAREN          shift and go to state 78
    AND             shift and go to state 61
    OR              shift and go to state 62


state 64

    (41) expression -> LPAREN expression . RPAREN
    (25) condition_list -> expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 53
    AND             reduce using rule 25 (condition_list -> expression .)
    OR              reduce using rule 25 (condition_list -> expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29

  ! RPAREN          [ reduce using rule 25 (condition_list -> expression .) ]


state 65

    (11) stmt -> PRINT LPAREN expr_list RPAREN . SPLIT

    SPLIT           shift and go to state 79


state 66

    (13) expr_list -> expr_list COMMA . expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 80

state 67

    (15) stmt -> FOR VAR IN range . COLON stmt

    COLON           shift and go to state 81


state 68

    (14) range -> RANGE . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 82


state 69

    (23) stmt -> VAR ASSIGN expression SPLIT .

    SPLIT           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    PRINT           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    FOR             reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    IF              reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    VAR             reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    TRUE            reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    FALSE           reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    NUMBER          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    STRING          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    LPAREN          reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    $end            reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)
    END_BLOCK       reduce using rule 23 (stmt -> VAR ASSIGN expression SPLIT .)


state 70

    (24) stmt -> VAR ASSIGN condition_list SPLIT .

    SPLIT           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    PRINT           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FOR             reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    IF              reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    VAR             reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    TRUE            reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    FALSE           reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    NUMBER          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    STRING          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    LPAREN          reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    $end            reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)
    END_BLOCK       reduce using rule 24 (stmt -> VAR ASSIGN condition_list SPLIT .)


state 71

    (41) expression -> LPAREN expression . RPAREN
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression
    (25) condition_list -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 53
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29
    AND             reduce using rule 25 (condition_list -> expression .)
    OR              reduce using rule 25 (condition_list -> expression .)

  ! RPAREN          [ reduce using rule 25 (condition_list -> expression .) ]


state 72

    (16) stmt -> if_assign IF condition_list ELSE . expression SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expression                     shift and go to state 83

state 73

    (18) stmt -> IF condition_list COLON stmt .

    SPLIT           reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    PRINT           reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    FOR             reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    IF              reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    VAR             reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    TRUE            reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    FALSE           reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    NUMBER          reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    STRING          reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    LPAREN          reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    $end            reduce using rule 18 (stmt -> IF condition_list COLON stmt .)
    END_BLOCK       reduce using rule 18 (stmt -> IF condition_list COLON stmt .)


state 74

    (19) stmt -> IF condition_list COLON SPLIT . stmt
    (8) stmt -> SPLIT .
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (15) stmt -> . FOR VAR IN range COLON stmt
    (16) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (18) stmt -> . IF condition_list COLON stmt
    (19) stmt -> . IF condition_list COLON SPLIT stmt
    (20) stmt -> . IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (17) if_assign -> . VAR ASSIGN expression

  ! shift/reduce conflict for SPLIT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    $end            reduce using rule 8 (stmt -> SPLIT .)
    END_BLOCK       reduce using rule 8 (stmt -> SPLIT .)
    SPLIT           shift and go to state 5
    PRINT           shift and go to state 7
    FOR             shift and go to state 9
    IF              shift and go to state 12
    VAR             shift and go to state 10
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    LPAREN          shift and go to state 8

  ! SPLIT           [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! PRINT           [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! FOR             [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! IF              [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! VAR             [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! TRUE            [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! FALSE           [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! NUMBER          [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! STRING          [ reduce using rule 8 (stmt -> SPLIT .) ]
  ! LPAREN          [ reduce using rule 8 (stmt -> SPLIT .) ]

    stmt                           shift and go to state 84
    expression                     shift and go to state 6
    if_assign                      shift and go to state 11

state 75

    (20) stmt -> IF condition_list START_BLOCK SPLIT . block END_BLOCK SPLIT
    (21) block -> . stmt
    (22) block -> . block stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (15) stmt -> . FOR VAR IN range COLON stmt
    (16) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (18) stmt -> . IF condition_list COLON stmt
    (19) stmt -> . IF condition_list COLON SPLIT stmt
    (20) stmt -> . IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (17) if_assign -> . VAR ASSIGN expression

    SPLIT           shift and go to state 5
    PRINT           shift and go to state 7
    FOR             shift and go to state 9
    IF              shift and go to state 12
    VAR             shift and go to state 10
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    LPAREN          shift and go to state 8

    block                          shift and go to state 85
    stmt                           shift and go to state 86
    expression                     shift and go to state 6
    if_assign                      shift and go to state 11

state 76

    (26) condition_list -> condition_list AND expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    COLON           reduce using rule 26 (condition_list -> condition_list AND expression .)
    START_BLOCK     reduce using rule 26 (condition_list -> condition_list AND expression .)
    AND             reduce using rule 26 (condition_list -> condition_list AND expression .)
    OR              reduce using rule 26 (condition_list -> condition_list AND expression .)
    SPLIT           reduce using rule 26 (condition_list -> condition_list AND expression .)
    ELSE            reduce using rule 26 (condition_list -> condition_list AND expression .)
    RPAREN          reduce using rule 26 (condition_list -> condition_list AND expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 77

    (27) condition_list -> condition_list OR expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    COLON           reduce using rule 27 (condition_list -> condition_list OR expression .)
    START_BLOCK     reduce using rule 27 (condition_list -> condition_list OR expression .)
    AND             reduce using rule 27 (condition_list -> condition_list OR expression .)
    OR              reduce using rule 27 (condition_list -> condition_list OR expression .)
    SPLIT           reduce using rule 27 (condition_list -> condition_list OR expression .)
    ELSE            reduce using rule 27 (condition_list -> condition_list OR expression .)
    RPAREN          reduce using rule 27 (condition_list -> condition_list OR expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 78

    (28) condition_list -> LPAREN condition_list RPAREN .

    COLON           reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)
    START_BLOCK     reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)
    AND             reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)
    OR              reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)
    SPLIT           reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)
    ELSE            reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)
    RPAREN          reduce using rule 28 (condition_list -> LPAREN condition_list RPAREN .)


state 79

    (11) stmt -> PRINT LPAREN expr_list RPAREN SPLIT .

    SPLIT           reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    PRINT           reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FOR             reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    IF              reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    VAR             reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    TRUE            reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    FALSE           reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    NUMBER          reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    STRING          reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    LPAREN          reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    $end            reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)
    END_BLOCK       reduce using rule 11 (stmt -> PRINT LPAREN expr_list RPAREN SPLIT .)


state 80

    (13) expr_list -> expr_list COMMA expression .
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    RPAREN          reduce using rule 13 (expr_list -> expr_list COMMA expression .)
    COMMA           reduce using rule 13 (expr_list -> expr_list COMMA expression .)
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 81

    (15) stmt -> FOR VAR IN range COLON . stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (15) stmt -> . FOR VAR IN range COLON stmt
    (16) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (18) stmt -> . IF condition_list COLON stmt
    (19) stmt -> . IF condition_list COLON SPLIT stmt
    (20) stmt -> . IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (17) if_assign -> . VAR ASSIGN expression

    SPLIT           shift and go to state 5
    PRINT           shift and go to state 7
    FOR             shift and go to state 9
    IF              shift and go to state 12
    VAR             shift and go to state 10
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    LPAREN          shift and go to state 8

    stmt                           shift and go to state 87
    expression                     shift and go to state 6
    if_assign                      shift and go to state 11

state 82

    (14) range -> RANGE LPAREN . expr_list RPAREN
    (12) expr_list -> . expression
    (13) expr_list -> . expr_list COMMA expression
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN

    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    VAR             shift and go to state 32
    LPAREN          shift and go to state 8

    expr_list                      shift and go to state 88
    expression                     shift and go to state 52

state 83

    (16) stmt -> if_assign IF condition_list ELSE expression . SPLIT
    (29) expression -> expression . ADD expression
    (30) expression -> expression . REM expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . GT expression
    (35) expression -> expression . LT expression
    (36) expression -> expression . GE expression
    (37) expression -> expression . LE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . NE expression
    (40) expression -> expression . POW expression

    SPLIT           shift and go to state 89
    ADD             shift and go to state 18
    REM             shift and go to state 19
    MUL             shift and go to state 20
    DIV             shift and go to state 21
    MOD             shift and go to state 22
    GT              shift and go to state 23
    LT              shift and go to state 24
    GE              shift and go to state 25
    LE              shift and go to state 26
    EQ              shift and go to state 27
    NE              shift and go to state 28
    POW             shift and go to state 29


state 84

    (19) stmt -> IF condition_list COLON SPLIT stmt .

    SPLIT           reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    PRINT           reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    FOR             reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    IF              reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    VAR             reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    TRUE            reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    FALSE           reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    NUMBER          reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    STRING          reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    LPAREN          reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    $end            reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)
    END_BLOCK       reduce using rule 19 (stmt -> IF condition_list COLON SPLIT stmt .)


state 85

    (20) stmt -> IF condition_list START_BLOCK SPLIT block . END_BLOCK SPLIT
    (22) block -> block . stmt
    (8) stmt -> . SPLIT
    (9) stmt -> . expression SPLIT
    (11) stmt -> . PRINT LPAREN expr_list RPAREN SPLIT
    (15) stmt -> . FOR VAR IN range COLON stmt
    (16) stmt -> . if_assign IF condition_list ELSE expression SPLIT
    (18) stmt -> . IF condition_list COLON stmt
    (19) stmt -> . IF condition_list COLON SPLIT stmt
    (20) stmt -> . IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT
    (23) stmt -> . VAR ASSIGN expression SPLIT
    (24) stmt -> . VAR ASSIGN condition_list SPLIT
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (6) expression -> . NUMBER
    (7) expression -> . STRING
    (10) expression -> . VAR
    (29) expression -> . expression ADD expression
    (30) expression -> . expression REM expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression GT expression
    (35) expression -> . expression LT expression
    (36) expression -> . expression GE expression
    (37) expression -> . expression LE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression NE expression
    (40) expression -> . expression POW expression
    (41) expression -> . LPAREN expression RPAREN
    (17) if_assign -> . VAR ASSIGN expression

    END_BLOCK       shift and go to state 90
    SPLIT           shift and go to state 5
    PRINT           shift and go to state 7
    FOR             shift and go to state 9
    IF              shift and go to state 12
    VAR             shift and go to state 10
    TRUE            shift and go to state 13
    FALSE           shift and go to state 14
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    LPAREN          shift and go to state 8

    stmt                           shift and go to state 91
    expression                     shift and go to state 6
    if_assign                      shift and go to state 11

state 86

    (21) block -> stmt .

    END_BLOCK       reduce using rule 21 (block -> stmt .)
    SPLIT           reduce using rule 21 (block -> stmt .)
    PRINT           reduce using rule 21 (block -> stmt .)
    FOR             reduce using rule 21 (block -> stmt .)
    IF              reduce using rule 21 (block -> stmt .)
    VAR             reduce using rule 21 (block -> stmt .)
    TRUE            reduce using rule 21 (block -> stmt .)
    FALSE           reduce using rule 21 (block -> stmt .)
    NUMBER          reduce using rule 21 (block -> stmt .)
    STRING          reduce using rule 21 (block -> stmt .)
    LPAREN          reduce using rule 21 (block -> stmt .)


state 87

    (15) stmt -> FOR VAR IN range COLON stmt .

    SPLIT           reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    PRINT           reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    FOR             reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    IF              reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    VAR             reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    TRUE            reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    FALSE           reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    NUMBER          reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    STRING          reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    LPAREN          reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    $end            reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)
    END_BLOCK       reduce using rule 15 (stmt -> FOR VAR IN range COLON stmt .)


state 88

    (14) range -> RANGE LPAREN expr_list . RPAREN
    (13) expr_list -> expr_list . COMMA expression

    RPAREN          shift and go to state 92
    COMMA           shift and go to state 66


state 89

    (16) stmt -> if_assign IF condition_list ELSE expression SPLIT .

    SPLIT           reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    PRINT           reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FOR             reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    IF              reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    VAR             reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    TRUE            reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    FALSE           reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    NUMBER          reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    STRING          reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    LPAREN          reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    $end            reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)
    END_BLOCK       reduce using rule 16 (stmt -> if_assign IF condition_list ELSE expression SPLIT .)


state 90

    (20) stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK . SPLIT

    SPLIT           shift and go to state 93


state 91

    (22) block -> block stmt .

    END_BLOCK       reduce using rule 22 (block -> block stmt .)
    SPLIT           reduce using rule 22 (block -> block stmt .)
    PRINT           reduce using rule 22 (block -> block stmt .)
    FOR             reduce using rule 22 (block -> block stmt .)
    IF              reduce using rule 22 (block -> block stmt .)
    VAR             reduce using rule 22 (block -> block stmt .)
    TRUE            reduce using rule 22 (block -> block stmt .)
    FALSE           reduce using rule 22 (block -> block stmt .)
    NUMBER          reduce using rule 22 (block -> block stmt .)
    STRING          reduce using rule 22 (block -> block stmt .)
    LPAREN          reduce using rule 22 (block -> block stmt .)


state 92

    (14) range -> RANGE LPAREN expr_list RPAREN .

    COLON           reduce using rule 14 (range -> RANGE LPAREN expr_list RPAREN .)


state 93

    (20) stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .

    SPLIT           reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    PRINT           reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FOR             reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    IF              reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    VAR             reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    TRUE            reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    FALSE           reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    NUMBER          reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    STRING          reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    LPAREN          reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    $end            reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)
    END_BLOCK       reduce using rule 20 (stmt -> IF condition_list START_BLOCK SPLIT block END_BLOCK SPLIT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SPLIT in state 55 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 64 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for SPLIT in state 74 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 74 resolved as shift
WARNING: shift/reduce conflict for FOR in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for VAR in state 74 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 74 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 74 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 74 resolved as shift
WARNING: shift/reduce conflict for STRING in state 74 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 74 resolved as shift
