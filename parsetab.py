
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEGTGEEQNEleftREMADDleftMULDIVMODleftPOWNUMBER ID SPLIT STRING TRUE FALSE PRINT AND OR ADD REM MUL DIV MOD LT GT LPAREN RPAREN ASSIGN COMMA GE LE EQ NE POWstart : function\n    function : function statement SPLIT\n             | function line_statement\n             | empty\n    line_statement : SPLITline_statement : expression SPLIT\n    statement : PRINT LPAREN expr_list RPAREN\n    \n    line_statement : ID ASSIGN expression SPLIT\n                   | ID ASSIGN condition_list SPLIT\n    \n    expr_list : expression\n              | expr_list COMMA expression\n    \n    condition_list : expression\n                   | condition_list AND expression\n                   | condition_list OR expression\n    condition_list : LPAREN condition_list RPARENexpression : TRUEexpression : FALSEexpression : IDexpression : NUMBERexpression : STRING\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n               | expression GE expression\n               | expression LE expression\n               | expression EQ expression\n               | expression NE expression\n               | expression POW expression\n    expression : LPAREN expression RPARENempty :'
    
_lr_action_items = {'PRINT':([0,2,3,5,6,15,19,53,54,],[-34,7,-4,-5,-3,-2,-6,-8,-9,]),'SPLIT':([0,2,3,4,5,6,9,10,11,12,13,14,15,18,19,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,60,61,62,],[-34,5,-4,15,-5,-3,19,-18,-16,-17,-19,-20,-2,-18,-6,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,53,54,-7,-8,-9,-13,-14,-15,]),'ID':([0,2,3,5,6,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,53,54,55,56,],[-34,10,-4,-5,-3,18,-2,18,-6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-8,-9,18,18,]),'TRUE':([0,2,3,5,6,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,53,54,55,56,],[-34,11,-4,-5,-3,11,-2,11,-6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-8,-9,11,11,]),'FALSE':([0,2,3,5,6,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,53,54,55,56,],[-34,12,-4,-5,-3,12,-2,12,-6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-8,-9,12,12,]),'NUMBER':([0,2,3,5,6,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,53,54,55,56,],[-34,13,-4,-5,-3,13,-2,13,-6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-8,-9,13,13,]),'STRING':([0,2,3,5,6,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,53,54,55,56,],[-34,14,-4,-5,-3,14,-2,14,-6,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-8,-9,14,14,]),'LPAREN':([0,2,3,5,6,7,8,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,53,54,55,56,],[-34,8,-4,-5,-3,16,8,-2,8,-6,8,8,8,8,8,8,8,8,8,8,8,8,50,50,8,-8,-9,8,8,]),'$end':([0,1,2,3,5,6,15,19,53,54,],[-34,0,-1,-4,-5,-3,-2,-6,-8,-9,]),'ADD':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[20,-18,-16,-17,-19,-20,20,-18,20,-33,-21,-22,-23,-24,-25,20,20,20,20,20,20,-32,20,20,20,20,20,]),'REM':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[21,-18,-16,-17,-19,-20,21,-18,21,-33,-21,-22,-23,-24,-25,21,21,21,21,21,21,-32,21,21,21,21,21,]),'MUL':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[22,-18,-16,-17,-19,-20,22,-18,22,-33,22,22,-23,-24,-25,22,22,22,22,22,22,-32,22,22,22,22,22,]),'DIV':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[23,-18,-16,-17,-19,-20,23,-18,23,-33,23,23,-23,-24,-25,23,23,23,23,23,23,-32,23,23,23,23,23,]),'MOD':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[24,-18,-16,-17,-19,-20,24,-18,24,-33,24,24,-23,-24,-25,24,24,24,24,24,24,-32,24,24,24,24,24,]),'GT':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[25,-18,-16,-17,-19,-20,25,-18,25,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,25,25,25,25,25,]),'LT':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[26,-18,-16,-17,-19,-20,26,-18,26,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,26,26,26,26,26,]),'GE':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[27,-18,-16,-17,-19,-20,27,-18,27,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,27,27,27,27,27,]),'LE':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[28,-18,-16,-17,-19,-20,28,-18,28,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,28,28,28,28,28,]),'EQ':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[29,-18,-16,-17,-19,-20,29,-18,29,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,29,29,29,29,29,]),'NE':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[30,-18,-16,-17,-19,-20,30,-18,30,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,30,30,30,30,30,]),'POW':([9,10,11,12,13,14,17,18,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,],[31,-18,-16,-17,-19,-20,31,-18,31,-33,31,31,31,31,31,31,31,31,31,31,31,-32,31,31,31,31,31,]),'ASSIGN':([10,],[32,]),'RPAREN':([11,12,13,14,17,18,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,57,58,59,60,61,62,],[-16,-17,-19,-20,35,-18,51,-10,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,35,62,-11,-13,-14,-15,]),'COMMA':([11,12,13,14,18,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,],[-16,-17,-19,-20,-18,52,-10,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-11,]),'AND':([11,12,13,14,18,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,58,60,61,62,],[-16,-17,-19,-20,-18,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-12,55,-12,55,-13,-14,-15,]),'OR':([11,12,13,14,18,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,58,60,61,62,],[-16,-17,-19,-20,-18,-33,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-12,56,-12,56,-13,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'function':([0,],[2,]),'empty':([0,],[3,]),'statement':([2,],[4,]),'line_statement':([2,],[6,]),'expression':([2,8,16,20,21,22,23,24,25,26,27,28,29,30,31,32,50,52,55,56,],[9,17,34,36,37,38,39,40,41,42,43,44,45,46,47,48,57,59,60,61,]),'expr_list':([16,],[33,]),'condition_list':([32,50,],[49,58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> function','start',1,'p_start','dparser.py',27),
  ('function -> function statement SPLIT','function',3,'p_function','dparser.py',32),
  ('function -> function line_statement','function',2,'p_function','dparser.py',33),
  ('function -> empty','function',1,'p_function','dparser.py',34),
  ('line_statement -> SPLIT','line_statement',1,'p_statement_none','dparser.py',39),
  ('line_statement -> expression SPLIT','line_statement',2,'p_statement_expr','dparser.py',43),
  ('statement -> PRINT LPAREN expr_list RPAREN','statement',4,'p_statement_print','dparser.py',50),
  ('line_statement -> ID ASSIGN expression SPLIT','line_statement',4,'p_statement_assign','dparser.py',58),
  ('line_statement -> ID ASSIGN condition_list SPLIT','line_statement',4,'p_statement_assign','dparser.py',59),
  ('expr_list -> expression','expr_list',1,'p_expression_list','dparser.py',67),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','dparser.py',68),
  ('condition_list -> expression','condition_list',1,'p_condition_list','dparser.py',78),
  ('condition_list -> condition_list AND expression','condition_list',3,'p_condition_list','dparser.py',79),
  ('condition_list -> condition_list OR expression','condition_list',3,'p_condition_list','dparser.py',80),
  ('condition_list -> LPAREN condition_list RPAREN','condition_list',3,'p_condition_parens','dparser.py',92),
  ('expression -> TRUE','expression',1,'p_expression_true','dparser.py',98),
  ('expression -> FALSE','expression',1,'p_expression_false','dparser.py',104),
  ('expression -> ID','expression',1,'p_expression_var','dparser.py',110),
  ('expression -> NUMBER','expression',1,'p_expression_num','dparser.py',116),
  ('expression -> STRING','expression',1,'p_expression_string','dparser.py',122),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dparser.py',129),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dparser.py',130),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dparser.py',131),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dparser.py',132),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dparser.py',133),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dparser.py',134),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dparser.py',135),
  ('expression -> expression GE expression','expression',3,'p_expression_two_operator','dparser.py',136),
  ('expression -> expression LE expression','expression',3,'p_expression_two_operator','dparser.py',137),
  ('expression -> expression EQ expression','expression',3,'p_expression_two_operator','dparser.py',138),
  ('expression -> expression NE expression','expression',3,'p_expression_two_operator','dparser.py',139),
  ('expression -> expression POW expression','expression',3,'p_expression_two_operator','dparser.py',140),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','dparser.py',160),
  ('empty -> <empty>','empty',0,'p_empty','dparser.py',170),
]
