
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ID SPLIT TRUE FALSE PRINT ADD REM MUL DIV MOD LT GT LPAREN RPAREN GE LE EQ NE POWstart : function\n    function : function statement SPLIT\n             | empty\n    \n    statement : PRINT LPAREN expression RPAREN\n    expression : TRUEexpression : FALSEexpression : NUMBER\n    expression : expression ADD expression\n               | expression REM expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression MOD expression\n               | expression GT expression\n               | expression LT expression\n    empty :'
    
_lr_action_items = {'PRINT':([0,2,3,6,],[-15,5,-3,-2,]),'$end':([0,1,2,3,6,],[-15,0,-1,-3,-2,]),'SPLIT':([4,12,],[6,-4,]),'LPAREN':([5,],[7,]),'TRUE':([7,13,14,15,16,17,18,19,],[9,9,9,9,9,9,9,9,]),'FALSE':([7,13,14,15,16,17,18,19,],[10,10,10,10,10,10,10,10,]),'NUMBER':([7,13,14,15,16,17,18,19,],[11,11,11,11,11,11,11,11,]),'RPAREN':([8,9,10,11,20,21,22,23,24,25,26,],[12,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,]),'ADD':([8,9,10,11,20,21,22,23,24,25,26,],[13,-5,-6,-7,13,13,13,13,13,13,13,]),'REM':([8,9,10,11,20,21,22,23,24,25,26,],[14,-5,-6,-7,14,14,14,14,14,14,14,]),'MUL':([8,9,10,11,20,21,22,23,24,25,26,],[15,-5,-6,-7,15,15,15,15,15,15,15,]),'DIV':([8,9,10,11,20,21,22,23,24,25,26,],[16,-5,-6,-7,16,16,16,16,16,16,16,]),'MOD':([8,9,10,11,20,21,22,23,24,25,26,],[17,-5,-6,-7,17,17,17,17,17,17,17,]),'GT':([8,9,10,11,20,21,22,23,24,25,26,],[18,-5,-6,-7,18,18,18,18,18,18,18,]),'LT':([8,9,10,11,20,21,22,23,24,25,26,],[19,-5,-6,-7,19,19,19,19,19,19,19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'function':([0,],[2,]),'empty':([0,],[3,]),'statement':([2,],[4,]),'expression':([7,13,14,15,16,17,18,19,],[8,20,21,22,23,24,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> function','start',1,'p_start','dparser.py',5),
  ('function -> function statement SPLIT','function',3,'p_function','dparser.py',10),
  ('function -> empty','function',1,'p_function','dparser.py',11),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','dparser.py',18),
  ('expression -> TRUE','expression',1,'p_expression_true','dparser.py',25),
  ('expression -> FALSE','expression',1,'p_expression_false','dparser.py',31),
  ('expression -> NUMBER','expression',1,'p_expression_num','dparser.py',37),
  ('expression -> expression ADD expression','expression',3,'p_expression_two_operator','dparser.py',44),
  ('expression -> expression REM expression','expression',3,'p_expression_two_operator','dparser.py',45),
  ('expression -> expression MUL expression','expression',3,'p_expression_two_operator','dparser.py',46),
  ('expression -> expression DIV expression','expression',3,'p_expression_two_operator','dparser.py',47),
  ('expression -> expression MOD expression','expression',3,'p_expression_two_operator','dparser.py',48),
  ('expression -> expression GT expression','expression',3,'p_expression_two_operator','dparser.py',49),
  ('expression -> expression LT expression','expression',3,'p_expression_two_operator','dparser.py',50),
  ('empty -> <empty>','empty',0,'p_empty','dparser.py',64),
]
